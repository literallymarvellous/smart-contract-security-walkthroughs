{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "priviledgedMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b506040518060400160405280600b81526020016a43617220436f6d70616e7960a81b8152506040518060400160405280600381526020016243435960e81b815250816003908162000063919062000190565b50600462000072828262000190565b5050506200008f620000896200009560201b60201c565b62000099565b6200025c565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200011657607f821691505b6020821081036200013757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200018b57600081815260208120601f850160051c81016020861015620001665750805b601f850160051c820191505b81811015620001875782815560010162000172565b5050505b505050565b81516001600160401b03811115620001ac57620001ac620000eb565b620001c481620001bd845462000101565b846200013d565b602080601f831160018114620001fc5760008415620001e35750858301515b600019600386901b1c1916600185901b17855562000187565b600085815260208120601f198616915b828110156200022d578886015182559484019460019091019084016200020c565b50858210156200024c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610cce806200026c6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a257806395d89b411161007157806395d89b411461020a578063a457c2d714610212578063a9059cbb14610225578063dd62ed3e14610238578063f2fde38b1461024b57600080fd5b806370a08231146101ab578063715018a6146101d45780637ed9782a146101dc5780638da5cb5b146101ef57600080fd5b806318160ddd116100de57806318160ddd1461016e57806323b872dd14610176578063313ce56714610189578063395093511461019857600080fd5b806306661abd1461011057806306fdde031461012c578063095ea7b3146101415780631249c58b14610164575b600080fd5b61011960075481565b6040519081526020015b60405180910390f35b61013461025e565b6040516101239190610b18565b61015461014f366004610b82565b6102f0565b6040519015158152602001610123565b61016c61030a565b005b600254610119565b610154610184366004610bac565b6103e8565b60405160128152602001610123565b6101546101a6366004610b82565b61040c565b6101196101b9366004610be8565b6001600160a01b031660009081526020819052604090205490565b61016c61042e565b61016c6101ea366004610b82565b610440565b6005546040516001600160a01b039091168152602001610123565b61013461052f565b610154610220366004610b82565b61053e565b610154610233366004610b82565b6105b9565b610119610246366004610c0a565b6105c7565b61016c610259366004610be8565b6105f2565b60606003805461026d90610c3d565b80601f016020809104026020016040519081016040528092919081815260200182805461029990610c3d565b80156102e65780601f106102bb576101008083540402835291602001916102e6565b820191906000526020600020905b8154815290600101906020018083116102c957829003601f168201915b5050505050905090565b6000336102fe81858561066b565b60019150505b92915050565b3360009081526006602052604090205460ff16156103645760405162461bcd60e51b815260206004820152601260248201527143616e206f6e6c79206d696e74206f6e636560701b60448201526064015b60405180910390fd5b692c781f708c509f40000061037860025490565b106103ba5760405162461bcd60e51b815260206004820152601260248201527113585e0814dd5c1c1b1e4814995858da195960721b604482015260640161035b565b336000818152600660205260409020805460ff191660011790556103e690670de0b6b3a764000061078f565b565b6000336103f685828561084e565b6104018585856108c8565b506001949350505050565b6000336102fe81858561041f83836105c7565b6104299190610c77565b61066b565b610436610a6c565b6103e66000610ac6565b610448610a6c565b3360009081526006602052604090205460ff161561049d5760405162461bcd60e51b815260206004820152601260248201527143616e206f6e6c79206d696e74206f6e636560701b604482015260640161035b565b692c781f708c509f4000006104b160025490565b6104bb9083610c77565b11156104fe5760405162461bcd60e51b815260206004820152601260248201527113585e0814dd5c1c1b1e4814995858da195960721b604482015260640161035b565b6001600160a01b0382166000908152600660205260409020805460ff1916600117905561052b828261078f565b5050565b60606004805461026d90610c3d565b6000338161054c82866105c7565b9050838110156105ac5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161035b565b610401828686840361066b565b6000336102fe8185856108c8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6105fa610a6c565b6001600160a01b03811661065f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035b565b61066881610ac6565b50565b6001600160a01b0383166106cd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161035b565b6001600160a01b03821661072e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161035b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0382166107e55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161035b565b80600260008282546107f79190610c77565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600061085a84846105c7565b905060001981146108c257818110156108b55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161035b565b6108c2848484840361066b565b50505050565b6001600160a01b03831661092c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161035b565b6001600160a01b03821661098e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161035b565b6001600160a01b03831660009081526020819052604090205481811015610a065760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161035b565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36108c2565b6005546001600160a01b031633146103e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035b565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208083528351808285015260005b81811015610b4557858101830151858201604001528201610b29565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610b7d57600080fd5b919050565b60008060408385031215610b9557600080fd5b610b9e83610b66565b946020939093013593505050565b600080600060608486031215610bc157600080fd5b610bca84610b66565b9250610bd860208501610b66565b9150604084013590509250925092565b600060208284031215610bfa57600080fd5b610c0382610b66565b9392505050565b60008060408385031215610c1d57600080fd5b610c2683610b66565b9150610c3460208401610b66565b90509250929050565b600181811c90821680610c5157607f821691505b602082108103610c7157634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561030457634e487b7160e01b600052601160045260246000fdfea264697066735822122093faf515df7464bc09c0c9f894d019317e2d6df4e0d38b64c60d56656f49b82264736f6c63430008110033",
    "sourceMap": "420:1163:78:-:0;;;672:44;;;;;;;;;;1976:113:16;;;;;;;;;;;;;-1:-1:-1;;;1976:113:16;;;;;;;;;;;;;;;;-1:-1:-1;;;1976:113:16;;;2050:5;2042;:13;;;;;;:::i;:::-;-1:-1:-1;2065:7:16;:17;2075:7;2065;:17;:::i;:::-;;1976:113;;936:32:10;955:12;:10;;;:12;;:::i;:::-;936:18;:32::i;:::-;420:1163:78;;640:96:27;719:10;;640:96::o;2433:187:10:-;2525:6;;;-1:-1:-1;;;;;2541:17:10;;;-1:-1:-1;;;;;;2541:17:10;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;14:127:126:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:545::-;759:2;754:3;751:11;748:448;;;795:1;820:5;816:2;809:17;865:4;861:2;851:19;935:2;923:10;919:19;916:1;912:27;906:4;902:38;971:4;959:10;956:20;953:47;;;-1:-1:-1;994:4:126;953:47;1049:2;1044:3;1040:12;1037:1;1033:20;1027:4;1023:31;1013:41;;1104:82;1122:2;1115:5;1112:13;1104:82;;;1167:17;;;1148:1;1137:13;1104:82;;;1108:3;;;748:448;657:545;;;:::o;1378:1352::-;1498:10;;-1:-1:-1;;;;;1520:30:126;;1517:56;;;1553:18;;:::i;:::-;1582:97;1672:6;1632:38;1664:4;1658:11;1632:38;:::i;:::-;1626:4;1582:97;:::i;:::-;1734:4;;1798:2;1787:14;;1815:1;1810:663;;;;2517:1;2534:6;2531:89;;;-1:-1:-1;2586:19:126;;;2580:26;2531:89;-1:-1:-1;;1335:1:126;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;2633:81;;1780:944;;1810:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1846:20:126;;;1964:236;1978:7;1975:1;1972:14;1964:236;;;2067:19;;;2061:26;2046:42;;2159:27;;;;2127:1;2115:14;;;;1994:19;;1964:236;;;1968:3;2228:6;2219:7;2216:19;2213:201;;;2289:19;;;2283:26;-1:-1:-1;;2372:1:126;2368:14;;;2384:3;2364:24;2360:37;2356:42;2341:58;2326:74;;2213:201;-1:-1:-1;;;;;2460:1:126;2444:14;;;2440:22;2427:36;;-1:-1:-1;1378:1352:126:o;:::-;420:1163:78;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a257806395d89b411161007157806395d89b411461020a578063a457c2d714610212578063a9059cbb14610225578063dd62ed3e14610238578063f2fde38b1461024b57600080fd5b806370a08231146101ab578063715018a6146101d45780637ed9782a146101dc5780638da5cb5b146101ef57600080fd5b806318160ddd116100de57806318160ddd1461016e57806323b872dd14610176578063313ce56714610189578063395093511461019857600080fd5b806306661abd1461011057806306fdde031461012c578063095ea7b3146101415780631249c58b14610164575b600080fd5b61011960075481565b6040519081526020015b60405180910390f35b61013461025e565b6040516101239190610b18565b61015461014f366004610b82565b6102f0565b6040519015158152602001610123565b61016c61030a565b005b600254610119565b610154610184366004610bac565b6103e8565b60405160128152602001610123565b6101546101a6366004610b82565b61040c565b6101196101b9366004610be8565b6001600160a01b031660009081526020819052604090205490565b61016c61042e565b61016c6101ea366004610b82565b610440565b6005546040516001600160a01b039091168152602001610123565b61013461052f565b610154610220366004610b82565b61053e565b610154610233366004610b82565b6105b9565b610119610246366004610c0a565b6105c7565b61016c610259366004610be8565b6105f2565b60606003805461026d90610c3d565b80601f016020809104026020016040519081016040528092919081815260200182805461029990610c3d565b80156102e65780601f106102bb576101008083540402835291602001916102e6565b820191906000526020600020905b8154815290600101906020018083116102c957829003601f168201915b5050505050905090565b6000336102fe81858561066b565b60019150505b92915050565b3360009081526006602052604090205460ff16156103645760405162461bcd60e51b815260206004820152601260248201527143616e206f6e6c79206d696e74206f6e636560701b60448201526064015b60405180910390fd5b692c781f708c509f40000061037860025490565b106103ba5760405162461bcd60e51b815260206004820152601260248201527113585e0814dd5c1c1b1e4814995858da195960721b604482015260640161035b565b336000818152600660205260409020805460ff191660011790556103e690670de0b6b3a764000061078f565b565b6000336103f685828561084e565b6104018585856108c8565b506001949350505050565b6000336102fe81858561041f83836105c7565b6104299190610c77565b61066b565b610436610a6c565b6103e66000610ac6565b610448610a6c565b3360009081526006602052604090205460ff161561049d5760405162461bcd60e51b815260206004820152601260248201527143616e206f6e6c79206d696e74206f6e636560701b604482015260640161035b565b692c781f708c509f4000006104b160025490565b6104bb9083610c77565b11156104fe5760405162461bcd60e51b815260206004820152601260248201527113585e0814dd5c1c1b1e4814995858da195960721b604482015260640161035b565b6001600160a01b0382166000908152600660205260409020805460ff1916600117905561052b828261078f565b5050565b60606004805461026d90610c3d565b6000338161054c82866105c7565b9050838110156105ac5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161035b565b610401828686840361066b565b6000336102fe8185856108c8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6105fa610a6c565b6001600160a01b03811661065f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035b565b61066881610ac6565b50565b6001600160a01b0383166106cd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161035b565b6001600160a01b03821661072e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161035b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0382166107e55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161035b565b80600260008282546107f79190610c77565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600061085a84846105c7565b905060001981146108c257818110156108b55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161035b565b6108c2848484840361066b565b50505050565b6001600160a01b03831661092c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161035b565b6001600160a01b03821661098e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161035b565b6001600160a01b03831660009081526020819052604090205481811015610a065760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161035b565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36108c2565b6005546001600160a01b031633146103e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035b565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208083528351808285015260005b81811015610b4557858101830151858201604001528201610b29565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610b7d57600080fd5b919050565b60008060408385031215610b9557600080fd5b610b9e83610b66565b946020939093013593505050565b600080600060608486031215610bc157600080fd5b610bca84610b66565b9250610bd860208501610b66565b9150604084013590509250925092565b600060208284031215610bfa57600080fd5b610c0382610b66565b9392505050565b60008060408385031215610c1d57600080fd5b610c2683610b66565b9150610c3460208401610b66565b90509250929050565b600181811c90821680610c5157607f821691505b602082108103610c7157634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561030457634e487b7160e01b600052601160045260246000fdfea264697066735822122093faf515df7464bc09c0c9f894d019317e2d6df4e0d38b64c60d56656f49b82264736f6c63430008110033",
    "sourceMap": "420:1163:78:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;583:20;;;;;;;;;160:25:126;;;148:2;133:18;583:20:78;;;;;;;;2154:98:16;;;:::i;:::-;;;;;;;:::i;4431:197::-;;;;;;:::i;:::-;;:::i;:::-;;;1351:14:126;;1344:22;1326:41;;1314:2;1299:18;4431:197:16;1186:187:126;954:186:78;;;:::i;:::-;;3242:106:16;3329:12;;3242:106;;5190:286;;;;;;:::i;:::-;;:::i;3091:91::-;;;3173:2;1853:36:126;;1841:2;1826:18;3091:91:16;1711:184:126;5871:234:16;;;;;;:::i;:::-;;:::i;3406:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3506:18:16;3480:7;3506:18;;;;;;;;;;;;3406:125;1831:101:10;;;:::i;1321:260:78:-;;;;;;:::i;:::-;;:::i;1201:85:10:-;1273:6;;1201:85;;-1:-1:-1;;;;;1273:6:10;;;2237:51:126;;2225:2;2210:18;1201:85:10;2091:203:126;2365:102:16;;;:::i;6592:427::-;;;;;;:::i;:::-;;:::i;3727:189::-;;;;;;:::i;:::-;;:::i;3974:149::-;;;;;;:::i;:::-;;:::i;2081:198:10:-;;;;;;:::i;:::-;;:::i;2154:98:16:-;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;719:10:27;4568:32:16;719:10:27;4584:7:16;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;;:::o;954:186:78:-;852:10;842:21;;;;:9;:21;;;;;;;;841:22;833:53;;;;-1:-1:-1;;;833:53:78;;3151:2:126;833:53:78;;;3133:21:126;3190:2;3170:18;;;3163:30;-1:-1:-1;;;3209:18:126;;;3202:48;3267:18;;833:53:78;;;;;;;;;564:13:::1;1010;3329:12:16::0;;;3242:106;1010:13:78::1;:26;1002:57;;;::::0;-1:-1:-1;;;1002:57:78;;3498:2:126;1002:57:78::1;::::0;::::1;3480:21:126::0;3537:2;3517:18;;;3510:30;-1:-1:-1;;;3556:18:126;;;3549:48;3614:18;;1002:57:78::1;3296:342:126::0;1002:57:78::1;1079:10;1069:21;::::0;;;:9:::1;:21;::::0;;;;:28;;-1:-1:-1;;1069:28:78::1;1093:4;1069:28;::::0;;1107:26:::1;::::0;1125:7:::1;1107:5;:26::i;:::-;954:186::o:0;5190:286:16:-;5317:4;719:10:27;5373:38:16;5389:4;719:10:27;5404:6:16;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;-1:-1:-1;5465:4:16;;5190:286;-1:-1:-1;;;;5190:286:16:o;5871:234::-;5959:4;719:10:27;6013:64:16;719:10:27;6029:7:16;6066:10;6038:25;719:10:27;6029:7:16;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;1831:101:10:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;1321:260:78:-:0;1094:13:10;:11;:13::i;:::-;852:10:78::1;842:21;::::0;;;:9:::1;:21;::::0;;;;;::::1;;841:22;833:53;;;::::0;-1:-1:-1;;;833:53:78;;3151:2:126;833:53:78::1;::::0;::::1;3133:21:126::0;3190:2;3170:18;;;3163:30;-1:-1:-1;;;3209:18:126;;;3202:48;3267:18;;833:53:78::1;2949:342:126::0;833:53:78::1;564:13:::2;1464;3329:12:16::0;;;3242:106;1464:13:78::2;1454:23;::::0;:7;:23:::2;:::i;:::-;:37;;1446:68;;;::::0;-1:-1:-1;;;1446:68:78;;3498:2:126;1446:68:78::2;::::0;::::2;3480:21:126::0;3537:2;3517:18;;;3510:30;-1:-1:-1;;;3556:18:126;;;3549:48;3614:18;;1446:68:78::2;3296:342:126::0;1446:68:78::2;-1:-1:-1::0;;;;;1524:14:78;::::2;;::::0;;;:9:::2;:14;::::0;;;;:21;;-1:-1:-1;;1524:21:78::2;1541:4;1524:21;::::0;;1555:19:::2;1534:3:::0;1566:7;1555:5:::2;:19::i;:::-;1321:260:::0;;:::o;2365:102:16:-;2421:13;2453:7;2446:14;;;;;:::i;6592:427::-;6685:4;719:10:27;6685:4:16;6766:25;719:10:27;6783:7:16;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;-1:-1:-1;;;6801:85:16;;4072:2:126;6801:85:16;;;4054:21:126;4111:2;4091:18;;;4084:30;4150:34;4130:18;;;4123:62;-1:-1:-1;;;4201:18:126;;;4194:35;4246:19;;6801:85:16;3870:401:126;6801:85:16;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;3727:189::-;3806:4;719:10:27;3860:28:16;719:10:27;3877:2:16;3881:6;3860:9;:28::i;3974:149::-;-1:-1:-1;;;;;4089:18:16;;;4063:7;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3974:149::o;2081:198:10:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:10;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:10;;4478:2:126;2161:73:10::1;::::0;::::1;4460:21:126::0;4517:2;4497:18;;;4490:30;4556:34;4536:18;;;4529:62;-1:-1:-1;;;4607:18:126;;;4600:36;4653:19;;2161:73:10::1;4276:402:126::0;2161:73:10::1;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;10504:370:16:-;-1:-1:-1;;;;;10635:19:16;;10627:68;;;;-1:-1:-1;;;10627:68:16;;4885:2:126;10627:68:16;;;4867:21:126;4924:2;4904:18;;;4897:30;4963:34;4943:18;;;4936:62;-1:-1:-1;;;5014:18:126;;;5007:34;5058:19;;10627:68:16;4683:400:126;10627:68:16;-1:-1:-1;;;;;10713:21:16;;10705:68;;;;-1:-1:-1;;;10705:68:16;;5290:2:126;10705:68:16;;;5272:21:126;5329:2;5309:18;;;5302:30;5368:34;5348:18;;;5341:62;-1:-1:-1;;;5419:18:126;;;5412:32;5461:19;;10705:68:16;5088:398:126;10705:68:16;-1:-1:-1;;;;;10784:18:16;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10835:32;;160:25:126;;;10835:32:16;;133:18:126;10835:32:16;;;;;;;10504:370;;;:::o;8567:535::-;-1:-1:-1;;;;;8650:21:16;;8642:65;;;;-1:-1:-1;;;8642:65:16;;5693:2:126;8642:65:16;;;5675:21:126;5732:2;5712:18;;;5705:30;5771:33;5751:18;;;5744:61;5822:18;;8642:65:16;5491:355:126;8642:65:16;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8946:18:16;;:9;:18;;;;;;;;;;;:28;;;;;;8999:37;160:25:126;;;8999:37:16;;133:18:126;8999:37:16;;;;;;;1321:260:78;;:::o;11155:441:16:-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;-1:-1:-1;;11351:16:16;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;-1:-1:-1;;;11404:68:16;;6053:2:126;11404:68:16;;;6035:21:126;6092:2;6072:18;;;6065:30;6131:31;6111:18;;;6104:59;6180:18;;11404:68:16;5851:353:126;11404:68:16;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11275:321;11155:441;;;:::o;7473:818::-;-1:-1:-1;;;;;7599:18:16;;7591:68;;;;-1:-1:-1;;;7591:68:16;;6411:2:126;7591:68:16;;;6393:21:126;6450:2;6430:18;;;6423:30;6489:34;6469:18;;;6462:62;-1:-1:-1;;;6540:18:126;;;6533:35;6585:19;;7591:68:16;6209:401:126;7591:68:16;-1:-1:-1;;;;;7677:16:16;;7669:64;;;;-1:-1:-1;;;7669:64:16;;6817:2:126;7669:64:16;;;6799:21:126;6856:2;6836:18;;;6829:30;6895:34;6875:18;;;6868:62;-1:-1:-1;;;6946:18:126;;;6939:33;6989:19;;7669:64:16;6615:399:126;7669:64:16;-1:-1:-1;;;;;7815:15:16;;7793:19;7815:15;;;;;;;;;;;7848:21;;;;7840:72;;;;-1:-1:-1;;;7840:72:16;;7221:2:126;7840:72:16;;;7203:21:126;7260:2;7240:18;;;7233:30;7299:34;7279:18;;;7272:62;-1:-1:-1;;;7350:18:126;;;7343:36;7396:19;;7840:72:16;7019:402:126;7840:72:16;-1:-1:-1;;;;;7946:15:16;;;:9;:15;;;;;;;;;;;7964:20;;;7946:38;;8161:13;;;;;;;;;;:23;;;;;;8210:26;;160:25:126;;;8161:13:16;;8210:26;;133:18:126;8210:26:16;;;;;;;8247:37;12180:121;1359:130:10;1273:6;;-1:-1:-1;;;;;1273:6:10;719:10:27;1422:23:10;1414:68;;;;-1:-1:-1;;;1414:68:10;;7628:2:126;1414:68:10;;;7610:21:126;;;7647:18;;;7640:30;7706:34;7686:18;;;7679:62;7758:18;;1414:68:10;7426:356:126;2433:187:10;2525:6;;;-1:-1:-1;;;;;2541:17:10;;;-1:-1:-1;;;;;;2541:17:10;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;196:548:126:-;308:4;337:2;366;355:9;348:21;398:6;392:13;441:6;436:2;425:9;421:18;414:34;466:1;476:140;490:6;487:1;484:13;476:140;;;585:14;;;581:23;;575:30;551:17;;;570:2;547:26;540:66;505:10;;476:140;;;480:3;665:1;660:2;651:6;640:9;636:22;632:31;625:42;735:2;728;724:7;719:2;711:6;707:15;703:29;692:9;688:45;684:54;676:62;;;;196:548;;;;:::o;749:173::-;817:20;;-1:-1:-1;;;;;866:31:126;;856:42;;846:70;;912:1;909;902:12;846:70;749:173;;;:::o;927:254::-;995:6;1003;1056:2;1044:9;1035:7;1031:23;1027:32;1024:52;;;1072:1;1069;1062:12;1024:52;1095:29;1114:9;1095:29;:::i;:::-;1085:39;1171:2;1156:18;;;;1143:32;;-1:-1:-1;;;927:254:126:o;1378:328::-;1455:6;1463;1471;1524:2;1512:9;1503:7;1499:23;1495:32;1492:52;;;1540:1;1537;1530:12;1492:52;1563:29;1582:9;1563:29;:::i;:::-;1553:39;;1611:38;1645:2;1634:9;1630:18;1611:38;:::i;:::-;1601:48;;1696:2;1685:9;1681:18;1668:32;1658:42;;1378:328;;;;;:::o;1900:186::-;1959:6;2012:2;2000:9;1991:7;1987:23;1983:32;1980:52;;;2028:1;2025;2018:12;1980:52;2051:29;2070:9;2051:29;:::i;:::-;2041:39;1900:186;-1:-1:-1;;;1900:186:126:o;2299:260::-;2367:6;2375;2428:2;2416:9;2407:7;2403:23;2399:32;2396:52;;;2444:1;2441;2434:12;2396:52;2467:29;2486:9;2467:29;:::i;:::-;2457:39;;2515:38;2549:2;2538:9;2534:18;2515:38;:::i;:::-;2505:48;;2299:260;;;;;:::o;2564:380::-;2643:1;2639:12;;;;2686;;;2707:61;;2761:4;2753:6;2749:17;2739:27;;2707:61;2814:2;2806:6;2803:14;2783:18;2780:38;2777:161;;2860:10;2855:3;2851:20;2848:1;2841:31;2895:4;2892:1;2885:15;2923:4;2920:1;2913:15;2777:161;;2564:380;;;:::o;3643:222::-;3708:9;;;3729:10;;;3726:133;;;3781:10;3776:3;3772:20;3769:1;3762:31;3816:4;3813:1;3806:15;3844:4;3841:1;3834:15",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "count()": "06661abd",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "increaseAllowance(address,uint256)": "39509351",
    "mint()": "1249c58b",
    "name()": "06fdde03",
    "owner()": "8da5cb5b",
    "priviledgedMint(address,uint256)": "7ed9782a",
    "renounceOwnership()": "715018a6",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd",
    "transferOwnership(address)": "f2fde38b"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"priviledgedMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the implementation of the CarToken contract\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Car Company Contract Constructor.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint()\":{\"details\":\"Mint new tokens\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"priviledgedMint(address,uint256)\":{\"details\":\"Allows only the owner to mint new tokens\",\"params\":{\"_amount\":\"The amount of tokens to mint to address\",\"_to\":\"Address to mint tokens to\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"CarToken contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"There is a capped supply of 210,000 tokens.         10,000 tokens is reserved for the public         A user can only mint once\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ethernautDao/level3/CarToken.sol\":\"CarToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x3270d2a7a042dda9cf85dddd16e6106c2c9ad784c0972315630b2a148215fa7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b394e20d57877a825c24c1841e219d6ab1e41decec060ea935422ac9b7a25f8a\",\"dweb:/ipfs/QmVTaGCMR4Gi9w1LUVVcjEJHrHF2qcr1avFkLtsLD6sEAr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"src/ethernautDao/level3/CarToken.sol\":{\"keccak256\":\"0xceddb5c0ba4623de84b00b930f9c0de7f3a9a817aad8f0d5a12a30146f3d2363\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://aceadf3ec787e2246f4726cfd834c789a12b9a08cf2c5554869a0a831ecd2b70\",\"dweb:/ipfs/QmUUP8nCLiGH6ME4rGgTMWXv5qj94TEGpYeDj2MfJJ7E76\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "count",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mint"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "priviledgedMint"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "constructor": {
            "details": "Car Company Contract Constructor."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "mint()": {
            "details": "Mint new tokens"
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "priviledgedMint(address,uint256)": {
            "details": "Allows only the owner to mint new tokens",
            "params": {
              "_amount": "The amount of tokens to mint to address",
              "_to": "Address to mint tokens to"
            }
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/src/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        ":solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/ethernautDao/level3/CarToken.sol": "CarToken"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
        "urls": [
          "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
          "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        "keccak256": "0x3270d2a7a042dda9cf85dddd16e6106c2c9ad784c0972315630b2a148215fa7d",
        "urls": [
          "bzz-raw://b394e20d57877a825c24c1841e219d6ab1e41decec060ea935422ac9b7a25f8a",
          "dweb:/ipfs/QmVTaGCMR4Gi9w1LUVVcjEJHrHF2qcr1avFkLtsLD6sEAr"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
        "urls": [
          "bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
          "dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "src/ethernautDao/level3/CarToken.sol": {
        "keccak256": "0xceddb5c0ba4623de84b00b930f9c0de7f3a9a817aad8f0d5a12a30146f3d2363",
        "urls": [
          "bzz-raw://aceadf3ec787e2246f4726cfd834c789a12b9a08cf2c5554869a0a831ecd2b70",
          "dweb:/ipfs/QmUUP8nCLiGH6ME4rGgTMWXv5qj94TEGpYeDj2MfJJ7E76"
        ],
        "license": "GPL-3.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/ethernautDao/level3/CarToken.sol",
    "id": 43761,
    "exportedSymbols": {
      "CarToken": [
        43760
      ],
      "Context": [
        34671
      ],
      "ERC20": [
        32858
      ],
      "IERC20": [
        32936
      ],
      "IERC20Metadata": [
        33005
      ],
      "Ownable": [
        31792
      ]
    },
    "nodeType": "SourceUnit",
    "src": "37:1547:78",
    "nodes": [
      {
        "id": 43656,
        "nodeType": "PragmaDirective",
        "src": "37:31:78",
        "nodes": [],
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".0",
          "<",
          "0.9",
          ".0"
        ]
      },
      {
        "id": 43657,
        "nodeType": "ImportDirective",
        "src": "70:55:78",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 43761,
        "sourceUnit": 32859,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 43658,
        "nodeType": "ImportDirective",
        "src": "126:52:78",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 43761,
        "sourceUnit": 31793,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 43760,
        "nodeType": "ContractDefinition",
        "src": "420:1163:78",
        "nodes": [
          {
            "id": 43667,
            "nodeType": "VariableDeclaration",
            "src": "486:34:78",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "hasMinted",
            "nameLocation": "511:9:78",
            "scope": 43760,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 43666,
              "keyType": {
                "id": 43664,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "494:7:78",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "486:24:78",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 43665,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "505:4:78",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 43672,
            "nodeType": "VariableDeclaration",
            "src": "526:51:78",
            "nodes": [],
            "constant": true,
            "mutability": "constant",
            "name": "MAX_SUPPLY",
            "nameLocation": "551:10:78",
            "scope": 43760,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 43668,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "526:7:78",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "commonType": {
                "typeIdentifier": "t_rational_210000000000000000000000_by_1",
                "typeString": "int_const 210000000000000000000000"
              },
              "id": 43671,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "hexValue": "323130303030",
                "id": 43669,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "564:6:78",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_210000_by_1",
                  "typeString": "int_const 210000"
                },
                "value": "210000"
              },
              "nodeType": "BinaryOperation",
              "operator": "*",
              "rightExpression": {
                "hexValue": "31653138",
                "id": 43670,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "573:4:78",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_1000000000000000000_by_1",
                  "typeString": "int_const 1000000000000000000"
                },
                "value": "1e18"
              },
              "src": "564:13:78",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_210000000000000000000000_by_1",
                "typeString": "int_const 210000000000000000000000"
              }
            },
            "visibility": "private"
          },
          {
            "id": 43674,
            "nodeType": "VariableDeclaration",
            "src": "583:20:78",
            "nodes": [],
            "constant": false,
            "functionSelector": "06661abd",
            "mutability": "mutable",
            "name": "count",
            "nameLocation": "598:5:78",
            "scope": 43760,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 43673,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "583:7:78",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "id": 43683,
            "nodeType": "FunctionDefinition",
            "src": "672:44:78",
            "nodes": [],
            "body": {
              "id": 43682,
              "nodeType": "Block",
              "src": "714:2:78",
              "nodes": [],
              "statements": []
            },
            "documentation": {
              "id": 43675,
              "nodeType": "StructuredDocumentation",
              "src": "610:57:78",
              "text": " @dev Car Company Contract Constructor."
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "43617220436f6d70616e79",
                    "id": 43678,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "692:13:78",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_06500957b4c9ecd61549b8de213553d617671f4e09a7909f431577a2edc66d80",
                      "typeString": "literal_string \"Car Company\""
                    },
                    "value": "Car Company"
                  },
                  {
                    "hexValue": "434359",
                    "id": 43679,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "707:5:78",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_a35d291363c18c1df9c0dc2a16142ee29ef5249b37009921a00d4676d9dbe5fb",
                      "typeString": "literal_string \"CCY\""
                    },
                    "value": "CCY"
                  }
                ],
                "id": 43680,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 43677,
                  "name": "ERC20",
                  "nameLocations": [
                    "686:5:78"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 32858,
                  "src": "686:5:78"
                },
                "nodeType": "ModifierInvocation",
                "src": "686:27:78"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 43676,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "683:2:78"
            },
            "returnParameters": {
              "id": 43681,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "714:0:78"
            },
            "scope": 43760,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 43697,
            "nodeType": "ModifierDefinition",
            "src": "799:105:78",
            "nodes": [],
            "body": {
              "id": 43696,
              "nodeType": "Block",
              "src": "823:81:78",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 43691,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "841:22:78",
                        "subExpression": {
                          "baseExpression": {
                            "id": 43687,
                            "name": "hasMinted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 43667,
                            "src": "842:9:78",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 43690,
                          "indexExpression": {
                            "expression": {
                              "id": 43688,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "852:3:78",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 43689,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "856:6:78",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "852:10:78",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "842:21:78",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "43616e206f6e6c79206d696e74206f6e6365",
                        "id": 43692,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "865:20:78",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b99f9362fbe46018ec813b3c5b6aa88dec8d9ea8852a9e890dd30dac0698d88f",
                          "typeString": "literal_string \"Can only mint once\""
                        },
                        "value": "Can only mint once"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b99f9362fbe46018ec813b3c5b6aa88dec8d9ea8852a9e890dd30dac0698d88f",
                          "typeString": "literal_string \"Can only mint once\""
                        }
                      ],
                      "id": 43686,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "833:7:78",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 43693,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "833:53:78",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 43694,
                  "nodeType": "ExpressionStatement",
                  "src": "833:53:78"
                },
                {
                  "id": 43695,
                  "nodeType": "PlaceholderStatement",
                  "src": "896:1:78"
                }
              ]
            },
            "documentation": {
              "id": 43684,
              "nodeType": "StructuredDocumentation",
              "src": "722:72:78",
              "text": " @dev Checks to see if the user has minted previously."
            },
            "name": "hasNotMinted",
            "nameLocation": "808:12:78",
            "parameters": {
              "id": 43685,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "820:2:78"
            },
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 43725,
            "nodeType": "FunctionDefinition",
            "src": "954:186:78",
            "nodes": [],
            "body": {
              "id": 43724,
              "nodeType": "Block",
              "src": "992:148:78",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 43707,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 43704,
                            "name": "totalSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 32356,
                            "src": "1010:11:78",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 43705,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1010:13:78",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "id": 43706,
                          "name": "MAX_SUPPLY",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 43672,
                          "src": "1026:10:78",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1010:26:78",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4d617820537570706c792052656163686564",
                        "id": 43708,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1038:20:78",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_da53c27c134c4e751b825118fbb9146006c837cfbdb09ac4a33ae1140146eb79",
                          "typeString": "literal_string \"Max Supply Reached\""
                        },
                        "value": "Max Supply Reached"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_da53c27c134c4e751b825118fbb9146006c837cfbdb09ac4a33ae1140146eb79",
                          "typeString": "literal_string \"Max Supply Reached\""
                        }
                      ],
                      "id": 43703,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1002:7:78",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 43709,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1002:57:78",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 43710,
                  "nodeType": "ExpressionStatement",
                  "src": "1002:57:78"
                },
                {
                  "expression": {
                    "id": 43716,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 43711,
                        "name": "hasMinted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43667,
                        "src": "1069:9:78",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 43714,
                      "indexExpression": {
                        "expression": {
                          "id": 43712,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1079:3:78",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 43713,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1083:6:78",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1079:10:78",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1069:21:78",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 43715,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1093:4:78",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1069:28:78",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 43717,
                  "nodeType": "ExpressionStatement",
                  "src": "1069:28:78"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 43719,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1113:3:78",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 43720,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1117:6:78",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1113:10:78",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "31",
                        "id": 43721,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1125:7:78",
                        "subdenomination": "ether",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        },
                        "value": "1"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        }
                      ],
                      "id": 43718,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32675,
                      "src": "1107:5:78",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 43722,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1107:26:78",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 43723,
                  "nodeType": "ExpressionStatement",
                  "src": "1107:26:78"
                }
              ]
            },
            "documentation": {
              "id": 43698,
              "nodeType": "StructuredDocumentation",
              "src": "910:39:78",
              "text": " @dev Mint new tokens"
            },
            "functionSelector": "1249c58b",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 43701,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 43700,
                  "name": "hasNotMinted",
                  "nameLocations": [
                    "979:12:78"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 43697,
                  "src": "979:12:78"
                },
                "nodeType": "ModifierInvocation",
                "src": "979:12:78"
              }
            ],
            "name": "mint",
            "nameLocation": "963:4:78",
            "parameters": {
              "id": 43699,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "967:2:78"
            },
            "returnParameters": {
              "id": 43702,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "992:0:78"
            },
            "scope": 43760,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 43759,
            "nodeType": "FunctionDefinition",
            "src": "1321:260:78",
            "nodes": [],
            "body": {
              "id": 43758,
              "nodeType": "Block",
              "src": "1436:145:78",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 43743,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 43741,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 43738,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 43730,
                            "src": "1454:7:78",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 43739,
                              "name": "totalSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 32356,
                              "src": "1464:11:78",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                "typeString": "function () view returns (uint256)"
                              }
                            },
                            "id": 43740,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1464:13:78",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1454:23:78",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "id": 43742,
                          "name": "MAX_SUPPLY",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 43672,
                          "src": "1481:10:78",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1454:37:78",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4d617820537570706c792052656163686564",
                        "id": 43744,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1493:20:78",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_da53c27c134c4e751b825118fbb9146006c837cfbdb09ac4a33ae1140146eb79",
                          "typeString": "literal_string \"Max Supply Reached\""
                        },
                        "value": "Max Supply Reached"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_da53c27c134c4e751b825118fbb9146006c837cfbdb09ac4a33ae1140146eb79",
                          "typeString": "literal_string \"Max Supply Reached\""
                        }
                      ],
                      "id": 43737,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1446:7:78",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 43745,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1446:68:78",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 43746,
                  "nodeType": "ExpressionStatement",
                  "src": "1446:68:78"
                },
                {
                  "expression": {
                    "id": 43751,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 43747,
                        "name": "hasMinted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43667,
                        "src": "1524:9:78",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 43749,
                      "indexExpression": {
                        "id": 43748,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43728,
                        "src": "1534:3:78",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1524:14:78",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 43750,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1541:4:78",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1524:21:78",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 43752,
                  "nodeType": "ExpressionStatement",
                  "src": "1524:21:78"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 43754,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43728,
                        "src": "1561:3:78",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 43755,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43730,
                        "src": "1566:7:78",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 43753,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32675,
                      "src": "1555:5:78",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 43756,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1555:19:78",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 43757,
                  "nodeType": "ExpressionStatement",
                  "src": "1555:19:78"
                }
              ]
            },
            "documentation": {
              "id": 43726,
              "nodeType": "StructuredDocumentation",
              "src": "1146:170:78",
              "text": " @dev Allows only the owner to mint new tokens\n @param _to Address to mint tokens to\n @param _amount The amount of tokens to mint to address"
            },
            "functionSelector": "7ed9782a",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 43733,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 43732,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "1401:9:78"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 31711,
                  "src": "1401:9:78"
                },
                "nodeType": "ModifierInvocation",
                "src": "1401:9:78"
              },
              {
                "id": 43735,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 43734,
                  "name": "hasNotMinted",
                  "nameLocations": [
                    "1419:12:78"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 43697,
                  "src": "1419:12:78"
                },
                "nodeType": "ModifierInvocation",
                "src": "1419:12:78"
              }
            ],
            "name": "priviledgedMint",
            "nameLocation": "1330:15:78",
            "parameters": {
              "id": 43731,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 43728,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "1354:3:78",
                  "nodeType": "VariableDeclaration",
                  "scope": 43759,
                  "src": "1346:11:78",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 43727,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1346:7:78",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43730,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "1367:7:78",
                  "nodeType": "VariableDeclaration",
                  "scope": 43759,
                  "src": "1359:15:78",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 43729,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1359:7:78",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1345:30:78"
            },
            "returnParameters": {
              "id": 43736,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1436:0:78"
            },
            "scope": 43760,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 43660,
              "name": "ERC20",
              "nameLocations": [
                "441:5:78"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 32858,
              "src": "441:5:78"
            },
            "id": 43661,
            "nodeType": "InheritanceSpecifier",
            "src": "441:5:78"
          },
          {
            "baseName": {
              "id": 43662,
              "name": "Ownable",
              "nameLocations": [
                "448:7:78"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 31792,
              "src": "448:7:78"
            },
            "id": 43663,
            "nodeType": "InheritanceSpecifier",
            "src": "448:7:78"
          }
        ],
        "canonicalName": "CarToken",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 43659,
          "nodeType": "StructuredDocumentation",
          "src": "180:239:78",
          "text": " @title CarToken contract\n @dev This is the implementation of the CarToken contract\n @notice There is a capped supply of 210,000 tokens.\n         10,000 tokens is reserved for the public\n         A user can only mint once"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          43760,
          31792,
          32858,
          33005,
          32936,
          34671
        ],
        "name": "CarToken",
        "nameLocation": "429:8:78",
        "scope": 43761,
        "usedErrors": []
      }
    ],
    "license": "GPL-3.0"
  },
  "id": 78
}