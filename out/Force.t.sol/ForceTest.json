{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "log_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "log_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "log_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "name": "log_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "log_named_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "val",
          "type": "bytes"
        }
      ],
      "name": "log_named_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "val",
          "type": "bytes32"
        }
      ],
      "name": "log_named_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        }
      ],
      "name": "log_named_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "val",
          "type": "string"
        }
      ],
      "name": "log_named_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "log_named_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "log_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "logs",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IS_SCRIPT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IS_TEST",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attack",
      "outputs": [
        {
          "internalType": "contract Attack",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "force",
      "outputs": [
        {
          "internalType": "contract Force",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testAttack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vm",
      "outputs": [
        {
          "internalType": "contract Vm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610885806100316000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a79f26dc1161005b578063a79f26dc146100ea578063ba414fa6146100fd578063f8ccbf4714610115578063fa7626d41461012857600080fd5b80630a9254e41461008d5780633a768463146100975780636f2db99c146100cf5780639e5faafc146100d7575b600080fd5b610095610135565b005b6100b2737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100956101d8565b6009546100b2906001600160a01b031681565b6008546100b2906001600160a01b031681565b6101056102dc565b60405190151581526020016100c6565b6000546101059062010000900460ff1681565b6000546101059060ff1681565b6040516101419061063b565b604051809103906000f08015801561015d573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216918217905560405161018990610647565b6001600160a01b039091168152602001604051809103906000f0801580156101b5573d6000803e3d6000fd5b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b60095460405163c88a5e6d60e01b81526001600160a01b039091166004820152670de0b6b3a76400006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c88a5e6d90604401600060405180830381600087803b15801561023f57600080fd5b505af1158015610253573d6000803e3d6000fd5b50505050600960009054906101000a90046001600160a01b03166001600160a01b0316639e5faafc6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102a757600080fd5b505af11580156102bb573d6000803e3d6000fd5b50506008546001600160a01b03163191506102d99050816000610407565b50565b60008054610100900460ff16156102fc5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104025760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161038a917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161068f565b60408051601f19818403018152908290526103a4916106b3565b6000604051808303816000865af19150503d80600081146103e1576040519150601f19603f3d011682016040523d82523d6000602084013e6103e6565b606091505b50915050808060200190518101906103fe91906106c6565b9150505b919050565b80821161052b577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104779060208082526021908201527f4572726f723a2061203e2062206e6f7420736174697366696564205b75696e746040820152605d60f81b606082015260800190565b60405180910390a16040805181815260098183015268202056616c7565206160b81b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1604080518181526009818301526810102b30b63ab2903160b91b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161052b61052f565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561062a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526105c9929160200161068f565b60408051601f19818403018152908290526105e3916106b3565b6000604051808303816000865af19150503d8060008114610620576040519150601f19603f3d011682016040523d82523d6000602084013e610625565b606091505b505050505b6000805461ff001916610100179055565b605c806106e983390190565b61010b8061074583390190565b6000815160005b81811015610675576020818501810151868301520161065b565b81811115610684576000828601525b509290920192915050565b6001600160e01b03198316815260006106ab6004830184610654565b949350505050565b60006106bf8284610654565b9392505050565b6000602082840312156106d857600080fd5b815180151581146106bf57600080fdfe6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212201f81d0687c860d9fd390f4cfd16a2cbcef91bc60a27fc5ab073908e3c9ad423864736f6c634300080f0033608060405234801561001057600080fd5b5060405161010b38038061010b83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6079806100926000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80639e5faafc14602d575b600080fd5b60336035565b005b6000546001600160a01b0316fffea2646970667358221220e2655f156c49b00237cbe456f20a7293e8ed0f0a48fc2e731ac50d24b3b1501064736f6c634300080f0033a26469706673582212204a5a622b65d4d4589cf006a75993344de42aa7a7e52875d482c0e0df75ab68d964736f6c634300080f0033",
    "sourceMap": "479:520:17:-:0;;;1572:26:0;;;-1:-1:-1;;170:28:1;;;;;479:520:17;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a79f26dc1161005b578063a79f26dc146100ea578063ba414fa6146100fd578063f8ccbf4714610115578063fa7626d41461012857600080fd5b80630a9254e41461008d5780633a768463146100975780636f2db99c146100cf5780639e5faafc146100d7575b600080fd5b610095610135565b005b6100b2737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100956101d8565b6009546100b2906001600160a01b031681565b6008546100b2906001600160a01b031681565b6101056102dc565b60405190151581526020016100c6565b6000546101059062010000900460ff1681565b6000546101059060ff1681565b6040516101419061063b565b604051809103906000f08015801561015d573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216918217905560405161018990610647565b6001600160a01b039091168152602001604051809103906000f0801580156101b5573d6000803e3d6000fd5b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b60095460405163c88a5e6d60e01b81526001600160a01b039091166004820152670de0b6b3a76400006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c88a5e6d90604401600060405180830381600087803b15801561023f57600080fd5b505af1158015610253573d6000803e3d6000fd5b50505050600960009054906101000a90046001600160a01b03166001600160a01b0316639e5faafc6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102a757600080fd5b505af11580156102bb573d6000803e3d6000fd5b50506008546001600160a01b03163191506102d99050816000610407565b50565b60008054610100900460ff16156102fc5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104025760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161038a917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161068f565b60408051601f19818403018152908290526103a4916106b3565b6000604051808303816000865af19150503d80600081146103e1576040519150601f19603f3d011682016040523d82523d6000602084013e6103e6565b606091505b50915050808060200190518101906103fe91906106c6565b9150505b919050565b80821161052b577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104779060208082526021908201527f4572726f723a2061203e2062206e6f7420736174697366696564205b75696e746040820152605d60f81b606082015260800190565b60405180910390a16040805181815260098183015268202056616c7565206160b81b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1604080518181526009818301526810102b30b63ab2903160b91b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161052b61052f565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561062a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526105c9929160200161068f565b60408051601f19818403018152908290526105e3916106b3565b6000604051808303816000865af19150503d8060008114610620576040519150601f19603f3d011682016040523d82523d6000602084013e610625565b606091505b505050505b6000805461ff001916610100179055565b605c806106e983390190565b61010b8061074583390190565b6000815160005b81811015610675576020818501810151868301520161065b565b81811115610684576000828601525b509290920192915050565b6001600160e01b03198316815260006106ab6004830184610654565b949350505050565b60006106bf8284610654565b9392505050565b6000602082840312156106d857600080fd5b815180151581146106bf57600080fdfe6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212201f81d0687c860d9fd390f4cfd16a2cbcef91bc60a27fc5ab073908e3c9ad423864736f6c634300080f0033608060405234801561001057600080fd5b5060405161010b38038061010b83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6079806100926000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80639e5faafc14602d575b600080fd5b60336035565b005b6000546001600160a01b0316fffea2646970667358221220e2655f156c49b00237cbe456f20a7293e8ed0f0a48fc2e731ac50d24b3b1501064736f6c634300080f0033a26469706673582212204a5a622b65d4d4589cf006a75993344de42aa7a7e52875d482c0e0df75ab68d964736f6c634300080f0033",
    "sourceMap": "479:520:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;563:105;;;:::i;:::-;;321:38:1;;250:64;321:38;;;;;-1:-1:-1;;;;;189:32:20;;;171:51;;159:2;144:18;321:38:1;;;;;;;;674:323:17;;;:::i;536:20::-;;;;;-1:-1:-1;;;;;536:20:17;;;512:18;;;;;-1:-1:-1;;;;;512:18:17;;;1819:584:0;;;:::i;:::-;;;845:14:20;;838:22;820:41;;808:2;793:18;1819:584:0;680:187:20;170:28:1;;;;;;;;;;;;1572:26:0;;;;;;;;;563:105:17;605:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;597:5:17;:19;;-1:-1:-1;;;;;;597:19:17;-1:-1:-1;;;;;597:19:17;;;;;;;;;635:26;;;;;:::i;:::-;-1:-1:-1;;;;;189:32:20;;;171:51;;159:2;144:18;635:26:17;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;626:6:17;:35;;-1:-1:-1;;;;;;626:35:17;-1:-1:-1;;;;;626:35:17;;;;;;;;;;563:105::o;674:323::-;779:6;;763:33;;-1:-1:-1;;;763:33:17;;-1:-1:-1;;;;;779:6:17;;;763:33;;;1280:51:20;788:7:17;1347:18:20;;;1340:34;250:64:1;;763:7:17;;1253:18:20;;763:33:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;847:6;;;;;;;;;-1:-1:-1;;;;;847:6:17;-1:-1:-1;;;;;847:13:17;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;941:5:17;;-1:-1:-1;;;;;941:5:17;933:22;;-1:-1:-1;965:25:17;;-1:-1:-1;933:22:17;910:20;965:8;:25::i;:::-;703:294;674:323::o;1819:584:0:-;1853:4;1873:7;;;;;;;1869:528;;;-1:-1:-1;1903:7:0;;;;;;;;1819:584::o;1869:528::-;1941:17;2990:42;2978:55;3059:16;1980:374;;2196:43;;;1671:64;2196:43;;;1280:51:20;;;-1:-1:-1;;;1347:18:20;;;1340:34;2196:43:0;;;;;;;;;1253:18:20;;;2196:43:0;;;-1:-1:-1;;1671:64:0;;2086:175;;2135:34;;2086:175;;;:::i;:::-;;;;-1:-1:-1;;2086:175:0;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;2002:352;1980:374;2374:12;1819:584;-1:-1:-1;1819:584:0:o;6756:259::-;6818:1;6813;:6;6809:200;;6840:40;;;;;2966:2:20;2948:21;;;3005:2;2985:18;;;2978:30;3044:34;3039:2;3024:18;;3017:62;-1:-1:-1;;;3110:2:20;3095:18;;3088:31;3151:3;3136:19;;2764:397;6840:40:0;;;;;;;;6899:30;;;3378:21:20;;;3435:1;3415:18;;;3408:29;-1:-1:-1;;;3468:2:20;3453:18;;3446:39;3552:4;3537:20;;3530:36;;;6899:30:0;;;;;;;3517:3:20;6899:30:0;;;6948;;;3789:21:20;;;3846:1;3826:18;;;3819:29;-1:-1:-1;;;3879:2:20;3864:18;;3857:39;3963:4;3948:20;;3941:36;;;6948:30:0;;;;;;;3928:3:20;6948:30:0;;;6992:6;:4;:6::i;:::-;6756:259;;:::o;2410:424::-;2990:42;2978:55;3059:16;2445:359;;2645:67;;;1671:64;2645:67;;;4190:51:20;;;-1:-1:-1;;;4257:18:20;;;4250:34;;;;2705:4:0;4300:18:20;;;4293:34;2482:11:0;;1671:64;2579:43;;4163:18:20;;2645:67:0;;;-1:-1:-1;;2645:67:0;;;;;;;;;;2534:196;;;2645:67;2534:196;;:::i;:::-;;;;-1:-1:-1;;2534:196:0;;;;;;;;;;2499:245;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2445:359:0;2813:7;:14;;-1:-1:-1;;2813:14:0;;;;;2410:424::o;-1:-1:-1:-;;;;;;;;:::o;:::-;;;;;;;;:::o;1664:336:20:-;1705:3;1743:5;1737:12;1767:1;1777:128;1791:6;1788:1;1785:13;1777:128;;;1888:4;1873:13;;;1869:24;;1863:31;1850:11;;;1843:52;1806:12;1777:128;;;1923:6;1920:1;1917:13;1914:48;;;1958:1;1949:6;1944:3;1940:16;1933:27;1914:48;-1:-1:-1;1978:16:20;;;;;1664:336;-1:-1:-1;;1664:336:20:o;2005:278::-;-1:-1:-1;;;;;;2190:33:20;;2178:46;;2160:3;2240:37;2274:1;2265:11;;2257:6;2240:37;:::i;:::-;2233:44;2005:278;-1:-1:-1;;;;2005:278:20:o;2288:189::-;2417:3;2442:29;2467:3;2459:6;2442:29;:::i;:::-;2435:36;2288:189;-1:-1:-1;;;2288:189:20:o;2482:277::-;2549:6;2602:2;2590:9;2581:7;2577:23;2573:32;2570:52;;;2618:1;2615;2608:12;2570:52;2650:9;2644:16;2703:5;2696:13;2689:21;2682:5;2679:32;2669:60;;2725:1;2722;2715:12",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "IS_SCRIPT()": "f8ccbf47",
    "IS_TEST()": "fa7626d4",
    "attack()": "9e5faafc",
    "failed()": "ba414fa6",
    "force()": "a79f26dc",
    "setUp()": "0a9254e4",
    "testAttack()": "6f2db99c",
    "vm()": "3a768463"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attack\",\"outputs\":[{\"internalType\":\"contract Attack\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"force\",\"outputs\":[{\"internalType\":\"contract Force\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/ethernaut/Force.t.sol\":\"ForceTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/forge-std/lib/ds-test/src/test.sol\":{\"keccak256\":\"0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5\",\"dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0x9d09c1e55cd508d3376cff9961625d51d73f8ce075ec1e9deed41408a4556e00\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8880c5551daf337ab91665a9ce593df67a9eb11b0bee820f631d324d2fdd3a8b\",\"dweb:/ipfs/QmNpvSBGnS9Jr6Swd6XKsijG59a4yjYemWCFwprjKFkpNC\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x1297a1cc393bc8163ccf143e5335536e78cb25ac24a4f6dfdb25f5746dd4827e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://945ccffad9fc09d2aa0ac200a80dcfa2f491dba8680fc9c3d3d450d891284b87\",\"dweb:/ipfs/QmYSfFb1L6LN1ZB9KWzZqxt2iAbpuFDskBcU1Bz4RiyuQ5\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x6c9cbd51234372b66bf7c146870edf0855770c46e960a8fae8f354ddf382876b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fd0ff1f449294dd1447b9d483c52d78e137d8cac518646e76df9fdd4d185d6c2\",\"dweb:/ipfs/QmS3JP4vKgvAWo8Tc7zVrGxbdR7t37ayk1mTHN3seD6UAZ\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x1a5767028a0c3985e991456fc9650055e28b01b787c56b11f66ac30498a153ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f86887212eacca450a15a8a5bf9fe83fd91a2ba623df8e9c32c75a31824c8ea2\",\"dweb:/ipfs/QmTUHBNdZwntgjbFZne7fY9ZJLNGYWaq3uWfGk6FyqdAkB\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0xbeb823fcdb356244a83aaccdf828ad019ecc1ffaa3dff18e624fc6d5714ea671\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4cbe9400340e5f9ec55e2aff3bad1c15fa3afbbe37e80800e6f3fed2ad26854f\",\"dweb:/ipfs/QmdJBABsuXkvWxVzEyGXsTE3vyfBPXDdw5xvvtUz3JeoYW\"]},\"src/ethernaut/level_7/Force.sol\":{\"keccak256\":\"0x9fbda80393d99fee138b29dca870a1cdd1dc3db4a355929c1afd34a8a2bd8040\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aa54aed09e84cac59ef40007a6b2d753473e6c60302285831a60f6caa2528ca9\",\"dweb:/ipfs/QmRnCZYu1o7TfkgikxquaY4vrcEXWHJdXnBgXafZqXTUUi\"]},\"test/ethernaut/Force.t.sol\":{\"keccak256\":\"0xef24f7e4e5c2d3ff991fbb2bce03acb4bef58ff78157165a51153e02e45e387c\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://bc9ff2f3650af7629ccac196560c23e121cd0c50907f9836f43062ea2bbf4bb9\",\"dweb:/ipfs/Qmah34ecAWDGuxJBSVJcwVLNT26jBoEhVQyEPCR55EotAu\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256",
              "name": "",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "val",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "val",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes32",
              "name": "val",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "val",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "logs",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "IS_SCRIPT",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "IS_TEST",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "attack",
          "outputs": [
            {
              "internalType": "contract Attack",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "failed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "force",
          "outputs": [
            {
              "internalType": "contract Force",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setUp"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testAttack"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "vm",
          "outputs": [
            {
              "internalType": "contract Vm",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/src/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        ":solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "test/ethernaut/Force.t.sol": "ForceTest"
      },
      "libraries": {}
    },
    "sources": {
      "lib/forge-std/lib/ds-test/src/test.sol": {
        "keccak256": "0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54",
        "urls": [
          "bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5",
          "dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/forge-std/src/Script.sol": {
        "keccak256": "0x9d09c1e55cd508d3376cff9961625d51d73f8ce075ec1e9deed41408a4556e00",
        "urls": [
          "bzz-raw://8880c5551daf337ab91665a9ce593df67a9eb11b0bee820f631d324d2fdd3a8b",
          "dweb:/ipfs/QmNpvSBGnS9Jr6Swd6XKsijG59a4yjYemWCFwprjKFkpNC"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdJson.sol": {
        "keccak256": "0x1297a1cc393bc8163ccf143e5335536e78cb25ac24a4f6dfdb25f5746dd4827e",
        "urls": [
          "bzz-raw://945ccffad9fc09d2aa0ac200a80dcfa2f491dba8680fc9c3d3d450d891284b87",
          "dweb:/ipfs/QmYSfFb1L6LN1ZB9KWzZqxt2iAbpuFDskBcU1Bz4RiyuQ5"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/Test.sol": {
        "keccak256": "0x6c9cbd51234372b66bf7c146870edf0855770c46e960a8fae8f354ddf382876b",
        "urls": [
          "bzz-raw://fd0ff1f449294dd1447b9d483c52d78e137d8cac518646e76df9fdd4d185d6c2",
          "dweb:/ipfs/QmS3JP4vKgvAWo8Tc7zVrGxbdR7t37ayk1mTHN3seD6UAZ"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/Vm.sol": {
        "keccak256": "0x1a5767028a0c3985e991456fc9650055e28b01b787c56b11f66ac30498a153ab",
        "urls": [
          "bzz-raw://f86887212eacca450a15a8a5bf9fe83fd91a2ba623df8e9c32c75a31824c8ea2",
          "dweb:/ipfs/QmTUHBNdZwntgjbFZne7fY9ZJLNGYWaq3uWfGk6FyqdAkB"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/console.sol": {
        "keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
        "urls": [
          "bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
          "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/console2.sol": {
        "keccak256": "0xbeb823fcdb356244a83aaccdf828ad019ecc1ffaa3dff18e624fc6d5714ea671",
        "urls": [
          "bzz-raw://4cbe9400340e5f9ec55e2aff3bad1c15fa3afbbe37e80800e6f3fed2ad26854f",
          "dweb:/ipfs/QmdJBABsuXkvWxVzEyGXsTE3vyfBPXDdw5xvvtUz3JeoYW"
        ],
        "license": "MIT"
      },
      "src/ethernaut/level_7/Force.sol": {
        "keccak256": "0x9fbda80393d99fee138b29dca870a1cdd1dc3db4a355929c1afd34a8a2bd8040",
        "urls": [
          "bzz-raw://aa54aed09e84cac59ef40007a6b2d753473e6c60302285831a60f6caa2528ca9",
          "dweb:/ipfs/QmRnCZYu1o7TfkgikxquaY4vrcEXWHJdXnBgXafZqXTUUi"
        ],
        "license": "MIT"
      },
      "test/ethernaut/Force.t.sol": {
        "keccak256": "0xef24f7e4e5c2d3ff991fbb2bce03acb4bef58ff78157165a51153e02e45e387c",
        "urls": [
          "bzz-raw://bc9ff2f3650af7629ccac196560c23e121cd0c50907f9836f43062ea2bbf4bb9",
          "dweb:/ipfs/Qmah34ecAWDGuxJBSVJcwVLNT26jBoEhVQyEPCR55EotAu"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "irOptimized": "/// @use-src 0:\"lib/forge-std/lib/ds-test/src/test.sol\", 1:\"lib/forge-std/src/Script.sol\", 3:\"lib/forge-std/src/Test.sol\", 17:\"test/ethernaut/Force.t.sol\"\nobject \"ForceTest_24196\" {\n    code {\n        {\n            /// @src 17:479:999  \"contract ForceTest is Test {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            sstore(/** @src 0:1594:1598  \"true\" */ 0x00, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ or(and(sload(/** @src 0:1594:1598  \"true\" */ 0x00), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ not(16711935)), 65537))\n            let _2 := datasize(\"ForceTest_24196_deployed\")\n            codecopy(_1, dataoffset(\"ForceTest_24196_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"lib/forge-std/lib/ds-test/src/test.sol\", 1:\"lib/forge-std/src/Script.sol\", 17:\"test/ethernaut/Force.t.sol\"\n    object \"ForceTest_24196_deployed\" {\n        code {\n            {\n                /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x0a9254e4 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        /// @src 17:605:616  \"new Force()\"\n                        let _5 := datasize(\"Force_24014\")\n                        let _6 := add(_1, _5)\n                        let _7 := 0xffffffffffffffff\n                        if or(gt(_6, _7), lt(_6, _1))\n                        {\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ _3, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x41)\n                            revert(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x24)\n                        }\n                        /// @src 17:605:616  \"new Force()\"\n                        datacopy(_1, dataoffset(\"Force_24014\"), _5)\n                        let expr_address := create(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ _4, /** @src 17:605:616  \"new Force()\" */ _1, sub(_6, _1))\n                        if iszero(expr_address)\n                        {\n                            /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                            let pos := mload(_2)\n                            returndatacopy(pos, _4, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        let _8 := sub(shl(160, /** @src 17:605:616  \"new Force()\" */ 1), 1)\n                        /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                        let _9 := and(expr_address, _8)\n                        let _10 := shl(160, 0xffffffffffffffffffffffff)\n                        sstore(/** @src 17:597:616  \"force = new Force()\" */ 0x08, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ or(and(sload(/** @src 17:597:616  \"force = new Force()\" */ 0x08), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _10), _9))\n                        /// @src 17:635:661  \"new Attack(address(force))\"\n                        let _11 := /** @src 17:479:999  \"contract ForceTest is Test {...\" */ mload(_2)\n                        /// @src 17:635:661  \"new Attack(address(force))\"\n                        let _12 := datasize(\"Attack_24133\")\n                        let _13 := add(_11, _12)\n                        if or(gt(_13, /** @src 17:605:616  \"new Force()\" */ _7), /** @src 17:635:661  \"new Attack(address(force))\" */ lt(_13, _11))\n                        {\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ _3, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x41)\n                            revert(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x24)\n                        }\n                        /// @src 17:635:661  \"new Attack(address(force))\"\n                        datacopy(_11, dataoffset(\"Attack_24133\"), _12)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(_13, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _9)\n                        /// @src 17:635:661  \"new Attack(address(force))\"\n                        let expr_address_1 := create(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ _4, /** @src 17:635:661  \"new Attack(address(force))\" */ _11, add(sub(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ _13, /** @src 17:635:661  \"new Attack(address(force))\" */ _11), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 32))\n                        /// @src 17:635:661  \"new Attack(address(force))\"\n                        if iszero(expr_address_1)\n                        {\n                            /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                            let pos_1 := mload(_2)\n                            returndatacopy(pos_1, _4, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        sstore(/** @src 17:626:661  \"attack = new Attack(address(force))\" */ 0x09, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ or(and(sload(/** @src 17:626:661  \"attack = new Attack(address(force))\" */ 0x09), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _10), and(expr_address_1, _8)))\n                        return(mload(_2), _4)\n                    }\n                    case 0x3a768463 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let memPos := mload(_2)\n                        mstore(memPos, 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d)\n                        return(memPos, 32)\n                    }\n                    case 0x6f2db99c {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _14 := sub(shl(160, /** @src 17:605:616  \"new Force()\" */ 1), 1)\n                        /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                        let value := and(sload(/** @src 17:779:785  \"attack\" */ 0x09), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _14)\n                        let _15 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 17:763:796  \"vm.deal(address(attack), 1 ether)\"\n                        if iszero(extcodesize(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ _15))\n                        /// @src 17:763:796  \"vm.deal(address(attack), 1 ether)\"\n                        {\n                            /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 17:763:796  \"vm.deal(address(attack), 1 ether)\"\n                        let _16 := /** @src 17:479:999  \"contract ForceTest is Test {...\" */ mload(_2)\n                        /// @src 17:763:796  \"vm.deal(address(attack), 1 ether)\"\n                        mstore(_16, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ shl(224, 0xc88a5e6d))\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(/** @src 17:763:796  \"vm.deal(address(attack), 1 ether)\" */ add(_16, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _3), value)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ add(/** @src 17:763:796  \"vm.deal(address(attack), 1 ether)\" */ _16, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 36), /** @src 17:788:795  \"1 ether\" */ 0x0de0b6b3a7640000)\n                        /// @src 17:763:796  \"vm.deal(address(attack), 1 ether)\"\n                        let _17 := call(gas(), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _15, _4, /** @src 17:763:796  \"vm.deal(address(attack), 1 ether)\" */ _16, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 68, /** @src 17:763:796  \"vm.deal(address(attack), 1 ether)\" */ _16, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _4)\n                        /// @src 17:763:796  \"vm.deal(address(attack), 1 ether)\"\n                        if iszero(_17)\n                        {\n                            /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                            let pos_2 := mload(_2)\n                            returndatacopy(pos_2, _4, returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        /// @src 17:763:796  \"vm.deal(address(attack), 1 ether)\"\n                        if _17\n                        {\n                            finalize_allocation_3726(_16)\n                            /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                            _4 := _4\n                        }\n                        let value_1 := and(sload(/** @src 17:779:785  \"attack\" */ 0x09), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _14)\n                        /// @src 17:847:862  \"attack.attack()\"\n                        if iszero(extcodesize(value_1))\n                        {\n                            /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 17:847:862  \"attack.attack()\"\n                        let _18 := /** @src 17:479:999  \"contract ForceTest is Test {...\" */ mload(_2)\n                        /// @src 17:847:862  \"attack.attack()\"\n                        mstore(_18, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ shl(226, 0x2797eabf))\n                        /// @src 17:847:862  \"attack.attack()\"\n                        let _19 := call(gas(), value_1, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _4, /** @src 17:847:862  \"attack.attack()\" */ _18, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _3, /** @src 17:847:862  \"attack.attack()\" */ _18, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _4)\n                        /// @src 17:847:862  \"attack.attack()\"\n                        if iszero(_19)\n                        {\n                            /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                            let pos_3 := mload(_2)\n                            returndatacopy(pos_3, _4, returndatasize())\n                            revert(pos_3, returndatasize())\n                        }\n                        /// @src 17:847:862  \"attack.attack()\"\n                        if _19\n                        {\n                            finalize_allocation_3726(_18)\n                            /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        /// @src 17:933:955  \"address(force).balance\"\n                        let expr := balance(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ and(sload(/** @src 17:941:946  \"force\" */ 0x08), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _14))\n                        /// @src 0:6809:7009  \"if (a <= b) {...\"\n                        if /** @src 0:6813:6819  \"a <= b\" */ iszero(expr)\n                        /// @src 0:6809:7009  \"if (a <= b) {...\"\n                        {\n                            /// @src 0:6840:6880  \"log(\\\"Error: a > b not satisfied [uint]\\\")\"\n                            let _20 := /** @src 17:479:999  \"contract ForceTest is Test {...\" */ mload(_2)\n                            let _21 := 32\n                            mstore(_20, _21)\n                            mstore(add(_20, _21), 33)\n                            mstore(add(_20, _2), \"Error: a > b not satisfied [uint\")\n                            mstore(add(_20, 96), \"]\")\n                            /// @src 0:6840:6880  \"log(\\\"Error: a > b not satisfied [uint]\\\")\"\n                            log1(_20, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 128, /** @src 0:6840:6880  \"log(\\\"Error: a > b not satisfied [uint]\\\")\" */ 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50)\n                            /// @src 0:6899:6929  \"log_named_uint(\\\"  Value a\\\", a)\"\n                            let _22 := /** @src 17:479:999  \"contract ForceTest is Test {...\" */ mload(_2)\n                            mstore(_22, _2)\n                            mstore(add(_22, _2), /** @src 17:779:785  \"attack\" */ 0x09)\n                            /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                            mstore(add(_22, 96), \"  Value a\")\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ add(_22, _21), /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ expr)\n                            /// @src 0:6899:6929  \"log_named_uint(\\\"  Value a\\\", a)\"\n                            let _23 := 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8\n                            log1(_22, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 128, /** @src 0:6899:6929  \"log_named_uint(\\\"  Value a\\\", a)\" */ _23)\n                            /// @src 0:6948:6978  \"log_named_uint(\\\"  Value b\\\", b)\"\n                            let _24 := /** @src 17:479:999  \"contract ForceTest is Test {...\" */ mload(_2)\n                            mstore(_24, _2)\n                            mstore(add(_24, _2), /** @src 17:779:785  \"attack\" */ 0x09)\n                            /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                            mstore(add(_24, 96), \"  Value b\")\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ add(_24, _21), _4)\n                            /// @src 0:6948:6978  \"log_named_uint(\\\"  Value b\\\", b)\"\n                            log1(_24, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 128, /** @src 0:6899:6929  \"log_named_uint(\\\"  Value a\\\", a)\" */ _23)\n                            /// @src 0:2445:2804  \"if (hasHEVMContext()) {...\"\n                            if /** @src 0:3059:3075  \"hevmCodeSize > 0\" */ iszero(iszero(/** @src 0:2939:3043  \"assembly {...\" */ extcodesize(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ _15)))\n                            /// @src 0:2445:2804  \"if (hasHEVMContext()) {...\"\n                            {\n                                /// @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\"\n                                let expr_mpos := /** @src 17:479:999  \"contract ForceTest is Test {...\" */ mload(_2)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                mstore(/** @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\" */ add(expr_mpos, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _21), _15)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                mstore(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ add(/** @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\" */ expr_mpos, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _2), /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(210, 0x19985a5b1959))\n                                mstore(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ add(/** @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\" */ expr_mpos, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 96), /** @src 0:2705:2709  \"0x01\" */ 0x01)\n                                /// @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\"\n                                mstore(expr_mpos, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 96)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                let newFreePtr := add(expr_mpos, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 128)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, expr_mpos))\n                                {\n                                    mstore(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ 0, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                                    mstore(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ _3, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x41)\n                                    revert(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ 0, 36)\n                                }\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                mstore(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ _2, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ newFreePtr)\n                                /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                                let _25 := add(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ expr_mpos, /** @src 0:2534:2730  \"abi.encodePacked(...\" */ 160)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                mstore(_25, shl(224, 0x70ca10bb))\n                                let length := mload(expr_mpos)\n                                let i := /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 0\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                for { }\n                                lt(i, length)\n                                {\n                                    i := add(i, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _21)\n                                }\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                {\n                                    let _26 := add(expr_mpos, i)\n                                    mstore(add(_26, 164), mload(add(_26, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _21)))\n                                }\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                if gt(i, length)\n                                {\n                                    mstore(add(add(expr_mpos, length), 164), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 0)\n                                }\n                                /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                                let _27 := sub(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ add(expr_mpos, length), expr_mpos)\n                                /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                                mstore(newFreePtr, add(_27, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _3))\n                                /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                                finalize_allocation(newFreePtr, add(_27, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 36))\n                                /// @src 0:2499:2744  \"HEVM_ADDRESS.call(...\"\n                                pop(call(gas(), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _15, _4, /** @src 0:2499:2744  \"HEVM_ADDRESS.call(...\" */ _25, mload(newFreePtr), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ _4, _4))\n                                /// @src 0:2499:2744  \"HEVM_ADDRESS.call(...\"\n                                pop(extract_returndata())\n                            }\n                            /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                            sstore(_4, or(and(sload(_4), not(65280)), 256))\n                        }\n                        return(mload(_2), _4)\n                    }\n                    case 0x9e5faafc {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_2 := and(sload(/** @src 17:536:556  \"Attack public attack\" */ 9), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ sub(shl(160, /** @src 17:605:616  \"new Force()\" */ 1), 1))\n                        /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, value_2)\n                        return(memPos_1, 32)\n                    }\n                    case 0xa79f26dc {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_3 := and(sload(/** @src 17:512:530  \"Force public force\" */ 8), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ sub(shl(160, /** @src 17:605:616  \"new Force()\" */ 1), 1))\n                        /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, value_3)\n                        return(memPos_2, 32)\n                    }\n                    case 0xba414fa6 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let ret := fun_failed()\n                        let memPos_3 := mload(_2)\n                        mstore(memPos_3, iszero(iszero(ret)))\n                        return(memPos_3, 32)\n                    }\n                    case 0xf8ccbf47 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_4 := and(shr(16, sload(_4)), 0xff)\n                        let memPos_4 := mload(_2)\n                        mstore(memPos_4, iszero(iszero(value_4)))\n                        return(memPos_4, 32)\n                    }\n                    case 0xfa7626d4 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_5 := and(sload(_4), 0xff)\n                        let memPos_5 := mload(_2)\n                        mstore(memPos_5, iszero(iszero(value_5)))\n                        return(memPos_5, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n            function finalize_allocation_3726(memPtr)\n            {\n                if gt(memPtr, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, memPtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _1 := returndatasize()\n                    if gt(_1, 0xffffffffffffffff)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x24)\n                    }\n                    let memPtr := /** @src 17:479:999  \"contract ForceTest is Test {...\" */ mload(64)\n                    /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                    finalize_allocation(memPtr, add(and(add(_1, 31), not(31)), 0x20))\n                    mstore(memPtr, _1)\n                    data := memPtr\n                    returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ returndatasize())\n                }\n            }\n            /// @ast-id 172 @src 0:1819:2403  \"function failed() public returns (bool) {...\"\n            function fun_failed() -> var\n            {\n                /// @src 0:1873:1880  \"_failed\"\n                let _1 := 0x00\n                /// @src 0:1869:2397  \"if (_failed) {...\"\n                switch /** @src 17:479:999  \"contract ForceTest is Test {...\" */ and(shr(8, sload(/** @src 0:1873:1880  \"_failed\" */ _1)), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 0xff)\n                case /** @src 0:1869:2397  \"if (_failed) {...\" */ 0 {\n                    /// @src 0:1941:1966  \"bool globalFailed = false\"\n                    let var_globalFailed := /** @src 0:1873:1880  \"_failed\" */ _1\n                    /// @src 0:2939:3043  \"assembly {...\"\n                    let _2 := 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D\n                    /// @src 0:1980:2354  \"if (hasHEVMContext()) {...\"\n                    if /** @src 0:3059:3075  \"hevmCodeSize > 0\" */ iszero(iszero(/** @src 0:2939:3043  \"assembly {...\" */ extcodesize(_2)))\n                    /// @src 0:1980:2354  \"if (hasHEVMContext()) {...\"\n                    {\n                        /// @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\"\n                        let expr_mpos := /** @src 17:479:999  \"contract ForceTest is Test {...\" */ mload(64)\n                        /// @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\"\n                        let _3 := 0x20\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(/** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ add(expr_mpos, _3), /** @src 0:2939:3043  \"assembly {...\" */ _2)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(add(/** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ expr_mpos, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 64), /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(210, 0x19985a5b1959))\n                        /// @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\"\n                        mstore(expr_mpos, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 64)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        let newFreePtr := add(expr_mpos, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 96)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, expr_mpos))\n                        {\n                            mstore(/** @src 0:1873:1880  \"_failed\" */ _1, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(/** @src 0:1873:1880  \"_failed\" */ _1, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x24)\n                        }\n                        mstore(/** @src 17:479:999  \"contract ForceTest is Test {...\" */ 64, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ newFreePtr)\n                        /// @src 0:2086:2261  \"abi.encodePacked(...\"\n                        let _4 := add(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ expr_mpos, /** @src 0:2086:2261  \"abi.encodePacked(...\" */ 128)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(_4, shl(228, 0x0667f9d7))\n                        let length := mload(expr_mpos)\n                        let i := /** @src 0:1873:1880  \"_failed\" */ _1\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        for { }\n                        lt(i, length)\n                        {\n                            i := add(i, /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3)\n                        }\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        {\n                            let _5 := add(expr_mpos, i)\n                            mstore(add(_5, 132), mload(add(_5, /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3)))\n                        }\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if gt(i, length)\n                        {\n                            mstore(add(add(expr_mpos, length), 132), /** @src 0:1873:1880  \"_failed\" */ _1)\n                        }\n                        /// @src 0:2086:2261  \"abi.encodePacked(...\"\n                        let _6 := sub(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ add(expr_mpos, length), expr_mpos)\n                        /// @src 0:2086:2261  \"abi.encodePacked(...\"\n                        mstore(newFreePtr, add(_6, 4))\n                        finalize_allocation(newFreePtr, add(_6, 36))\n                        /// @src 0:2047:2279  \"HEVM_ADDRESS.call(...\"\n                        pop(call(gas(), /** @src 0:2939:3043  \"assembly {...\" */ _2, /** @src 0:1873:1880  \"_failed\" */ _1, /** @src 0:2047:2279  \"HEVM_ADDRESS.call(...\" */ _4, mload(newFreePtr), /** @src 0:1873:1880  \"_failed\" */ _1, _1))\n                        /// @src 0:2047:2279  \"HEVM_ADDRESS.call(...\"\n                        let expr_component_mpos := extract_returndata()\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if slt(sub(/** @src 0:2312:2339  \"abi.decode(retdata, (bool))\" */ add(expr_component_mpos, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ mload(/** @src 0:2312:2339  \"abi.decode(retdata, (bool))\" */ expr_component_mpos)), expr_component_mpos), /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        {\n                            /// @src 17:479:999  \"contract ForceTest is Test {...\"\n                            revert(/** @src 0:1873:1880  \"_failed\" */ _1, _1)\n                        }\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        let value := mload(/** @src 0:2312:2339  \"abi.decode(retdata, (bool))\" */ add(expr_component_mpos, /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3))\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if iszero(eq(value, /** @src 17:479:999  \"contract ForceTest is Test {...\" */ iszero(iszero(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ value))))\n                        {\n                            revert(/** @src 0:1873:1880  \"_failed\" */ _1, _1)\n                        }\n                        /// @src 0:2297:2339  \"globalFailed = abi.decode(retdata, (bool))\"\n                        var_globalFailed := value\n                    }\n                    /// @src 0:2367:2386  \"return globalFailed\"\n                    var := var_globalFailed\n                    leave\n                }\n                default /// @src 0:1869:2397  \"if (_failed) {...\"\n                {\n                    /// @src 0:1896:1910  \"return _failed\"\n                    var := /** @src 17:479:999  \"contract ForceTest is Test {...\" */ and(shr(8, sload(/** @src 0:1873:1880  \"_failed\" */ _1)), /** @src 17:479:999  \"contract ForceTest is Test {...\" */ 0xff)\n                    /// @src 0:1896:1910  \"return _failed\"\n                    leave\n                }\n            }\n        }\n        /// @use-src 14:\"src/ethernaut/level_7/Force.sol\"\n        object \"Force_24014\" {\n            code {\n                {\n                    /// @src 14:57:179  \"contract Force {...\"\n                    let _1 := memoryguard(0x80)\n                    mstore(64, _1)\n                    if callvalue() { revert(0, 0) }\n                    let _2 := datasize(\"Force_24014_deployed\")\n                    codecopy(_1, dataoffset(\"Force_24014_deployed\"), _2)\n                    return(_1, _2)\n                }\n            }\n            /// @use-src 14:\"src/ethernaut/level_7/Force.sol\"\n            object \"Force_24014_deployed\" {\n                code {\n                    {\n                        /// @src 14:57:179  \"contract Force {...\"\n                        revert(0, 0)\n                    }\n                }\n                data \".metadata\" hex\"a26469706673582212201af465dd4cacda5787febc4382b8c23b6454af8f38b8e2548312c26072ffbb0964736f6c634300080f0033\"\n            }\n        }\n        /// @use-src 17:\"test/ethernaut/Force.t.sol\"\n        object \"Attack_24133\" {\n            code {\n                {\n                    /// @src 17:143:477  \"contract Attack {...\"\n                    let _1 := memoryguard(0x80)\n                    if callvalue() { revert(0, 0) }\n                    let programSize := datasize(\"Attack_24133\")\n                    let argSize := sub(codesize(), programSize)\n                    let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n                    if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 17:143:477  \"contract Attack {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 17:143:477  \"contract Attack {...\" */ 0x24)\n                    }\n                    mstore(64, newFreePtr)\n                    codecopy(_1, programSize, argSize)\n                    if slt(sub(add(_1, argSize), _1), 32)\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                    /// @src 17:143:477  \"contract Attack {...\"\n                    let value := mload(_1)\n                    let _2 := and(value, sub(shl(160, 1), 1))\n                    if iszero(eq(value, _2))\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                    /// @src 17:143:477  \"contract Attack {...\"\n                    sstore(/** @src -1:-1:-1 */ 0, /** @src 17:143:477  \"contract Attack {...\" */ or(and(sload(/** @src -1:-1:-1 */ 0), /** @src 17:143:477  \"contract Attack {...\" */ not(sub(shl(160, 1), 1))), _2))\n                    let _3 := mload(64)\n                    let _4 := datasize(\"Attack_24133_deployed\")\n                    codecopy(_3, dataoffset(\"Attack_24133_deployed\"), _4)\n                    return(_3, _4)\n                }\n            }\n            /// @use-src 17:\"test/ethernaut/Force.t.sol\"\n            object \"Attack_24133_deployed\" {\n                code {\n                    {\n                        /// @src 17:143:477  \"contract Attack {...\"\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let _1 := 0\n                            if eq(0x9e5faafc, shr(224, calldataload(_1)))\n                            {\n                                if callvalue() { revert(_1, _1) }\n                                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                                /// @src 17:452:467  \"payable(victim)\"\n                                selfdestruct(/** @src 17:143:477  \"contract Attack {...\" */ and(sload(_1), sub(shl(160, 1), 1)))\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                }\n                data \".metadata\" hex\"a264697066735822122015116279c899e0e644fdaf41c1aee3c392255c5fb3664586ac12105b7defbc7164736f6c634300080f0033\"\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122050f0b917e6df63788abd259233281a4db3ad5ffdc7caf2510ebdc48b09453fe764736f6c634300080f0033\"\n    }\n}\n",
  "ast": {
    "absolutePath": "test/ethernaut/Force.t.sol",
    "id": 24197,
    "exportedSymbols": {
      "Attack": [
        24133
      ],
      "DSTest": [
        1786
      ],
      "Force": [
        24014
      ],
      "ForceTest": [
        24196
      ],
      "Script": [
        2049
      ],
      "StdStorage": [
        5077
      ],
      "Test": [
        4979
      ],
      "Vm": [
        7098
      ],
      "console": [
        15162
      ],
      "console2": [
        23226
      ],
      "stdError": [
        5049
      ],
      "stdJson": [
        2409
      ],
      "stdMath": [
        6318
      ],
      "stdStorage": [
        6179
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:961:17",
    "nodes": [
      {
        "id": 24107,
        "nodeType": "PragmaDirective",
        "src": "39:24:17",
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".13"
        ]
      },
      {
        "id": 24108,
        "nodeType": "ImportDirective",
        "src": "65:28:17",
        "absolutePath": "lib/forge-std/src/Test.sol",
        "file": "forge-std/Test.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24197,
        "sourceUnit": 6319,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 24109,
        "nodeType": "ImportDirective",
        "src": "94:47:17",
        "absolutePath": "src/ethernaut/level_7/Force.sol",
        "file": "../../src/ethernaut/level_7/Force.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24197,
        "sourceUnit": 24015,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 24133,
        "nodeType": "ContractDefinition",
        "src": "143:334:17",
        "nodes": [
          {
            "id": 24111,
            "nodeType": "VariableDeclaration",
            "src": "165:14:17",
            "constant": false,
            "mutability": "mutable",
            "name": "victim",
            "nameLocation": "173:6:17",
            "scope": 24133,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 24110,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "165:7:17",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 24121,
            "nodeType": "FunctionDefinition",
            "src": "186:62:17",
            "body": {
              "id": 24120,
              "nodeType": "Block",
              "src": "215:33:17",
              "statements": [
                {
                  "expression": {
                    "id": 24118,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24116,
                      "name": "victim",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24111,
                      "src": "225:6:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 24117,
                      "name": "_victim",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24113,
                      "src": "234:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "225:16:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 24119,
                  "nodeType": "ExpressionStatement",
                  "src": "225:16:17"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 24114,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24113,
                  "mutability": "mutable",
                  "name": "_victim",
                  "nameLocation": "206:7:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 24121,
                  "src": "198:15:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 24112,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "198:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "197:17:17"
            },
            "returnParameters": {
              "id": 24115,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "215:0:17"
            },
            "scope": 24133,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 24132,
            "nodeType": "FunctionDefinition",
            "src": "404:71:17",
            "body": {
              "id": 24131,
              "nodeType": "Block",
              "src": "429:46:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 24127,
                            "name": "victim",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24111,
                            "src": "460:6:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 24126,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "452:8:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 24125,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "452:8:17",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 24128,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "452:15:17",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 24124,
                      "name": "selfdestruct",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -21,
                      "src": "439:12:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_selfdestruct_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable)"
                      }
                    },
                    "id": 24129,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "439:29:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24130,
                  "nodeType": "ExpressionStatement",
                  "src": "439:29:17"
                }
              ]
            },
            "functionSelector": "9e5faafc",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "attack",
            "nameLocation": "413:6:17",
            "parameters": {
              "id": 24122,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "419:2:17"
            },
            "returnParameters": {
              "id": 24123,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "429:0:17"
            },
            "scope": 24133,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Attack",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          24133
        ],
        "name": "Attack",
        "nameLocation": "152:6:17",
        "scope": 24197,
        "usedErrors": []
      },
      {
        "id": 24196,
        "nodeType": "ContractDefinition",
        "src": "479:520:17",
        "nodes": [
          {
            "id": 24138,
            "nodeType": "VariableDeclaration",
            "src": "512:18:17",
            "constant": false,
            "functionSelector": "a79f26dc",
            "mutability": "mutable",
            "name": "force",
            "nameLocation": "525:5:17",
            "scope": 24196,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Force_$24014",
              "typeString": "contract Force"
            },
            "typeName": {
              "id": 24137,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 24136,
                "name": "Force",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 24014,
                "src": "512:5:17"
              },
              "referencedDeclaration": 24014,
              "src": "512:5:17",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Force_$24014",
                "typeString": "contract Force"
              }
            },
            "visibility": "public"
          },
          {
            "id": 24141,
            "nodeType": "VariableDeclaration",
            "src": "536:20:17",
            "constant": false,
            "functionSelector": "9e5faafc",
            "mutability": "mutable",
            "name": "attack",
            "nameLocation": "550:6:17",
            "scope": 24196,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Attack_$24133",
              "typeString": "contract Attack"
            },
            "typeName": {
              "id": 24140,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 24139,
                "name": "Attack",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 24133,
                "src": "536:6:17"
              },
              "referencedDeclaration": 24133,
              "src": "536:6:17",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Attack_$24133",
                "typeString": "contract Attack"
              }
            },
            "visibility": "public"
          },
          {
            "id": 24163,
            "nodeType": "FunctionDefinition",
            "src": "563:105:17",
            "body": {
              "id": 24162,
              "nodeType": "Block",
              "src": "587:81:17",
              "statements": [
                {
                  "expression": {
                    "id": 24149,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24144,
                      "name": "force",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24138,
                      "src": "597:5:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Force_$24014",
                        "typeString": "contract Force"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 24147,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "605:9:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Force_$24014_$",
                          "typeString": "function () returns (contract Force)"
                        },
                        "typeName": {
                          "id": 24146,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 24145,
                            "name": "Force",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 24014,
                            "src": "609:5:17"
                          },
                          "referencedDeclaration": 24014,
                          "src": "609:5:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Force_$24014",
                            "typeString": "contract Force"
                          }
                        }
                      },
                      "id": 24148,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "605:11:17",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Force_$24014",
                        "typeString": "contract Force"
                      }
                    },
                    "src": "597:19:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Force_$24014",
                      "typeString": "contract Force"
                    }
                  },
                  "id": 24150,
                  "nodeType": "ExpressionStatement",
                  "src": "597:19:17"
                },
                {
                  "expression": {
                    "id": 24160,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24151,
                      "name": "attack",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24141,
                      "src": "626:6:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Attack_$24133",
                        "typeString": "contract Attack"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 24157,
                              "name": "force",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 24138,
                              "src": "654:5:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Force_$24014",
                                "typeString": "contract Force"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Force_$24014",
                                "typeString": "contract Force"
                              }
                            ],
                            "id": 24156,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "646:7:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 24155,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "646:7:17",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 24158,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "646:14:17",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 24154,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "635:10:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$_t_address_$returns$_t_contract$_Attack_$24133_$",
                          "typeString": "function (address) returns (contract Attack)"
                        },
                        "typeName": {
                          "id": 24153,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 24152,
                            "name": "Attack",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 24133,
                            "src": "639:6:17"
                          },
                          "referencedDeclaration": 24133,
                          "src": "639:6:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Attack_$24133",
                            "typeString": "contract Attack"
                          }
                        }
                      },
                      "id": 24159,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "635:26:17",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Attack_$24133",
                        "typeString": "contract Attack"
                      }
                    },
                    "src": "626:35:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Attack_$24133",
                      "typeString": "contract Attack"
                    }
                  },
                  "id": 24161,
                  "nodeType": "ExpressionStatement",
                  "src": "626:35:17"
                }
              ]
            },
            "functionSelector": "0a9254e4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setUp",
            "nameLocation": "572:5:17",
            "parameters": {
              "id": 24142,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "577:2:17"
            },
            "returnParameters": {
              "id": 24143,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "587:0:17"
            },
            "scope": 24196,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 24195,
            "nodeType": "FunctionDefinition",
            "src": "674:323:17",
            "body": {
              "id": 24194,
              "nodeType": "Block",
              "src": "703:294:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 24171,
                            "name": "attack",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24141,
                            "src": "779:6:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Attack_$24133",
                              "typeString": "contract Attack"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_Attack_$24133",
                              "typeString": "contract Attack"
                            }
                          ],
                          "id": 24170,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "771:7:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 24169,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "771:7:17",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 24172,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "771:15:17",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "31",
                        "id": 24173,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "788:7:17",
                        "subdenomination": "ether",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        },
                        "value": "1"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        }
                      ],
                      "expression": {
                        "id": 24166,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1817,
                        "src": "763:2:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$7098",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 24168,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "deal",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6572,
                      "src": "763:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256) external"
                      }
                    },
                    "id": 24174,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "763:33:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24175,
                  "nodeType": "ExpressionStatement",
                  "src": "763:33:17"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 24176,
                        "name": "attack",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24141,
                        "src": "847:6:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Attack_$24133",
                          "typeString": "contract Attack"
                        }
                      },
                      "id": 24178,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "attack",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 24132,
                      "src": "847:13:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                        "typeString": "function () external"
                      }
                    },
                    "id": 24179,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "847:15:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24180,
                  "nodeType": "ExpressionStatement",
                  "src": "847:15:17"
                },
                {
                  "assignments": [
                    24182
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 24182,
                      "mutability": "mutable",
                      "name": "forceBalance",
                      "nameLocation": "918:12:17",
                      "nodeType": "VariableDeclaration",
                      "scope": 24194,
                      "src": "910:20:17",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 24181,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "910:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 24188,
                  "initialValue": {
                    "expression": {
                      "arguments": [
                        {
                          "id": 24185,
                          "name": "force",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24138,
                          "src": "941:5:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Force_$24014",
                            "typeString": "contract Force"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_Force_$24014",
                            "typeString": "contract Force"
                          }
                        ],
                        "id": 24184,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "933:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 24183,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "933:7:17",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 24186,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "933:14:17",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 24187,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "balance",
                    "nodeType": "MemberAccess",
                    "src": "933:22:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "910:45:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24190,
                        "name": "forceBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24182,
                        "src": "974:12:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 24191,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "988:1:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        }
                      ],
                      "id": 24189,
                      "name": "assertGt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        693,
                        718,
                        748,
                        773
                      ],
                      "referencedDeclaration": 693,
                      "src": "965:8:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 24192,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "965:25:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24193,
                  "nodeType": "ExpressionStatement",
                  "src": "965:25:17"
                }
              ]
            },
            "functionSelector": "6f2db99c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testAttack",
            "nameLocation": "683:10:17",
            "parameters": {
              "id": 24164,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "693:2:17"
            },
            "returnParameters": {
              "id": 24165,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "703:0:17"
            },
            "scope": 24196,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 24134,
              "name": "Test",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 4979,
              "src": "501:4:17"
            },
            "id": 24135,
            "nodeType": "InheritanceSpecifier",
            "src": "501:4:17"
          }
        ],
        "canonicalName": "ForceTest",
        "contractDependencies": [
          24014,
          24133
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          24196,
          4979,
          2049,
          1786
        ],
        "name": "ForceTest",
        "nameLocation": "488:9:17",
        "scope": 24197,
        "usedErrors": []
      }
    ],
    "license": "UNLICENSED"
  },
  "id": 17
}