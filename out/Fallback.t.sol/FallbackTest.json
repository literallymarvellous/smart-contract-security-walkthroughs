{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "log_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "log_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "log_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "name": "log_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "log_named_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "val",
          "type": "bytes"
        }
      ],
      "name": "log_named_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "val",
          "type": "bytes32"
        }
      ],
      "name": "log_named_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        }
      ],
      "name": "log_named_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "val",
          "type": "string"
        }
      ],
      "name": "log_named_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "log_named_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "log_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "logs",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IS_SCRIPT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IS_TEST",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fb",
      "outputs": [
        {
          "internalType": "contract Fallback",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testAttack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vm",
      "outputs": [
        {
          "internalType": "contract Vm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610a64806100316000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ba414fa61161005b578063ba414fa6146100cc578063eb666475146100e4578063f8ccbf47146100f7578063fa7626d41461010a57600080fd5b80630a9254e4146100825780633a7684631461008c5780636f2db99c146100c4575b600080fd5b61008a610117565b005b6100a7737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61008a610162565b6100d46102b3565b60405190151581526020016100bb565b6008546100a7906001600160a01b031681565b6000546100d49062010000900460ff1681565b6000546100d49060ff1681565b6040516101239061063a565b604051809103906000f08015801561013f573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b60405163c88a5e6d60e01b8152306004820152670de0b6b3a76400006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c88a5e6d90604401600060405180830381600087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b50506008546040516001600160a01b03909116925067016345785d8a00009150600081818185875af1925050503d8060008114610229576040519150601f19603f3d011682016040523d82523d6000602084013e61022e565b606091505b5050506102b1600860009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab9190610647565b306103de565b565b60008054610100900460ff16156102d35750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156103d95760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610361917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016106b2565b60408051601f198184030181529082905261037b916106d6565b6000604051808303816000865af19150503d80600081146103b8576040519150601f19603f3d011682016040523d82523d6000602084013e6103bd565b606091505b50915050808060200190518101906103d591906106e2565b9150505b919050565b806001600160a01b0316826001600160a01b03161461052a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104649060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526001600160a01b038316602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526001600160a01b038416602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a161052a61052e565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106295760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526105c892916020016106b2565b60408051601f19818403018152908290526105e2916106d6565b6000604051808303816000865af19150503d806000811461061f576040519150601f19603f3d011682016040523d82523d6000602084013e610624565b606091505b505050505b6000805461ff001916610100179055565b61032a8061070583390190565b60006020828403121561065957600080fd5b81516001600160a01b038116811461067057600080fd5b9392505050565b6000815160005b81811015610698576020818501810151868301520161067e565b818111156106a7576000828601525b509290920192915050565b6001600160e01b03198316815260006106ce6004830184610677565b949350505050565b60006106708284610677565b6000602082840312156106f457600080fd5b8151801515811461067057600080fdfe60806040908152600180546001600160a01b031916339081179091556000908152602081905220683635c9adc5dea0000090556102e9806100416000396000f3fe60806040526004361061004e5760003560e01c80633ccfd60b1461009657806342e94c90146100ad5780638da5cb5b146100ed578063d7bb99ba14610125578063f10fdf5c1461012d57600080fd5b366100915760003411801561007157503360009081526020819052604090205415155b61007a57600080fd5b600180546001600160a01b03191633908117909155005b600080fd5b3480156100a257600080fd5b506100ab61014f565b005b3480156100b957600080fd5b506100da6100c836600461025d565b60006020819052908152604090205481565b6040519081526020015b60405180910390f35b3480156100f957600080fd5b5060015461010d906001600160a01b031681565b6040516001600160a01b0390911681526020016100e4565b6100ab6101e9565b34801561013957600080fd5b50336000908152602081905260409020546100da565b6001546001600160a01b031633146101ad5760405162461bcd60e51b815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640160405180910390fd5b6001546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156101e6573d6000803e3d6000fd5b50565b66038d7ea4c6800034106101fc57600080fd5b336000908152602081905260408120805434929061021b90849061028d565b90915550506001546001600160a01b031660009081526020819052604080822054338352912054111561025b57600180546001600160a01b031916331790555b565b60006020828403121561026f57600080fd5b81356001600160a01b038116811461028657600080fd5b9392505050565b600082198211156102ae57634e487b7160e01b600052601160045260246000fd5b50019056fea264697066735822122056450a2c13175f8a373f7458c6783241bd7f890651acec13f7419e3fe6b0833064736f6c634300080f0033a2646970667358221220d63b6cf0da91b9c58c363c6e635740bd4401a5e1be918bb06311619c4413c9b564736f6c634300080f0033",
    "sourceMap": "146:301:16:-:0;;;1572:26:0;;;-1:-1:-1;;170:28:1;;;;;146:301:16;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ba414fa61161005b578063ba414fa6146100cc578063eb666475146100e4578063f8ccbf47146100f7578063fa7626d41461010a57600080fd5b80630a9254e4146100825780633a7684631461008c5780636f2db99c146100c4575b600080fd5b61008a610117565b005b6100a7737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61008a610162565b6100d46102b3565b60405190151581526020016100bb565b6008546100a7906001600160a01b031681565b6000546100d49062010000900460ff1681565b6000546100d49060ff1681565b6040516101239061063a565b604051809103906000f08015801561013f573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b60405163c88a5e6d60e01b8152306004820152670de0b6b3a76400006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c88a5e6d90604401600060405180830381600087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b50506008546040516001600160a01b03909116925067016345785d8a00009150600081818185875af1925050503d8060008114610229576040519150601f19603f3d011682016040523d82523d6000602084013e61022e565b606091505b5050506102b1600860009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab9190610647565b306103de565b565b60008054610100900460ff16156102d35750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156103d95760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610361917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016106b2565b60408051601f198184030181529082905261037b916106d6565b6000604051808303816000865af19150503d80600081146103b8576040519150601f19603f3d011682016040523d82523d6000602084013e6103bd565b606091505b50915050808060200190518101906103d591906106e2565b9150505b919050565b806001600160a01b0316826001600160a01b03161461052a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104649060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526001600160a01b038316602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526001600160a01b038416602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a161052a61052e565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106295760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526105c892916020016106b2565b60408051601f19818403018152908290526105e2916106d6565b6000604051808303816000865af19150503d806000811461061f576040519150601f19603f3d011682016040523d82523d6000602084013e610624565b606091505b505050505b6000805461ff001916610100179055565b61032a8061070583390190565b60006020828403121561065957600080fd5b81516001600160a01b038116811461067057600080fd5b9392505050565b6000815160005b81811015610698576020818501810151868301520161067e565b818111156106a7576000828601525b509290920192915050565b6001600160e01b03198316815260006106ce6004830184610677565b949350505050565b60006106708284610677565b6000602082840312156106f457600080fd5b8151801515811461067057600080fdfe60806040908152600180546001600160a01b031916339081179091556000908152602081905220683635c9adc5dea0000090556102e9806100416000396000f3fe60806040526004361061004e5760003560e01c80633ccfd60b1461009657806342e94c90146100ad5780638da5cb5b146100ed578063d7bb99ba14610125578063f10fdf5c1461012d57600080fd5b366100915760003411801561007157503360009081526020819052604090205415155b61007a57600080fd5b600180546001600160a01b03191633908117909155005b600080fd5b3480156100a257600080fd5b506100ab61014f565b005b3480156100b957600080fd5b506100da6100c836600461025d565b60006020819052908152604090205481565b6040519081526020015b60405180910390f35b3480156100f957600080fd5b5060015461010d906001600160a01b031681565b6040516001600160a01b0390911681526020016100e4565b6100ab6101e9565b34801561013957600080fd5b50336000908152602081905260409020546100da565b6001546001600160a01b031633146101ad5760405162461bcd60e51b815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640160405180910390fd5b6001546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156101e6573d6000803e3d6000fd5b50565b66038d7ea4c6800034106101fc57600080fd5b336000908152602081905260408120805434929061021b90849061028d565b90915550506001546001600160a01b031660009081526020819052604080822054338352912054111561025b57600180546001600160a01b031916331790555b565b60006020828403121561026f57600080fd5b81356001600160a01b038116811461028657600080fd5b9392505050565b600082198211156102ae57634e487b7160e01b600052601160045260246000fd5b50019056fea264697066735822122056450a2c13175f8a373f7458c6783241bd7f890651acec13f7419e3fe6b0833064736f6c634300080f0033a2646970667358221220d63b6cf0da91b9c58c363c6e635740bd4401a5e1be918bb06311619c4413c9b564736f6c634300080f0033",
    "sourceMap": "146:301:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;207:60;;;:::i;:::-;;321:38:1;;250:64;321:38;;;;;-1:-1:-1;;;;;189:32:20;;;171:51;;159:2;144:18;321:38:1;;;;;;;;273:172:16;;;:::i;1819:584:0:-;;;:::i;:::-;;;398:14:20;;391:22;373:41;;361:2;346:18;1819:584:0;233:187:20;182:18:16;;;;;-1:-1:-1;;;;;182:18:16;;;170:28:1;;;;;;;;;;;;1572:26:0;;;;;;;;;207:60:16;246:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;241:2:16;:19;;-1:-1:-1;;;;;;241:19:16;-1:-1:-1;;;;;241:19:16;;;;;;;;;;207:60::o;273:172::-;312:31;;-1:-1:-1;;;312:31:16;;328:4;312:31;;;859:51:20;335:7:16;926:18:20;;;919:34;250:64:1;;312:7:16;;832:18:20;;312:31:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;362:2:16;;354:38;;-1:-1:-1;;;;;362:2:16;;;;-1:-1:-1;378:9:16;;-1:-1:-1;354:38:16;;;;378:9;362:2;354:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;403:35;412:2;;;;;;;;;-1:-1:-1;;;;;412:2:16;-1:-1:-1;;;;;412:8:16;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;432:4;403:8;:35::i;:::-;273:172::o;1819:584:0:-;1853:4;1873:7;;;;;;;1869:528;;;-1:-1:-1;1903:7:0;;;;;;;;1819:584::o;1869:528::-;1941:17;2990:42;2978:55;3059:16;1980:374;;2196:43;;;1671:64;2196:43;;;859:51:20;;;-1:-1:-1;;;926:18:20;;;919:34;2196:43:0;;;;;;;;;832:18:20;;;2196:43:0;;;-1:-1:-1;;1671:64:0;;2086:175;;2135:34;;2086:175;;;:::i;:::-;;;;-1:-1:-1;;2086:175:0;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;2002:352;1980:374;2374:12;1819:584;-1:-1:-1;1819:584:0:o;3615:277::-;3683:1;-1:-1:-1;;;;;3678:6:0;:1;-1:-1:-1;;;;;3678:6:0;;3674:212;;3705:44;;;;;3058:2:20;3040:21;;;3097:2;3077:18;;;3070:30;3136:34;3131:2;3116:18;;3109:62;-1:-1:-1;;;3202:2:20;3187:18;;3180:35;3247:3;3232:19;;2856:401;3705:44:0;;;;;;;;3768:34;;;3474:21:20;;;3531:2;3511:18;;;3504:30;-1:-1:-1;;;3565:2:20;3550:18;;3543:40;-1:-1:-1;;;;;3657:32:20;;3650:4;3635:20;;3628:62;3768:34:0;;;;;;;3615:3:20;3768:34:0;;;3821;;;3913:21:20;;;3970:2;3950:18;;;3943:30;-1:-1:-1;;;4004:2:20;3989:18;;3982:40;-1:-1:-1;;;;;4096:32:20;;4089:4;4074:20;;4067:62;3821:34:0;;;;;;;4054:3:20;3821:34:0;;;3869:6;:4;:6::i;:::-;3615:277;;:::o;2410:424::-;2990:42;2978:55;3059:16;2445:359;;2645:67;;;1671:64;2645:67;;;4342:51:20;;;-1:-1:-1;;;4409:18:20;;;4402:34;;;;2705:4:0;4452:18:20;;;4445:34;2482:11:0;;1671:64;2579:43;;4315:18:20;;2645:67:0;;;-1:-1:-1;;2645:67:0;;;;;;;;;;2534:196;;;2645:67;2534:196;;:::i;:::-;;;;-1:-1:-1;;2534:196:0;;;;;;;;;;2499:245;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2445:359:0;2813:7;:14;;-1:-1:-1;;2813:14:0;;;;;2410:424::o;-1:-1:-1:-;;;;;;;;:::o;1174:298:20:-;1252:6;1305:2;1293:9;1284:7;1280:23;1276:32;1273:52;;;1321:1;1318;1311:12;1273:52;1347:16;;-1:-1:-1;;;;;1392:31:20;;1382:42;;1372:70;;1438:1;1435;1428:12;1372:70;1461:5;1174:298;-1:-1:-1;;;1174:298:20:o;1756:336::-;1797:3;1835:5;1829:12;1859:1;1869:128;1883:6;1880:1;1877:13;1869:128;;;1980:4;1965:13;;;1961:24;;1955:31;1942:11;;;1935:52;1898:12;1869:128;;;2015:6;2012:1;2009:13;2006:48;;;2050:1;2041:6;2036:3;2032:16;2025:27;2006:48;-1:-1:-1;2070:16:20;;;;;1756:336;-1:-1:-1;;1756:336:20:o;2097:278::-;-1:-1:-1;;;;;;2282:33:20;;2270:46;;2252:3;2332:37;2366:1;2357:11;;2349:6;2332:37;:::i;:::-;2325:44;2097:278;-1:-1:-1;;;;2097:278:20:o;2380:189::-;2509:3;2534:29;2559:3;2551:6;2534:29;:::i;2574:277::-;2641:6;2694:2;2682:9;2673:7;2669:23;2665:32;2662:52;;;2710:1;2707;2700:12;2662:52;2742:9;2736:16;2795:5;2788:13;2781:21;2774:5;2771:32;2761:60;;2817:1;2814;2807:12",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "IS_SCRIPT()": "f8ccbf47",
    "IS_TEST()": "fa7626d4",
    "failed()": "ba414fa6",
    "fb()": "eb666475",
    "setUp()": "0a9254e4",
    "testAttack()": "6f2db99c",
    "vm()": "3a768463"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fb\",\"outputs\":[{\"internalType\":\"contract Fallback\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/ethernaut/Fallback.t.sol\":\"FallbackTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/forge-std/lib/ds-test/src/test.sol\":{\"keccak256\":\"0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5\",\"dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0x9d09c1e55cd508d3376cff9961625d51d73f8ce075ec1e9deed41408a4556e00\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8880c5551daf337ab91665a9ce593df67a9eb11b0bee820f631d324d2fdd3a8b\",\"dweb:/ipfs/QmNpvSBGnS9Jr6Swd6XKsijG59a4yjYemWCFwprjKFkpNC\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x1297a1cc393bc8163ccf143e5335536e78cb25ac24a4f6dfdb25f5746dd4827e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://945ccffad9fc09d2aa0ac200a80dcfa2f491dba8680fc9c3d3d450d891284b87\",\"dweb:/ipfs/QmYSfFb1L6LN1ZB9KWzZqxt2iAbpuFDskBcU1Bz4RiyuQ5\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x6c9cbd51234372b66bf7c146870edf0855770c46e960a8fae8f354ddf382876b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fd0ff1f449294dd1447b9d483c52d78e137d8cac518646e76df9fdd4d185d6c2\",\"dweb:/ipfs/QmS3JP4vKgvAWo8Tc7zVrGxbdR7t37ayk1mTHN3seD6UAZ\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x1a5767028a0c3985e991456fc9650055e28b01b787c56b11f66ac30498a153ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f86887212eacca450a15a8a5bf9fe83fd91a2ba623df8e9c32c75a31824c8ea2\",\"dweb:/ipfs/QmTUHBNdZwntgjbFZne7fY9ZJLNGYWaq3uWfGk6FyqdAkB\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0xbeb823fcdb356244a83aaccdf828ad019ecc1ffaa3dff18e624fc6d5714ea671\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4cbe9400340e5f9ec55e2aff3bad1c15fa3afbbe37e80800e6f3fed2ad26854f\",\"dweb:/ipfs/QmdJBABsuXkvWxVzEyGXsTE3vyfBPXDdw5xvvtUz3JeoYW\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]},\"src/ethernaut/level_1/Fallback.sol\":{\"keccak256\":\"0x68414729846f4c116dc3fec9fba827a7c3e07b77fc4968d5c5d4f9b9f89ecc8a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f5e603f49c735f9edfeed063548ed627bfeeda73b54e7382fc89f0ee5d96d64\",\"dweb:/ipfs/QmUweSVcFMmSVZTqmmJkeicE5TxXJxP5n1BKtMu9eYydtd\"]},\"test/ethernaut/Fallback.t.sol\":{\"keccak256\":\"0x5b275450300cc7ae63ae1b55877fe195afe2b9e4adf079b4a4908c0501601c8c\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://dc0c913142f31c6eeed8c32b06f4af6c98676e1ea9123127b442e8357bec445d\",\"dweb:/ipfs/QmTUJszfFosKZ15fkscjuedYnhoPFrNfn9XWK4MR5HGVMc\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256",
              "name": "",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "val",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "val",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes32",
              "name": "val",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "val",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "logs",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "IS_SCRIPT",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "IS_TEST",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "failed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "fb",
          "outputs": [
            {
              "internalType": "contract Fallback",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setUp"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testAttack"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "vm",
          "outputs": [
            {
              "internalType": "contract Vm",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/src/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        ":solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "test/ethernaut/Fallback.t.sol": "FallbackTest"
      },
      "libraries": {}
    },
    "sources": {
      "lib/forge-std/lib/ds-test/src/test.sol": {
        "keccak256": "0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54",
        "urls": [
          "bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5",
          "dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/forge-std/src/Script.sol": {
        "keccak256": "0x9d09c1e55cd508d3376cff9961625d51d73f8ce075ec1e9deed41408a4556e00",
        "urls": [
          "bzz-raw://8880c5551daf337ab91665a9ce593df67a9eb11b0bee820f631d324d2fdd3a8b",
          "dweb:/ipfs/QmNpvSBGnS9Jr6Swd6XKsijG59a4yjYemWCFwprjKFkpNC"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdJson.sol": {
        "keccak256": "0x1297a1cc393bc8163ccf143e5335536e78cb25ac24a4f6dfdb25f5746dd4827e",
        "urls": [
          "bzz-raw://945ccffad9fc09d2aa0ac200a80dcfa2f491dba8680fc9c3d3d450d891284b87",
          "dweb:/ipfs/QmYSfFb1L6LN1ZB9KWzZqxt2iAbpuFDskBcU1Bz4RiyuQ5"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/Test.sol": {
        "keccak256": "0x6c9cbd51234372b66bf7c146870edf0855770c46e960a8fae8f354ddf382876b",
        "urls": [
          "bzz-raw://fd0ff1f449294dd1447b9d483c52d78e137d8cac518646e76df9fdd4d185d6c2",
          "dweb:/ipfs/QmS3JP4vKgvAWo8Tc7zVrGxbdR7t37ayk1mTHN3seD6UAZ"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/Vm.sol": {
        "keccak256": "0x1a5767028a0c3985e991456fc9650055e28b01b787c56b11f66ac30498a153ab",
        "urls": [
          "bzz-raw://f86887212eacca450a15a8a5bf9fe83fd91a2ba623df8e9c32c75a31824c8ea2",
          "dweb:/ipfs/QmTUHBNdZwntgjbFZne7fY9ZJLNGYWaq3uWfGk6FyqdAkB"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/console.sol": {
        "keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
        "urls": [
          "bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
          "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/console2.sol": {
        "keccak256": "0xbeb823fcdb356244a83aaccdf828ad019ecc1ffaa3dff18e624fc6d5714ea671",
        "urls": [
          "bzz-raw://4cbe9400340e5f9ec55e2aff3bad1c15fa3afbbe37e80800e6f3fed2ad26854f",
          "dweb:/ipfs/QmdJBABsuXkvWxVzEyGXsTE3vyfBPXDdw5xvvtUz3JeoYW"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol": {
        "keccak256": "0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e",
        "urls": [
          "bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65",
          "dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN"
        ],
        "license": "MIT"
      },
      "src/ethernaut/level_1/Fallback.sol": {
        "keccak256": "0x68414729846f4c116dc3fec9fba827a7c3e07b77fc4968d5c5d4f9b9f89ecc8a",
        "urls": [
          "bzz-raw://0f5e603f49c735f9edfeed063548ed627bfeeda73b54e7382fc89f0ee5d96d64",
          "dweb:/ipfs/QmUweSVcFMmSVZTqmmJkeicE5TxXJxP5n1BKtMu9eYydtd"
        ],
        "license": "MIT"
      },
      "test/ethernaut/Fallback.t.sol": {
        "keccak256": "0x5b275450300cc7ae63ae1b55877fe195afe2b9e4adf079b4a4908c0501601c8c",
        "urls": [
          "bzz-raw://dc0c913142f31c6eeed8c32b06f4af6c98676e1ea9123127b442e8357bec445d",
          "dweb:/ipfs/QmTUJszfFosKZ15fkscjuedYnhoPFrNfn9XWK4MR5HGVMc"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "irOptimized": "/// @use-src 0:\"lib/forge-std/lib/ds-test/src/test.sol\", 1:\"lib/forge-std/src/Script.sol\", 3:\"lib/forge-std/src/Test.sol\", 16:\"test/ethernaut/Fallback.t.sol\"\nobject \"FallbackTest_24105\" {\n    code {\n        {\n            /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            sstore(/** @src 0:1594:1598  \"true\" */ 0x00, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ or(and(sload(/** @src 0:1594:1598  \"true\" */ 0x00), /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ not(16711935)), 65537))\n            let _2 := datasize(\"FallbackTest_24105_deployed\")\n            codecopy(_1, dataoffset(\"FallbackTest_24105_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"lib/forge-std/lib/ds-test/src/test.sol\", 1:\"lib/forge-std/src/Script.sol\", 16:\"test/ethernaut/Fallback.t.sol\"\n    object \"FallbackTest_24105_deployed\" {\n        code {\n            {\n                /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x0a9254e4 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        /// @src 16:246:260  \"new Fallback()\"\n                        let _5 := datasize(\"Fallback_23813\")\n                        let _6 := add(_1, _5)\n                        if or(gt(_6, 0xffffffffffffffff), lt(_6, _1))\n                        {\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _3, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x41)\n                            revert(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x24)\n                        }\n                        /// @src 16:246:260  \"new Fallback()\"\n                        datacopy(_1, dataoffset(\"Fallback_23813\"), _5)\n                        let expr_address := create(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _4, /** @src 16:246:260  \"new Fallback()\" */ _1, sub(_6, _1))\n                        if iszero(expr_address)\n                        {\n                            /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n                            let pos := mload(_2)\n                            returndatacopy(pos, _4, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        sstore(/** @src 16:241:260  \"fb = new Fallback()\" */ 0x08, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ or(and(sload(/** @src 16:241:260  \"fb = new Fallback()\" */ 0x08), /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ shl(160, 0xffffffffffffffffffffffff)), and(expr_address, sub(shl(160, /** @src 16:246:260  \"new Fallback()\" */ 1), 1))))\n                        /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n                        return(mload(_2), _4)\n                    }\n                    case 0x3a768463 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let memPos := mload(_2)\n                        mstore(memPos, 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d)\n                        return(memPos, 32)\n                    }\n                    case 0x6f2db99c {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _7 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 16:312:343  \"vm.deal(address(this), 1 ether)\"\n                        if iszero(extcodesize(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _7))\n                        /// @src 16:312:343  \"vm.deal(address(this), 1 ether)\"\n                        {\n                            /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 16:312:343  \"vm.deal(address(this), 1 ether)\"\n                        let _8 := /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ mload(_2)\n                        /// @src 16:312:343  \"vm.deal(address(this), 1 ether)\"\n                        mstore(_8, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ shl(224, 0xc88a5e6d))\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(/** @src 16:312:343  \"vm.deal(address(this), 1 ether)\" */ add(_8, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _3), /** @src 16:328:332  \"this\" */ address())\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ add(/** @src 16:312:343  \"vm.deal(address(this), 1 ether)\" */ _8, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 36), /** @src 16:335:342  \"1 ether\" */ 0x0de0b6b3a7640000)\n                        /// @src 16:312:343  \"vm.deal(address(this), 1 ether)\"\n                        let _9 := call(gas(), /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _7, _4, /** @src 16:312:343  \"vm.deal(address(this), 1 ether)\" */ _8, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 68, /** @src 16:312:343  \"vm.deal(address(this), 1 ether)\" */ _8, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _4)\n                        /// @src 16:312:343  \"vm.deal(address(this), 1 ether)\"\n                        if iszero(_9)\n                        {\n                            /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n                            let pos_1 := mload(_2)\n                            returndatacopy(pos_1, _4, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 16:312:343  \"vm.deal(address(this), 1 ether)\"\n                        if _9\n                        {\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            if gt(_8, 0xffffffffffffffff)\n                            {\n                                mstore(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                                mstore(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _3, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x41)\n                                revert(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _4, 36)\n                            }\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _2, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ _8)\n                            /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n                            _4 := _4\n                        }\n                        let _10 := sub(shl(160, /** @src 16:246:260  \"new Fallback()\" */ 1), 1)\n                        /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n                        let value := and(sload(/** @src 16:362:364  \"fb\" */ 0x08), /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _10)\n                        /// @src 16:354:392  \"address(fb).call{value: 0.1 ether}(\\\"\\\")\"\n                        pop(call(gas(), value, /** @src 16:378:387  \"0.1 ether\" */ 0x016345785d8a0000, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ mload(_2), /** @src 16:354:392  \"address(fb).call{value: 0.1 ether}(\\\"\\\")\" */ _4, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _4, _4))\n                        /// @src 16:354:392  \"address(fb).call{value: 0.1 ether}(\\\"\\\")\"\n                        pop(extract_returndata())\n                        /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n                        let value_1 := and(sload(/** @src 16:362:364  \"fb\" */ 0x08), /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _10)\n                        /// @src 16:412:422  \"fb.owner()\"\n                        let _11 := /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ mload(_2)\n                        /// @src 16:412:422  \"fb.owner()\"\n                        mstore(_11, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ shl(224, 0x8da5cb5b))\n                        let _12 := 32\n                        /// @src 16:412:422  \"fb.owner()\"\n                        let _13 := staticcall(gas(), value_1, _11, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _3, /** @src 16:412:422  \"fb.owner()\" */ _11, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _12)\n                        /// @src 16:412:422  \"fb.owner()\"\n                        if iszero(_13)\n                        {\n                            /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n                            let pos_2 := mload(_2)\n                            returndatacopy(pos_2, _4, returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        /// @src 16:412:422  \"fb.owner()\"\n                        let expr := _4\n                        if _13\n                        {\n                            let _14 := /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _12\n                            /// @src 16:412:422  \"fb.owner()\"\n                            if gt(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _12, /** @src 16:412:422  \"fb.owner()\" */ returndatasize()) { _14 := returndatasize() }\n                            finalize_allocation(_11, _14)\n                            /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n                            if slt(sub(/** @src 16:412:422  \"fb.owner()\" */ add(_11, _14), /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _11), _12) { revert(_4, _4) }\n                            let value_2 := mload(_11)\n                            if iszero(eq(value_2, and(value_2, _10))) { revert(_4, _4) }\n                            /// @src 16:412:422  \"fb.owner()\"\n                            expr := value_2\n                        }\n                        /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n                        let _15 := and(/** @src 16:403:438  \"assertEq(fb.owner(), address(this))\" */ expr, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _10)\n                        /// @src 0:3674:3886  \"if (a != b) {...\"\n                        if /** @src 0:3678:3684  \"a != b\" */ iszero(eq(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _15, /** @src 16:328:332  \"this\" */ address()))\n                        /// @src 0:3674:3886  \"if (a != b) {...\"\n                        {\n                            /// @src 0:3705:3749  \"log(\\\"Error: a == b not satisfied [address]\\\")\"\n                            let _16 := /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ mload(_2)\n                            mstore(_16, _12)\n                            mstore(add(_16, _12), 37)\n                            mstore(add(_16, _2), \"Error: a == b not satisfied [add\")\n                            mstore(add(_16, 96), \"ress]\")\n                            /// @src 0:3705:3749  \"log(\\\"Error: a == b not satisfied [address]\\\")\"\n                            log1(_16, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 128, /** @src 0:3705:3749  \"log(\\\"Error: a == b not satisfied [address]\\\")\" */ 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50)\n                            /// @src 0:3768:3802  \"log_named_address(\\\"  Expected\\\", b)\"\n                            let _17 := /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ mload(_2)\n                            mstore(_17, _2)\n                            mstore(add(_17, _2), 10)\n                            mstore(add(_17, 96), \"  Expected\")\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ add(_17, _12), /** @src 16:328:332  \"this\" */ address())\n                            /// @src 0:3768:3802  \"log_named_address(\\\"  Expected\\\", b)\"\n                            let _18 := 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f\n                            log1(_17, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 128, /** @src 0:3768:3802  \"log_named_address(\\\"  Expected\\\", b)\" */ _18)\n                            /// @src 0:3821:3855  \"log_named_address(\\\"    Actual\\\", a)\"\n                            let _19 := /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ mload(_2)\n                            mstore(_19, _2)\n                            mstore(add(_19, _2), 10)\n                            mstore(add(_19, 96), \"    Actual\")\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ add(_19, _12), _15)\n                            /// @src 0:3821:3855  \"log_named_address(\\\"    Actual\\\", a)\"\n                            log1(_19, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 128, /** @src 0:3768:3802  \"log_named_address(\\\"  Expected\\\", b)\" */ _18)\n                            /// @src 0:2445:2804  \"if (hasHEVMContext()) {...\"\n                            if /** @src 0:3059:3075  \"hevmCodeSize > 0\" */ iszero(iszero(/** @src 0:2939:3043  \"assembly {...\" */ extcodesize(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _7)))\n                            /// @src 0:2445:2804  \"if (hasHEVMContext()) {...\"\n                            {\n                                /// @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\"\n                                let expr_mpos := /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ mload(_2)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                mstore(/** @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\" */ add(expr_mpos, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _12), _7)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                mstore(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ add(/** @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\" */ expr_mpos, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _2), /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(210, 0x19985a5b1959))\n                                mstore(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ add(/** @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\" */ expr_mpos, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 96), /** @src 0:2705:2709  \"0x01\" */ 0x01)\n                                /// @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\"\n                                mstore(expr_mpos, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 96)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                let newFreePtr := add(expr_mpos, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 128)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, expr_mpos))\n                                {\n                                    mstore(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 0, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                                    mstore(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _3, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x41)\n                                    revert(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 0, 36)\n                                }\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                mstore(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _2, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ newFreePtr)\n                                /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                                let _20 := add(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ expr_mpos, /** @src 0:2534:2730  \"abi.encodePacked(...\" */ 160)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                mstore(_20, shl(224, 0x70ca10bb))\n                                let length := mload(expr_mpos)\n                                let i := /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 0\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                for { }\n                                lt(i, length)\n                                {\n                                    i := add(i, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _12)\n                                }\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                {\n                                    let _21 := add(expr_mpos, i)\n                                    mstore(add(_21, 164), mload(add(_21, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _12)))\n                                }\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                if gt(i, length)\n                                {\n                                    mstore(add(add(expr_mpos, length), 164), /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 0)\n                                }\n                                /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                                let _22 := sub(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ add(expr_mpos, length), expr_mpos)\n                                /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                                mstore(newFreePtr, add(_22, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _3))\n                                /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                                finalize_allocation(newFreePtr, add(_22, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 36))\n                                /// @src 0:2499:2744  \"HEVM_ADDRESS.call(...\"\n                                pop(call(gas(), /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _7, _4, /** @src 0:2499:2744  \"HEVM_ADDRESS.call(...\" */ _20, mload(newFreePtr), /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ _4, _4))\n                                /// @src 0:2499:2744  \"HEVM_ADDRESS.call(...\"\n                                pop(extract_returndata())\n                            }\n                            /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n                            sstore(_4, or(and(sload(_4), not(65280)), 256))\n                        }\n                        return(mload(_2), _4)\n                    }\n                    case 0xba414fa6 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let ret := fun_failed()\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, iszero(iszero(ret)))\n                        return(memPos_1, 32)\n                    }\n                    case 0xeb666475 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_3 := and(sload(/** @src 16:182:200  \"Fallback public fb\" */ 8), /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ sub(shl(160, /** @src 16:246:260  \"new Fallback()\" */ 1), 1))\n                        /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, value_3)\n                        return(memPos_2, 32)\n                    }\n                    case 0xf8ccbf47 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_4 := and(shr(16, sload(_4)), 0xff)\n                        let memPos_3 := mload(_2)\n                        mstore(memPos_3, iszero(iszero(value_4)))\n                        return(memPos_3, 32)\n                    }\n                    case 0xfa7626d4 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_5 := and(sload(_4), 0xff)\n                        let memPos_4 := mload(_2)\n                        mstore(memPos_4, iszero(iszero(value_5)))\n                        return(memPos_4, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _1 := returndatasize()\n                    if gt(_1, 0xffffffffffffffff)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x24)\n                    }\n                    let memPtr := /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ mload(64)\n                    /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                    finalize_allocation(memPtr, add(and(add(_1, 31), not(31)), 0x20))\n                    mstore(memPtr, _1)\n                    data := memPtr\n                    returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ returndatasize())\n                }\n            }\n            /// @ast-id 172 @src 0:1819:2403  \"function failed() public returns (bool) {...\"\n            function fun_failed() -> var\n            {\n                /// @src 0:1873:1880  \"_failed\"\n                let _1 := 0x00\n                /// @src 0:1869:2397  \"if (_failed) {...\"\n                switch /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ and(shr(8, sload(/** @src 0:1873:1880  \"_failed\" */ _1)), /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 0xff)\n                case /** @src 0:1869:2397  \"if (_failed) {...\" */ 0 {\n                    /// @src 0:1941:1966  \"bool globalFailed = false\"\n                    let var_globalFailed := /** @src 0:1873:1880  \"_failed\" */ _1\n                    /// @src 0:2939:3043  \"assembly {...\"\n                    let _2 := 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D\n                    /// @src 0:1980:2354  \"if (hasHEVMContext()) {...\"\n                    if /** @src 0:3059:3075  \"hevmCodeSize > 0\" */ iszero(iszero(/** @src 0:2939:3043  \"assembly {...\" */ extcodesize(_2)))\n                    /// @src 0:1980:2354  \"if (hasHEVMContext()) {...\"\n                    {\n                        /// @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\"\n                        let expr_mpos := /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ mload(64)\n                        /// @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\"\n                        let _3 := 0x20\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(/** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ add(expr_mpos, _3), /** @src 0:2939:3043  \"assembly {...\" */ _2)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(add(/** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ expr_mpos, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 64), /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(210, 0x19985a5b1959))\n                        /// @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\"\n                        mstore(expr_mpos, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 64)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        let newFreePtr := add(expr_mpos, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 96)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, expr_mpos))\n                        {\n                            mstore(/** @src 0:1873:1880  \"_failed\" */ _1, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(/** @src 0:1873:1880  \"_failed\" */ _1, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x24)\n                        }\n                        mstore(/** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 64, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ newFreePtr)\n                        /// @src 0:2086:2261  \"abi.encodePacked(...\"\n                        let _4 := add(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ expr_mpos, /** @src 0:2086:2261  \"abi.encodePacked(...\" */ 128)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(_4, shl(228, 0x0667f9d7))\n                        let length := mload(expr_mpos)\n                        let i := /** @src 0:1873:1880  \"_failed\" */ _1\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        for { }\n                        lt(i, length)\n                        {\n                            i := add(i, /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3)\n                        }\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        {\n                            let _5 := add(expr_mpos, i)\n                            mstore(add(_5, 132), mload(add(_5, /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3)))\n                        }\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if gt(i, length)\n                        {\n                            mstore(add(add(expr_mpos, length), 132), /** @src 0:1873:1880  \"_failed\" */ _1)\n                        }\n                        /// @src 0:2086:2261  \"abi.encodePacked(...\"\n                        let _6 := sub(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ add(expr_mpos, length), expr_mpos)\n                        /// @src 0:2086:2261  \"abi.encodePacked(...\"\n                        mstore(newFreePtr, add(_6, 4))\n                        finalize_allocation(newFreePtr, add(_6, 36))\n                        /// @src 0:2047:2279  \"HEVM_ADDRESS.call(...\"\n                        pop(call(gas(), /** @src 0:2939:3043  \"assembly {...\" */ _2, /** @src 0:1873:1880  \"_failed\" */ _1, /** @src 0:2047:2279  \"HEVM_ADDRESS.call(...\" */ _4, mload(newFreePtr), /** @src 0:1873:1880  \"_failed\" */ _1, _1))\n                        /// @src 0:2047:2279  \"HEVM_ADDRESS.call(...\"\n                        let expr_component_mpos := extract_returndata()\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if slt(sub(/** @src 0:2312:2339  \"abi.decode(retdata, (bool))\" */ add(expr_component_mpos, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ mload(/** @src 0:2312:2339  \"abi.decode(retdata, (bool))\" */ expr_component_mpos)), expr_component_mpos), /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        {\n                            /// @src 16:146:447  \"contract FallbackTest is Test {...\"\n                            revert(/** @src 0:1873:1880  \"_failed\" */ _1, _1)\n                        }\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        let value := mload(/** @src 0:2312:2339  \"abi.decode(retdata, (bool))\" */ add(expr_component_mpos, /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3))\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if iszero(eq(value, /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ iszero(iszero(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ value))))\n                        {\n                            revert(/** @src 0:1873:1880  \"_failed\" */ _1, _1)\n                        }\n                        /// @src 0:2297:2339  \"globalFailed = abi.decode(retdata, (bool))\"\n                        var_globalFailed := value\n                    }\n                    /// @src 0:2367:2386  \"return globalFailed\"\n                    var := var_globalFailed\n                    leave\n                }\n                default /// @src 0:1869:2397  \"if (_failed) {...\"\n                {\n                    /// @src 0:1896:1910  \"return _failed\"\n                    var := /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ and(shr(8, sload(/** @src 0:1873:1880  \"_failed\" */ _1)), /** @src 16:146:447  \"contract FallbackTest is Test {...\" */ 0xff)\n                    /// @src 0:1896:1910  \"return _failed\"\n                    leave\n                }\n            }\n        }\n        /// @use-src 10:\"src/ethernaut/level_1/Fallback.sol\"\n        object \"Fallback_23813\" {\n            code {\n                {\n                    /// @src 10:116:1099  \"contract Fallback {...\"\n                    let _1 := memoryguard(0x80)\n                    mstore(64, _1)\n                    sstore(/** @src 10:293:320  \"owner = payable(msg.sender)\" */ 0x01, /** @src 10:116:1099  \"contract Fallback {...\" */ or(and(sload(/** @src 10:293:320  \"owner = payable(msg.sender)\" */ 0x01), /** @src 10:116:1099  \"contract Fallback {...\" */ not(sub(shl(160, 1), 1))), /** @src 10:309:319  \"msg.sender\" */ caller()))\n                    /// @src 10:116:1099  \"contract Fallback {...\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 10:309:319  \"msg.sender\" */ caller())\n                    /// @src 10:116:1099  \"contract Fallback {...\"\n                    mstore(0x20, /** @src -1:-1:-1 */ 0)\n                    /// @src 10:116:1099  \"contract Fallback {...\"\n                    sstore(keccak256(/** @src -1:-1:-1 */ 0, /** @src 10:116:1099  \"contract Fallback {...\" */ 64), /** @src 10:358:374  \"1000 * (1 ether)\" */ 0x3635c9adc5dea00000)\n                    /// @src 10:116:1099  \"contract Fallback {...\"\n                    let _2 := datasize(\"Fallback_23813_deployed\")\n                    codecopy(_1, dataoffset(\"Fallback_23813_deployed\"), _2)\n                    return(_1, _2)\n                }\n            }\n            /// @use-src 10:\"src/ethernaut/level_1/Fallback.sol\"\n            object \"Fallback_23813_deployed\" {\n                code {\n                    {\n                        /// @src 10:116:1099  \"contract Fallback {...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let _3 := 0\n                            switch shr(224, calldataload(_3))\n                            case 0x3ccfd60b {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                let value := and(sload(/** @src 10:440:445  \"owner\" */ 0x01), /** @src 10:116:1099  \"contract Fallback {...\" */ sub(shl(160, 1), 1))\n                                if iszero(/** @src 10:426:445  \"msg.sender == owner\" */ eq(/** @src 10:426:436  \"msg.sender\" */ caller(), /** @src 10:426:445  \"msg.sender == owner\" */ value))\n                                /// @src 10:116:1099  \"contract Fallback {...\"\n                                {\n                                    mstore(_1, shl(229, 4594637))\n                                    mstore(add(_1, 4), 32)\n                                    mstore(add(_1, 36), 23)\n                                    mstore(add(_1, 68), \"caller is not the owner\")\n                                    revert(_1, 100)\n                                }\n                                /// @src 10:926:947  \"address(this).balance\"\n                                let expr := selfbalance()\n                                /// @src 10:911:948  \"owner.transfer(address(this).balance)\"\n                                let _4 := /** @src 10:116:1099  \"contract Fallback {...\" */ _3\n                                /// @src 10:911:948  \"owner.transfer(address(this).balance)\"\n                                if iszero(expr) { _4 := 2300 }\n                                if iszero(call(_4, value, expr, /** @src 10:116:1099  \"contract Fallback {...\" */ _3, _3, _3, _3))\n                                /// @src 10:911:948  \"owner.transfer(address(this).balance)\"\n                                {\n                                    /// @src 10:116:1099  \"contract Fallback {...\"\n                                    let pos := mload(_2)\n                                    returndatacopy(pos, _3, returndatasize())\n                                    revert(pos, returndatasize())\n                                }\n                                return(mload(_2), _3)\n                            }\n                            case 0x42e94c90 {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                                let value_1 := calldataload(4)\n                                let _5 := and(value_1, sub(shl(160, 1), 1))\n                                if iszero(eq(value_1, _5)) { revert(_3, _3) }\n                                mstore(_3, _5)\n                                mstore(32, _3)\n                                let _6 := sload(keccak256(_3, _2))\n                                let memPos := mload(_2)\n                                mstore(memPos, _6)\n                                return(memPos, 32)\n                            }\n                            case 0x8da5cb5b {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                let value_2 := and(sload(/** @src 10:226:254  \"address payable public owner\" */ 1), /** @src 10:116:1099  \"contract Fallback {...\" */ sub(shl(160, 1), 1))\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, value_2)\n                                return(memPos_1, 32)\n                            }\n                            case 0xd7bb99ba {\n                                if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                if iszero(/** @src 10:552:575  \"msg.value < 0.001 ether\" */ lt(/** @src 10:552:561  \"msg.value\" */ callvalue(), /** @src 10:564:575  \"0.001 ether\" */ 0x038d7ea4c68000))\n                                /// @src 10:116:1099  \"contract Fallback {...\"\n                                { revert(_3, _3) }\n                                mstore(_3, /** @src 10:600:610  \"msg.sender\" */ caller())\n                                /// @src 10:116:1099  \"contract Fallback {...\"\n                                mstore(0x20, _3)\n                                let dataSlot := keccak256(_3, _2)\n                                let _7 := sload(/** @src 10:586:624  \"contributions[msg.sender] += msg.value\" */ dataSlot)\n                                /// @src 10:116:1099  \"contract Fallback {...\"\n                                if gt(_7, not(/** @src 10:552:561  \"msg.value\" */ callvalue()))\n                                /// @src 10:116:1099  \"contract Fallback {...\"\n                                {\n                                    mstore(_3, shl(224, 0x4e487b71))\n                                    mstore(4, 0x11)\n                                    revert(_3, 0x24)\n                                }\n                                sstore(dataSlot, add(_7, /** @src 10:552:561  \"msg.value\" */ callvalue()))\n                                /// @src 10:116:1099  \"contract Fallback {...\"\n                                mstore(_3, /** @src 10:600:610  \"msg.sender\" */ caller())\n                                /// @src 10:116:1099  \"contract Fallback {...\"\n                                mstore(0x20, _3)\n                                let _8 := sload(keccak256(_3, _2))\n                                let _9 := sload(/** @src 10:680:685  \"owner\" */ 0x01)\n                                /// @src 10:116:1099  \"contract Fallback {...\"\n                                mstore(_3, and(_9, sub(shl(160, 1), 1)))\n                                /// @src 10:634:740  \"if (contributions[msg.sender] > contributions[owner]) {...\"\n                                if /** @src 10:638:686  \"contributions[msg.sender] > contributions[owner]\" */ gt(_8, /** @src 10:116:1099  \"contract Fallback {...\" */ sload(keccak256(_3, _2)))\n                                /// @src 10:634:740  \"if (contributions[msg.sender] > contributions[owner]) {...\"\n                                {\n                                    /// @src 10:116:1099  \"contract Fallback {...\"\n                                    sstore(/** @src 10:680:685  \"owner\" */ 0x01, /** @src 10:116:1099  \"contract Fallback {...\" */ or(and(_9, shl(160, 0xffffffffffffffffffffffff)), /** @src 10:600:610  \"msg.sender\" */ caller()))\n                                }\n                                /// @src 10:116:1099  \"contract Fallback {...\"\n                                return(mload(_2), _3)\n                            }\n                            case 0xf10fdf5c {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                mstore(_3, /** @src 10:840:850  \"msg.sender\" */ caller())\n                                /// @src 10:116:1099  \"contract Fallback {...\"\n                                mstore(0x20, _3)\n                                let _10 := sload(keccak256(_3, _2))\n                                let memPos_2 := mload(_2)\n                                mstore(memPos_2, _10)\n                                return(memPos_2, 0x20)\n                            }\n                        }\n                        if iszero(calldatasize())\n                        {\n                            /// @src 10:1006:1052  \"msg.value > 0 && contributions[msg.sender] > 0\"\n                            let expr_1 := /** @src 10:1006:1019  \"msg.value > 0\" */ iszero(iszero(/** @src 10:1006:1015  \"msg.value\" */ callvalue()))\n                            /// @src 10:1006:1052  \"msg.value > 0 && contributions[msg.sender] > 0\"\n                            if expr_1\n                            {\n                                /// @src 10:116:1099  \"contract Fallback {...\"\n                                mstore(/** @src 10:1018:1019  \"0\" */ 0x00, /** @src 10:1037:1047  \"msg.sender\" */ caller())\n                                /// @src 10:116:1099  \"contract Fallback {...\"\n                                mstore(0x20, /** @src 10:1018:1019  \"0\" */ 0x00)\n                                /// @src 10:1006:1052  \"msg.value > 0 && contributions[msg.sender] > 0\"\n                                expr_1 := /** @src 10:1023:1052  \"contributions[msg.sender] > 0\" */ iszero(iszero(/** @src 10:116:1099  \"contract Fallback {...\" */ sload(keccak256(/** @src 10:1018:1019  \"0\" */ 0x00, /** @src 10:116:1099  \"contract Fallback {...\" */ _2))))\n                            }\n                            if iszero(expr_1)\n                            {\n                                revert(/** @src 10:1018:1019  \"0\" */ 0x00, 0x00)\n                            }\n                            /// @src 10:116:1099  \"contract Fallback {...\"\n                            sstore(/** @src 10:1063:1090  \"owner = payable(msg.sender)\" */ 0x01, /** @src 10:116:1099  \"contract Fallback {...\" */ or(and(sload(/** @src 10:1063:1090  \"owner = payable(msg.sender)\" */ 0x01), /** @src 10:116:1099  \"contract Fallback {...\" */ shl(160, 0xffffffffffffffffffffffff)), /** @src 10:1079:1089  \"msg.sender\" */ caller()))\n                            /// @src 10:116:1099  \"contract Fallback {...\"\n                            stop()\n                        }\n                        revert(0, 0)\n                    }\n                }\n                data \".metadata\" hex\"a264697066735822122094398585dd1d9e2f10f75d309f1c3d117f3c0b59f10a83458864d723094ea00f64736f6c634300080f0033\"\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212204a2683db0cc5e0d1c4b3e251c04464f611825533b277df26a582a3cf0e636c6164736f6c634300080f0033\"\n    }\n}\n",
  "ast": {
    "absolutePath": "test/ethernaut/Fallback.t.sol",
    "id": 24106,
    "exportedSymbols": {
      "DSTest": [
        1786
      ],
      "Fallback": [
        23813
      ],
      "FallbackTest": [
        24105
      ],
      "SafeMath": [
        23538
      ],
      "Script": [
        2049
      ],
      "StdStorage": [
        5077
      ],
      "Test": [
        4979
      ],
      "Vm": [
        7098
      ],
      "console": [
        15162
      ],
      "console2": [
        23226
      ],
      "stdError": [
        5049
      ],
      "stdJson": [
        2409
      ],
      "stdMath": [
        6318
      ],
      "stdStorage": [
        6179
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:409:16",
    "nodes": [
      {
        "id": 24052,
        "nodeType": "PragmaDirective",
        "src": "39:24:16",
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".13"
        ]
      },
      {
        "id": 24053,
        "nodeType": "ImportDirective",
        "src": "65:28:16",
        "absolutePath": "lib/forge-std/src/Test.sol",
        "file": "forge-std/Test.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24106,
        "sourceUnit": 6319,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 24054,
        "nodeType": "ImportDirective",
        "src": "94:50:16",
        "absolutePath": "src/ethernaut/level_1/Fallback.sol",
        "file": "../../src/ethernaut/level_1/Fallback.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24106,
        "sourceUnit": 23814,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 24105,
        "nodeType": "ContractDefinition",
        "src": "146:301:16",
        "nodes": [
          {
            "id": 24059,
            "nodeType": "VariableDeclaration",
            "src": "182:18:16",
            "constant": false,
            "functionSelector": "eb666475",
            "mutability": "mutable",
            "name": "fb",
            "nameLocation": "198:2:16",
            "scope": 24105,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Fallback_$23813",
              "typeString": "contract Fallback"
            },
            "typeName": {
              "id": 24058,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 24057,
                "name": "Fallback",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 23813,
                "src": "182:8:16"
              },
              "referencedDeclaration": 23813,
              "src": "182:8:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Fallback_$23813",
                "typeString": "contract Fallback"
              }
            },
            "visibility": "public"
          },
          {
            "id": 24070,
            "nodeType": "FunctionDefinition",
            "src": "207:60:16",
            "body": {
              "id": 24069,
              "nodeType": "Block",
              "src": "231:36:16",
              "statements": [
                {
                  "expression": {
                    "id": 24067,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24062,
                      "name": "fb",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24059,
                      "src": "241:2:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Fallback_$23813",
                        "typeString": "contract Fallback"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 24065,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "246:12:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_payable$__$returns$_t_contract$_Fallback_$23813_$",
                          "typeString": "function () payable returns (contract Fallback)"
                        },
                        "typeName": {
                          "id": 24064,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 24063,
                            "name": "Fallback",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 23813,
                            "src": "250:8:16"
                          },
                          "referencedDeclaration": 23813,
                          "src": "250:8:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Fallback_$23813",
                            "typeString": "contract Fallback"
                          }
                        }
                      },
                      "id": 24066,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "246:14:16",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Fallback_$23813",
                        "typeString": "contract Fallback"
                      }
                    },
                    "src": "241:19:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Fallback_$23813",
                      "typeString": "contract Fallback"
                    }
                  },
                  "id": 24068,
                  "nodeType": "ExpressionStatement",
                  "src": "241:19:16"
                }
              ]
            },
            "functionSelector": "0a9254e4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setUp",
            "nameLocation": "216:5:16",
            "parameters": {
              "id": 24060,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "221:2:16"
            },
            "returnParameters": {
              "id": 24061,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "231:0:16"
            },
            "scope": 24105,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 24104,
            "nodeType": "FunctionDefinition",
            "src": "273:172:16",
            "body": {
              "id": 24103,
              "nodeType": "Block",
              "src": "302:143:16",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 24078,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "328:4:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_FallbackTest_$24105",
                              "typeString": "contract FallbackTest"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_FallbackTest_$24105",
                              "typeString": "contract FallbackTest"
                            }
                          ],
                          "id": 24077,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "320:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 24076,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "320:7:16",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 24079,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "320:13:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "31",
                        "id": 24080,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "335:7:16",
                        "subdenomination": "ether",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        },
                        "value": "1"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        }
                      ],
                      "expression": {
                        "id": 24073,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1817,
                        "src": "312:2:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$7098",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 24075,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "deal",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6572,
                      "src": "312:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256) external"
                      }
                    },
                    "id": 24081,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "312:31:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24082,
                  "nodeType": "ExpressionStatement",
                  "src": "312:31:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "",
                        "id": 24090,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "389:2:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "id": 24085,
                              "name": "fb",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 24059,
                              "src": "362:2:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Fallback_$23813",
                                "typeString": "contract Fallback"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Fallback_$23813",
                                "typeString": "contract Fallback"
                              }
                            ],
                            "id": 24084,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "354:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 24083,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "354:7:16",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 24086,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "354:11:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 24087,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "call",
                        "nodeType": "MemberAccess",
                        "src": "354:16:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                        }
                      },
                      "id": 24089,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "hexValue": "302e31",
                          "id": 24088,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "378:9:16",
                          "subdenomination": "ether",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_100000000000000000_by_1",
                            "typeString": "int_const 100000000000000000"
                          },
                          "value": "0.1"
                        }
                      ],
                      "src": "354:34:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 24091,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "354:38:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "id": 24092,
                  "nodeType": "ExpressionStatement",
                  "src": "354:38:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 24094,
                            "name": "fb",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24059,
                            "src": "412:2:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Fallback_$23813",
                              "typeString": "contract Fallback"
                            }
                          },
                          "id": 24095,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "owner",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 23688,
                          "src": "412:8:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_address_payable_$",
                            "typeString": "function () view external returns (address payable)"
                          }
                        },
                        "id": 24096,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "412:10:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 24099,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "432:4:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_FallbackTest_$24105",
                              "typeString": "contract FallbackTest"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_FallbackTest_$24105",
                              "typeString": "contract FallbackTest"
                            }
                          ],
                          "id": 24098,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "424:7:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 24097,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "424:7:16",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 24100,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "424:13:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 24093,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3167,
                        3192,
                        3205,
                        3221,
                        3263,
                        3305,
                        3347,
                        3384,
                        3421,
                        3458,
                        320,
                        345,
                        375,
                        400,
                        459,
                        484,
                        514,
                        539,
                        1639,
                        1674
                      ],
                      "referencedDeclaration": 320,
                      "src": "403:8:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 24101,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "403:35:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24102,
                  "nodeType": "ExpressionStatement",
                  "src": "403:35:16"
                }
              ]
            },
            "functionSelector": "6f2db99c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testAttack",
            "nameLocation": "282:10:16",
            "parameters": {
              "id": 24071,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "292:2:16"
            },
            "returnParameters": {
              "id": 24072,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "302:0:16"
            },
            "scope": 24105,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 24055,
              "name": "Test",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 4979,
              "src": "171:4:16"
            },
            "id": 24056,
            "nodeType": "InheritanceSpecifier",
            "src": "171:4:16"
          }
        ],
        "canonicalName": "FallbackTest",
        "contractDependencies": [
          23813
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          24105,
          4979,
          2049,
          1786
        ],
        "name": "FallbackTest",
        "nameLocation": "155:12:16",
        "scope": 24106,
        "usedErrors": []
      }
    ],
    "license": "UNLICENSED"
  },
  "id": 16
}