{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b5060405161066c38038061066c83398101604081905261002f9161008e565b600061003b8482610202565b506001600160a01b03909116600090815260016020526040902055506102c1565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b038116811461008957600080fd5b919050565b6000806000606084860312156100a357600080fd5b83516001600160401b03808211156100ba57600080fd5b818601915086601f8301126100ce57600080fd5b8151818111156100e0576100e061005c565b604051601f8201601f19908116603f011681019083821181831017156101085761010861005c565b8160405282815260209350898484870101111561012457600080fd5b600091505b828210156101465784820184015181830185015290830190610129565b828211156101575760008484830101525b9650610167915050868201610072565b93505050604084015190509250925092565b600181811c9082168061018d57607f821691505b6020821081036101ad57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101fd57600081815260208120601f850160051c810160208610156101da5750805b601f850160051c820191505b818110156101f9578281556001016101e6565b5050505b505050565b81516001600160401b0381111561021b5761021b61005c565b61022f816102298454610179565b846101b3565b602080601f831160018114610264576000841561024c5750858301515b600019600386901b1c1916600185901b1785556101f9565b600085815260208120601f198616915b8281101561029357888601518255948401946001909101908401610274565b50858210156102b15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61039c806102d06000396000f3fe6080604052600436106100425760003560e01c8062f55d9d1461006b57806306fdde031461008d57806327e235e3146100b8578063a9059cbb146100f357600080fd5b366100665761005234600a610113565b336000908152600160205260409020819055005b600080fd5b34801561007757600080fd5b5061008b610086366004610242565b610126565b005b34801561009957600080fd5b506100a2610132565b6040516100af919061025f565b60405180910390f35b3480156100c457600080fd5b506100e56100d3366004610242565b60016020526000908152604090205481565b6040519081526020016100af565b3480156100ff57600080fd5b5061008b61010e3660046102b4565b6101c0565b600061011f82846102f6565b9392505050565b806001600160a01b0316ff5b6000805461013f90610315565b80601f016020809104026020016040519081016040528092919081815260200182805461016b90610315565b80156101b85780601f1061018d576101008083540402835291602001916101b8565b820191906000526020600020905b81548152906001019060200180831161019b57829003601f168201915b505050505081565b336000908152600160205260409020548111156101dc57600080fd5b336000908152600160205260409020546101f6908261021e565b33600090815260016020526040808220929092556001600160a01b0393909316835290912055565b600061011f828461034f565b6001600160a01b038116811461023f57600080fd5b50565b60006020828403121561025457600080fd5b813561011f8161022a565b600060208083528351808285015260005b8181101561028c57858101830151858201604001528201610270565b8181111561029e576000604083870101525b50601f01601f1916929092016040019392505050565b600080604083850312156102c757600080fd5b82356102d28161022a565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610310576103106102e0565b500290565b600181811c9082168061032957607f821691505b60208210810361034957634e487b7160e01b600052602260045260246000fd5b50919050565b600082821015610361576103616102e0565b50039056fea2646970667358221220c1e31b6f29249d319b108fca9a22cdd42fbbcf5e84fba1f49a52387f164374ad64736f6c634300080f0033",
    "sourceMap": "308:856:12:-:0;;;484:179;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;599:4;:12;606:5;599:4;:12;:::i;:::-;-1:-1:-1;;;;;;621:18:12;;;;;;;:8;:18;;;;;:35;-1:-1:-1;308:856:12;;14:127:20;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:177;225:13;;-1:-1:-1;;;;;267:31:20;;257:42;;247:70;;313:1;310;303:12;247:70;146:177;;;:::o;328:1235::-;426:6;434;442;495:2;483:9;474:7;470:23;466:32;463:52;;;511:1;508;501:12;463:52;538:16;;-1:-1:-1;;;;;603:14:20;;;600:34;;;630:1;627;620:12;600:34;668:6;657:9;653:22;643:32;;713:7;706:4;702:2;698:13;694:27;684:55;;735:1;732;725:12;684:55;764:2;758:9;786:2;782;779:10;776:36;;;792:18;;:::i;:::-;867:2;861:9;835:2;921:13;;-1:-1:-1;;917:22:20;;;941:2;913:31;909:40;897:53;;;965:18;;;985:22;;;962:46;959:72;;;1011:18;;:::i;:::-;1051:10;1047:2;1040:22;1086:2;1078:6;1071:18;1108:4;1098:14;;1149:7;1144:2;1139;1135;1131:11;1127:20;1124:33;1121:53;;;1170:1;1167;1160:12;1121:53;1192:1;1183:10;;1202:129;1216:2;1213:1;1210:9;1202:129;;;1304:10;;;1300:19;;1294:26;1273:14;;;1269:23;;1262:59;1227:10;;;;1202:129;;;1349:2;1346:1;1343:9;1340:80;;;1408:1;1403:2;1398;1390:6;1386:15;1382:24;1375:35;1340:80;1439:6;-1:-1:-1;1464:49:20;;-1:-1:-1;;1494:18:20;;;1464:49;:::i;:::-;1454:59;;;;1553:2;1542:9;1538:18;1532:25;1522:35;;328:1235;;;;;:::o;1568:380::-;1647:1;1643:12;;;;1690;;;1711:61;;1765:4;1757:6;1753:17;1743:27;;1711:61;1818:2;1810:6;1807:14;1787:18;1784:38;1781:161;;1864:10;1859:3;1855:20;1852:1;1845:31;1899:4;1896:1;1889:15;1927:4;1924:1;1917:15;1781:161;;1568:380;;;:::o;2079:545::-;2181:2;2176:3;2173:11;2170:448;;;2217:1;2242:5;2238:2;2231:17;2287:4;2283:2;2273:19;2357:2;2345:10;2341:19;2338:1;2334:27;2328:4;2324:38;2393:4;2381:10;2378:20;2375:47;;;-1:-1:-1;2416:4:20;2375:47;2471:2;2466:3;2462:12;2459:1;2455:20;2449:4;2445:31;2435:41;;2526:82;2544:2;2537:5;2534:13;2526:82;;;2589:17;;;2570:1;2559:13;2526:82;;;2530:3;;;2170:448;2079:545;;;:::o;2800:1352::-;2920:10;;-1:-1:-1;;;;;2942:30:20;;2939:56;;;2975:18;;:::i;:::-;3004:97;3094:6;3054:38;3086:4;3080:11;3054:38;:::i;:::-;3048:4;3004:97;:::i;:::-;3156:4;;3220:2;3209:14;;3237:1;3232:663;;;;3939:1;3956:6;3953:89;;;-1:-1:-1;4008:19:20;;;4002:26;3953:89;-1:-1:-1;;2757:1:20;2753:11;;;2749:24;2745:29;2735:40;2781:1;2777:11;;;2732:57;4055:81;;3202:944;;3232:663;2026:1;2019:14;;;2063:4;2050:18;;-1:-1:-1;;3268:20:20;;;3386:236;3400:7;3397:1;3394:14;3386:236;;;3489:19;;;3483:26;3468:42;;3581:27;;;;3549:1;3537:14;;;;3416:19;;3386:236;;;3390:3;3650:6;3641:7;3638:19;3635:201;;;3711:19;;;3705:26;-1:-1:-1;;3794:1:20;3790:14;;;3806:3;3786:24;3782:37;3778:42;3763:58;3748:74;;3635:201;-1:-1:-1;;;;;3882:1:20;3866:14;;;3862:22;3849:36;;-1:-1:-1;2800:1352:20:o;:::-;308:856:12;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106100425760003560e01c8062f55d9d1461006b57806306fdde031461008d57806327e235e3146100b8578063a9059cbb146100f357600080fd5b366100665761005234600a610113565b336000908152600160205260409020819055005b600080fd5b34801561007757600080fd5b5061008b610086366004610242565b610126565b005b34801561009957600080fd5b506100a2610132565b6040516100af919061025f565b60405180910390f35b3480156100c457600080fd5b506100e56100d3366004610242565b60016020526000908152604090205481565b6040519081526020016100af565b3480156100ff57600080fd5b5061008b61010e3660046102b4565b6101c0565b600061011f82846102f6565b9392505050565b806001600160a01b0316ff5b6000805461013f90610315565b80601f016020809104026020016040519081016040528092919081815260200182805461016b90610315565b80156101b85780601f1061018d576101008083540402835291602001916101b8565b820191906000526020600020905b81548152906001019060200180831161019b57829003601f168201915b505050505081565b336000908152600160205260409020548111156101dc57600080fd5b336000908152600160205260409020546101f6908261021e565b33600090815260016020526040808220929092556001600160a01b0393909316835290912055565b600061011f828461034f565b6001600160a01b038116811461023f57600080fd5b50565b60006020828403121561025457600080fd5b813561011f8161022a565b600060208083528351808285015260005b8181101561028c57858101830151858201604001528201610270565b8181111561029e576000604083870101525b50601f01601f1916929092016040019392505050565b600080604083850312156102c757600080fd5b82356102d28161022a565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610310576103106102e0565b500290565b600181811c9082168061032957607f821691505b60208210810361034957634e487b7160e01b600052602260045260246000fd5b50919050565b600082821015610361576103616102e0565b50039056fea2646970667358221220c1e31b6f29249d319b108fca9a22cdd42fbbcf5e84fba1f49a52387f164374ad64736f6c634300080f0033",
    "sourceMap": "308:856:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;771:17;:9;785:2;771:13;:17::i;:::-;757:10;748:20;;;;:8;:20;;;;;:40;;;;308:856;;;;1083:79;;;;;;;;;;-1:-1:-1;1083:79:12;;;;;:::i;:::-;;:::i;:::-;;391:18;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;415:43;;;;;;;;;;-1:-1:-1;415:43:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1434:25:20;;;1422:2;1407:18;415:43:12;1288:177:20;834:211:12;;;;;;;;;;-1:-1:-1;834:211:12;;;;;:::i;:::-;;:::i;3465:96:7:-;3523:7;3549:5;3553:1;3549;:5;:::i;:::-;3542:12;3465:96;-1:-1:-1;;;3465:96:7:o;1083:79:12:-;1151:3;-1:-1:-1;;;;;1138:17:12;;391:18;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;834:211::-;916:10;907:20;;;;:8;:20;;;;;;:31;-1:-1:-1;907:31:12;899:40;;;;;;981:10;972:20;;;;:8;:20;;;;;;:33;;997:7;972:24;:33::i;:::-;958:10;949:20;;;;:8;:20;;;;;;:56;;;;-1:-1:-1;;;;;1015:13:12;;;;;;;;;:23;834:211::o;3122:96:7:-;3180:7;3206:5;3210:1;3206;:5;:::i;14:139:20:-;-1:-1:-1;;;;;97:31:20;;87:42;;77:70;;143:1;140;133:12;77:70;14:139;:::o;158:263::-;225:6;278:2;266:9;257:7;253:23;249:32;246:52;;;294:1;291;284:12;246:52;333:9;320:23;352:39;385:5;352:39;:::i;426:597::-;538:4;567:2;596;585:9;578:21;628:6;622:13;671:6;666:2;655:9;651:18;644:34;696:1;706:140;720:6;717:1;714:13;706:140;;;815:14;;;811:23;;805:30;781:17;;;800:2;777:26;770:66;735:10;;706:140;;;864:6;861:1;858:13;855:91;;;934:1;929:2;920:6;909:9;905:22;901:31;894:42;855:91;-1:-1:-1;1007:2:20;986:15;-1:-1:-1;;982:29:20;967:45;;;;1014:2;963:54;;426:597;-1:-1:-1;;;426:597:20:o;1470:323::-;1538:6;1546;1599:2;1587:9;1578:7;1574:23;1570:32;1567:52;;;1615:1;1612;1605:12;1567:52;1654:9;1641:23;1673:39;1706:5;1673:39;:::i;:::-;1731:5;1783:2;1768:18;;;;1755:32;;-1:-1:-1;;;1470:323:20:o;1798:127::-;1859:10;1854:3;1850:20;1847:1;1840:31;1890:4;1887:1;1880:15;1914:4;1911:1;1904:15;1930:168;1970:7;2036:1;2032;2028:6;2024:14;2021:1;2018:21;2013:1;2006:9;1999:17;1995:45;1992:71;;;2043:18;;:::i;:::-;-1:-1:-1;2083:9:20;;1930:168::o;2103:380::-;2182:1;2178:12;;;;2225;;;2246:61;;2300:4;2292:6;2288:17;2278:27;;2246:61;2353:2;2345:6;2342:14;2322:18;2319:38;2316:161;;2399:10;2394:3;2390:20;2387:1;2380:31;2434:4;2431:1;2424:15;2462:4;2459:1;2452:15;2316:161;;2103:380;;;:::o;2488:125::-;2528:4;2556:1;2553;2550:8;2547:34;;;2561:18;;:::i;:::-;-1:-1:-1;2598:9:20;;2488:125::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "balances(address)": "27e235e3",
    "destroy(address)": "00f55d9d",
    "name()": "06fdde03",
    "transfer(address,uint256)": "a9059cbb"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ethernaut/level_17/Recovery.sol\":\"SimpleToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]},\"src/ethernaut/level_17/Recovery.sol\":{\"keccak256\":\"0xa6e2abee62dec6d3b5b18b8ea3e99b43fca3265726cf1f168abef644fb1d4ab9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a5913c0d9b90a5d7445f4c971a22f5f3f478284e41c72ef532065390eefd3eaf\",\"dweb:/ipfs/QmSBFpTK4EkbqYHwh8WyX4BJkL2mTHTLMXpN85f3FTHrjM\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_initialSupply",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balances",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address payable",
              "name": "_to",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "destroy"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer"
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/src/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        ":solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/ethernaut/level_17/Recovery.sol": "SimpleToken"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol": {
        "keccak256": "0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e",
        "urls": [
          "bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65",
          "dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN"
        ],
        "license": "MIT"
      },
      "src/ethernaut/level_17/Recovery.sol": {
        "keccak256": "0xa6e2abee62dec6d3b5b18b8ea3e99b43fca3265726cf1f168abef644fb1d4ab9",
        "urls": [
          "bzz-raw://a5913c0d9b90a5d7445f4c971a22f5f3f478284e41c72ef532065390eefd3eaf",
          "dweb:/ipfs/QmSBFpTK4EkbqYHwh8WyX4BJkL2mTHTLMXpN85f3FTHrjM"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "irOptimized": "/// @use-src 12:\"src/ethernaut/level_17/Recovery.sol\"\nobject \"SimpleToken_24010\" {\n    code {\n        {\n            /// @src 12:308:1164  \"contract SimpleToken {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"SimpleToken_24010\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            let _1 := add(memoryDataOffset, argSize)\n            if slt(sub(_1, memoryDataOffset), 96)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 12:308:1164  \"contract SimpleToken {...\"\n            let offset := mload(memoryDataOffset)\n            let _2 := sub(shl(64, 1), 1)\n            if gt(offset, _2)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 12:308:1164  \"contract SimpleToken {...\"\n            let _3 := add(memoryDataOffset, offset)\n            let _4 := 0x1f\n            if iszero(slt(add(_3, _4), _1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 12:308:1164  \"contract SimpleToken {...\"\n            let _5 := mload(_3)\n            if gt(_5, _2)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ 0x24)\n            }\n            let _6 := 0x20\n            let _7 := not(31)\n            let array := allocate_memory(add(and(add(_5, _4), _7), _6))\n            mstore(array, _5)\n            if gt(add(add(_3, _5), _6), _1)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 12:308:1164  \"contract SimpleToken {...\"\n            let i := /** @src -1:-1:-1 */ 0\n            /// @src 12:308:1164  \"contract SimpleToken {...\"\n            for { } lt(i, _5) { i := add(i, _6) }\n            {\n                mstore(add(add(array, i), _6), mload(add(add(_3, i), _6)))\n            }\n            if gt(i, _5)\n            {\n                mstore(add(add(array, _5), _6), /** @src -1:-1:-1 */ 0)\n            }\n            /// @src 12:308:1164  \"contract SimpleToken {...\"\n            let value := mload(add(memoryDataOffset, _6))\n            let _8 := and(value, sub(shl(160, 1), 1))\n            if iszero(eq(value, _8))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 12:308:1164  \"contract SimpleToken {...\"\n            let value_1 := mload(add(memoryDataOffset, 64))\n            let newLen := mload(array)\n            if gt(newLen, _2)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ 0x24)\n            }\n            let _9 := sload(/** @src -1:-1:-1 */ 0)\n            /// @src 12:308:1164  \"contract SimpleToken {...\"\n            let length := /** @src -1:-1:-1 */ 0\n            /// @src 12:308:1164  \"contract SimpleToken {...\"\n            let _10 := 1\n            length := shr(_10, _9)\n            let outOfPlaceEncoding := and(_9, _10)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, _6))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ 0x24)\n            }\n            if gt(length, _4)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, 0)\n                /// @src 12:308:1164  \"contract SimpleToken {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ _6)\n                let deleteStart := add(data, shr(5, add(newLen, _4)))\n                if lt(newLen, _6) { deleteStart := data }\n                let _11 := add(data, shr(5, add(length, _4)))\n                let start := deleteStart\n                for { } lt(start, _11) { start := add(start, _10) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 12:308:1164  \"contract SimpleToken {...\"\n            let srcOffset := /** @src -1:-1:-1 */ 0\n            /// @src 12:308:1164  \"contract SimpleToken {...\"\n            srcOffset := _6\n            switch gt(newLen, _4)\n            case 1 {\n                let loopEnd := and(newLen, _7)\n                mstore(/** @src -1:-1:-1 */ 0, 0)\n                /// @src 12:308:1164  \"contract SimpleToken {...\"\n                let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ _6)\n                let i_1 := /** @src -1:-1:-1 */ 0\n                /// @src 12:308:1164  \"contract SimpleToken {...\"\n                for { } lt(i_1, loopEnd) { i_1 := add(i_1, _6) }\n                {\n                    sstore(dstPtr, mload(add(array, srcOffset)))\n                    dstPtr := add(dstPtr, _10)\n                    srcOffset := add(srcOffset, _6)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(array, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                }\n                sstore(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ add(shl(_10, newLen), _10))\n            }\n            default {\n                let value_2 := /** @src -1:-1:-1 */ 0\n                /// @src 12:308:1164  \"contract SimpleToken {...\"\n                if newLen\n                {\n                    value_2 := mload(add(array, srcOffset))\n                }\n                sstore(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ or(and(value_2, not(shr(shl(3, newLen), not(0)))), shl(_10, newLen)))\n            }\n            mstore(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ _8)\n            mstore(_6, _10)\n            sstore(keccak256(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ 64), value_1)\n            let _12 := mload(64)\n            let _13 := datasize(\"SimpleToken_24010_deployed\")\n            codecopy(_12, dataoffset(\"SimpleToken_24010_deployed\"), _13)\n            return(_12, _13)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n    }\n    /// @use-src 7:\"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\", 12:\"src/ethernaut/level_17/Recovery.sol\"\n    object \"SimpleToken_24010_deployed\" {\n        code {\n            {\n                /// @src 12:308:1164  \"contract SimpleToken {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x00f55d9d {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let value := calldataload(_3)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(_4, _4) }\n                        /// @src 12:1151:1154  \"_to\"\n                        selfdestruct(value)\n                    }\n                    case /** @src 12:308:1164  \"contract SimpleToken {...\" */ 0x06fdde03 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let ret := _4\n                        let slotValue := sload(_4)\n                        let length := _4\n                        let _5 := 1\n                        length := shr(_5, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, _5)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        let _6 := 32\n                        if eq(outOfPlaceEncoding, lt(length, _6))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x22)\n                            revert(_4, 0x24)\n                        }\n                        mstore(_1, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(_1, _6), and(slotValue, not(255)))\n                            ret := add(add(_1, shl(5, iszero(iszero(length)))), _6)\n                        }\n                        case 1 {\n                            mstore(_4, _4)\n                            let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let i := _4\n                            for { } lt(i, length) { i := add(i, _6) }\n                            {\n                                mstore(add(add(_1, i), _6), sload(dataPos))\n                                dataPos := add(dataPos, _5)\n                            }\n                            ret := add(add(_1, i), _6)\n                        }\n                        let _7 := not(31)\n                        let newFreePtr := add(_1, and(add(sub(ret, _1), 31), _7))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, _1))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        mstore(_2, newFreePtr)\n                        mstore(newFreePtr, _6)\n                        let length_1 := mload(_1)\n                        mstore(add(newFreePtr, _6), length_1)\n                        let i_1 := _4\n                        for { } lt(i_1, length_1) { i_1 := add(i_1, _6) }\n                        {\n                            mstore(add(add(newFreePtr, i_1), _2), mload(add(add(_1, i_1), _6)))\n                        }\n                        if gt(i_1, length_1)\n                        {\n                            mstore(add(add(newFreePtr, length_1), _2), _4)\n                        }\n                        return(newFreePtr, add(sub(add(newFreePtr, and(add(length_1, 31), _7)), newFreePtr), _2))\n                    }\n                    case 0x27e235e3 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        mstore(_4, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 12:415:458  \"mapping(address => uint256) public balances\" */ 1)\n                        /// @src 12:308:1164  \"contract SimpleToken {...\"\n                        let _8 := sload(keccak256(_4, _2))\n                        let memPos := mload(_2)\n                        mstore(memPos, _8)\n                        return(memPos, 32)\n                    }\n                    case 0xa9059cbb {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0 := abi_decode_address()\n                        let value_1 := calldataload(36)\n                        mstore(_4, /** @src 12:916:926  \"msg.sender\" */ caller())\n                        /// @src 12:308:1164  \"contract SimpleToken {...\"\n                        mstore(32, 1)\n                        if /** @src 12:907:938  \"balances[msg.sender] >= _amount\" */ lt(/** @src 12:308:1164  \"contract SimpleToken {...\" */ sload(keccak256(_4, _2)), /** @src 12:907:938  \"balances[msg.sender] >= _amount\" */ value_1)\n                        /// @src 12:308:1164  \"contract SimpleToken {...\"\n                        { revert(_4, _4) }\n                        let _9 := sload(keccak256(_4, _2))\n                        if lt(_9, value_1)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(_4, 36)\n                        }\n                        mstore(_4, /** @src 12:916:926  \"msg.sender\" */ caller())\n                        /// @src 12:308:1164  \"contract SimpleToken {...\"\n                        mstore(32, 1)\n                        sstore(keccak256(_4, _2), sub(_9, value_1))\n                        mstore(_4, and(value0, sub(shl(160, 1), 1)))\n                        sstore(keccak256(_4, _2), value_1)\n                        return(mload(_2), _4)\n                    }\n                }\n                if iszero(calldatasize())\n                {\n                    if and(iszero(iszero(/** @src 12:771:780  \"msg.value\" */ callvalue())), /** @src 12:308:1164  \"contract SimpleToken {...\" */ gt(/** @src 12:785:787  \"10\" */ 0x0a, /** @src 12:308:1164  \"contract SimpleToken {...\" */ div(not(0), /** @src 12:771:780  \"msg.value\" */ callvalue())))\n                    /// @src 12:308:1164  \"contract SimpleToken {...\"\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ shl(224, 0x4e487b71))\n                        mstore(_3, 0x11)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ 0x24)\n                    }\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 12:757:767  \"msg.sender\" */ caller())\n                    /// @src 12:308:1164  \"contract SimpleToken {...\"\n                    mstore(0x20, /** @src 12:748:756  \"balances\" */ 0x01)\n                    /// @src 12:308:1164  \"contract SimpleToken {...\"\n                    sstore(keccak256(/** @src -1:-1:-1 */ 0, /** @src 12:308:1164  \"contract SimpleToken {...\" */ _2), mul(/** @src 12:771:780  \"msg.value\" */ callvalue(), /** @src 12:785:787  \"10\" */ 0x0a))\n                    /// @src 12:308:1164  \"contract SimpleToken {...\"\n                    stop()\n                }\n                revert(0, 0)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212207aa0022b06ca40895309ed034b1efad02769df8d4fb35c0f68eb37f69442119b64736f6c634300080f0033\"\n    }\n}\n",
  "ast": {
    "absolutePath": "src/ethernaut/level_17/Recovery.sol",
    "id": 24011,
    "exportedSymbols": {
      "Recovery": [
        23919
      ],
      "SafeMath": [
        23538
      ],
      "SimpleToken": [
        24010
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:1133:12",
    "nodes": [
      {
        "id": 23900,
        "nodeType": "PragmaDirective",
        "src": "32:23:12",
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 23901,
        "nodeType": "ImportDirective",
        "src": "57:57:12",
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol",
        "file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24011,
        "sourceUnit": 23539,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 23919,
        "nodeType": "ContractDefinition",
        "src": "116:190:12",
        "nodes": [
          {
            "id": 23918,
            "nodeType": "FunctionDefinition",
            "src": "162:142:12",
            "body": {
              "id": 23917,
              "nodeType": "Block",
              "src": "237:67:12",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23911,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23903,
                        "src": "263:5:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "expression": {
                          "id": 23912,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "270:3:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 23913,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "270:10:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 23914,
                        "name": "_initialSupply",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23905,
                        "src": "282:14:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 23910,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "247:15:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_creation_nonpayable$_t_string_memory_ptr_$_t_address_$_t_uint256_$returns$_t_contract$_SimpleToken_$24010_$",
                        "typeString": "function (string memory,address,uint256) returns (contract SimpleToken)"
                      },
                      "typeName": {
                        "id": 23909,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 23908,
                          "name": "SimpleToken",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 24010,
                          "src": "251:11:12"
                        },
                        "referencedDeclaration": 24010,
                        "src": "251:11:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_SimpleToken_$24010",
                          "typeString": "contract SimpleToken"
                        }
                      }
                    },
                    "id": 23915,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "247:50:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_SimpleToken_$24010",
                      "typeString": "contract SimpleToken"
                    }
                  },
                  "id": 23916,
                  "nodeType": "ExpressionStatement",
                  "src": "247:50:12"
                }
              ]
            },
            "functionSelector": "3894e516",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "generateToken",
            "nameLocation": "171:13:12",
            "parameters": {
              "id": 23906,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23903,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "199:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 23918,
                  "src": "185:19:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 23902,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "185:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23905,
                  "mutability": "mutable",
                  "name": "_initialSupply",
                  "nameLocation": "214:14:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 23918,
                  "src": "206:22:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 23904,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "206:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "184:45:12"
            },
            "returnParameters": {
              "id": 23907,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "237:0:12"
            },
            "scope": 23919,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Recovery",
        "contractDependencies": [
          24010
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          23919
        ],
        "name": "Recovery",
        "nameLocation": "125:8:12",
        "scope": 24011,
        "usedErrors": []
      },
      {
        "id": 24010,
        "nodeType": "ContractDefinition",
        "src": "308:856:12",
        "nodes": [
          {
            "id": 23922,
            "nodeType": "UsingForDirective",
            "src": "335:27:12",
            "global": false,
            "libraryName": {
              "id": 23920,
              "name": "SafeMath",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 23538,
              "src": "341:8:12"
            },
            "typeName": {
              "id": 23921,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "354:7:12",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 23924,
            "nodeType": "VariableDeclaration",
            "src": "391:18:12",
            "constant": false,
            "functionSelector": "06fdde03",
            "mutability": "mutable",
            "name": "name",
            "nameLocation": "405:4:12",
            "scope": 24010,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 23923,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "391:6:12",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "public"
          },
          {
            "id": 23928,
            "nodeType": "VariableDeclaration",
            "src": "415:43:12",
            "constant": false,
            "functionSelector": "27e235e3",
            "mutability": "mutable",
            "name": "balances",
            "nameLocation": "450:8:12",
            "scope": 24010,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 23927,
              "keyType": {
                "id": 23925,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "423:7:12",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "415:27:12",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 23926,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "434:7:12",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 23948,
            "nodeType": "FunctionDefinition",
            "src": "484:179:12",
            "body": {
              "id": 23947,
              "nodeType": "Block",
              "src": "589:74:12",
              "statements": [
                {
                  "expression": {
                    "id": 23939,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 23937,
                      "name": "name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23924,
                      "src": "599:4:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 23938,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23930,
                      "src": "606:5:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "599:12:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 23940,
                  "nodeType": "ExpressionStatement",
                  "src": "599:12:12"
                },
                {
                  "expression": {
                    "id": 23945,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 23941,
                        "name": "balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23928,
                        "src": "621:8:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 23943,
                      "indexExpression": {
                        "id": 23942,
                        "name": "_creator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23932,
                        "src": "630:8:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "621:18:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 23944,
                      "name": "_initialSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23934,
                      "src": "642:14:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "621:35:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 23946,
                  "nodeType": "ExpressionStatement",
                  "src": "621:35:12"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 23935,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23930,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "519:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 23948,
                  "src": "505:19:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 23929,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "505:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23932,
                  "mutability": "mutable",
                  "name": "_creator",
                  "nameLocation": "542:8:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 23948,
                  "src": "534:16:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23931,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "534:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23934,
                  "mutability": "mutable",
                  "name": "_initialSupply",
                  "nameLocation": "568:14:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 23948,
                  "src": "560:22:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 23933,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "560:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "495:93:12"
            },
            "returnParameters": {
              "id": 23936,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "589:0:12"
            },
            "scope": 24010,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 23963,
            "nodeType": "FunctionDefinition",
            "src": "711:84:12",
            "body": {
              "id": 23962,
              "nodeType": "Block",
              "src": "738:57:12",
              "statements": [
                {
                  "expression": {
                    "id": 23960,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 23951,
                        "name": "balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23928,
                        "src": "748:8:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 23954,
                      "indexExpression": {
                        "expression": {
                          "id": 23952,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "757:3:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 23953,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "757:10:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "748:20:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "3130",
                          "id": 23958,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "785:2:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "id": 23955,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "771:3:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 23956,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "771:9:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 23957,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "mul",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 23432,
                        "src": "771:13:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 23959,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "771:17:12",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "748:40:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 23961,
                  "nodeType": "ExpressionStatement",
                  "src": "748:40:12"
                }
              ]
            },
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 23949,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "718:2:12"
            },
            "returnParameters": {
              "id": 23950,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "738:0:12"
            },
            "scope": 24010,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 23999,
            "nodeType": "FunctionDefinition",
            "src": "834:211:12",
            "body": {
              "id": 23998,
              "nodeType": "Block",
              "src": "889:156:12",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 23976,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 23971,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23928,
                            "src": "907:8:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 23974,
                          "indexExpression": {
                            "expression": {
                              "id": 23972,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "916:3:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 23973,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "916:10:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "907:20:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 23975,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 23967,
                          "src": "931:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "907:31:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 23970,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "899:7:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 23977,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "899:40:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23978,
                  "nodeType": "ExpressionStatement",
                  "src": "899:40:12"
                },
                {
                  "expression": {
                    "id": 23990,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 23979,
                        "name": "balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23928,
                        "src": "949:8:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 23982,
                      "indexExpression": {
                        "expression": {
                          "id": 23980,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "958:3:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 23981,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "958:10:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "949:20:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 23988,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 23967,
                          "src": "997:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "baseExpression": {
                            "id": 23983,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23928,
                            "src": "972:8:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 23986,
                          "indexExpression": {
                            "expression": {
                              "id": 23984,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "981:3:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 23985,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "981:10:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "972:20:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 23987,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 23417,
                        "src": "972:24:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 23989,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "972:33:12",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "949:56:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 23991,
                  "nodeType": "ExpressionStatement",
                  "src": "949:56:12"
                },
                {
                  "expression": {
                    "id": 23996,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 23992,
                        "name": "balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23928,
                        "src": "1015:8:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 23994,
                      "indexExpression": {
                        "id": 23993,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23965,
                        "src": "1024:3:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1015:13:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 23995,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23967,
                      "src": "1031:7:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1015:23:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 23997,
                  "nodeType": "ExpressionStatement",
                  "src": "1015:23:12"
                }
              ]
            },
            "functionSelector": "a9059cbb",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nameLocation": "843:8:12",
            "parameters": {
              "id": 23968,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23965,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "860:3:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 23999,
                  "src": "852:11:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23964,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "852:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23967,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "873:7:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 23999,
                  "src": "865:15:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 23966,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "865:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "851:30:12"
            },
            "returnParameters": {
              "id": 23969,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "889:0:12"
            },
            "scope": 24010,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 24009,
            "nodeType": "FunctionDefinition",
            "src": "1083:79:12",
            "body": {
              "id": 24008,
              "nodeType": "Block",
              "src": "1128:34:12",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24005,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24001,
                        "src": "1151:3:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 24004,
                      "name": "selfdestruct",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -21,
                      "src": "1138:12:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_selfdestruct_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable)"
                      }
                    },
                    "id": 24006,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1138:17:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24007,
                  "nodeType": "ExpressionStatement",
                  "src": "1138:17:12"
                }
              ]
            },
            "functionSelector": "00f55d9d",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "destroy",
            "nameLocation": "1092:7:12",
            "parameters": {
              "id": 24002,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24001,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "1116:3:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 24009,
                  "src": "1100:19:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 24000,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1100:15:12",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1099:21:12"
            },
            "returnParameters": {
              "id": 24003,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1128:0:12"
            },
            "scope": 24010,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "SimpleToken",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          24010
        ],
        "name": "SimpleToken",
        "nameLocation": "317:11:12",
        "scope": 24011,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 12
}