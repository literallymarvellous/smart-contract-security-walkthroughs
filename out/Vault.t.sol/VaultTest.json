{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "log_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "log_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "log_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "name": "log_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "log_named_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "val",
          "type": "bytes"
        }
      ],
      "name": "log_named_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "val",
          "type": "bytes32"
        }
      ],
      "name": "log_named_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        }
      ],
      "name": "log_named_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "val",
          "type": "string"
        }
      ],
      "name": "log_named_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "log_named_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "log_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "logs",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IS_SCRIPT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IS_TEST",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testAttack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vm",
      "outputs": [
        {
          "internalType": "contract Vm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b506108b0806100316000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ba414fa61161005b578063ba414fa6146100cc578063f8ccbf47146100e4578063fa7626d4146100f7578063fbfa77cf1461010457600080fd5b80630a9254e4146100825780633a7684631461008c5780636f2db99c146100c4575b600080fd5b61008a610117565b005b6100a7737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61008a61018e565b6100d461030d565b60405190151581526020016100bb565b6000546100d49062010000900460ff1681565b6000546100d49060ff1681565b6008546100a7906001600160a01b031681565b7ff5344ae61cf4101f013d1abd9a71a3f8bca32e82a7a6a3e4b7dc97ad6404d89d600981905560405161014990610672565b908152602001604051809103906000f08015801561016b573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b600854604051630667f9d760e41b81526001600160a01b03909116600482015260016024820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063667f9d70906044016020604051808303816000875af11580156101f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021a919061067f565b905061022881600954610438565b60085460405163764dad9d60e11b8152600481018390526001600160a01b039091169063ec9b5b3a90602401600060405180830381600087803b15801561026e57600080fd5b505af1158015610282573d6000803e3d6000fd5b50505050600860009054906101000a90046001600160a01b03166001600160a01b031663cf3090126040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fd9190610698565b1561030a5761030a6106c1565b50565b60008054610100900460ff161561032d5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104335760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916103bb917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610712565b60408051601f19818403018152908290526103d591610736565b6000604051808303816000865af19150503d8060008114610412576040519150601f19603f3d011682016040523d82523d6000602084013e610417565b606091505b509150508080602001905181019061042f9190610698565b9150505b919050565b808214610562577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104ac9060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b627974604082015264657333325d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f999181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f999181900360800190a1610562610566565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106615760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526106009291602001610712565b60408051601f198184030181529082905261061a91610736565b6000604051808303816000865af19150503d8060008114610657576040519150601f19603f3d011682016040523d82523d6000602084013e61065c565b606091505b505050505b6000805461ff001916610100179055565b6101388061074383390190565b60006020828403121561069157600080fd5b5051919050565b6000602082840312156106aa57600080fd5b815180151581146106ba57600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fd5b6000815160005b818110156106f857602081850181015186830152016106de565b81811115610707576000828601525b509290920192915050565b6001600160e01b031983168152600061072e60048301846106d7565b949350505050565b60006106ba82846106d756fe608060405234801561001057600080fd5b5060405161013838038061013883398101604081905261002f91610045565b6000805460ff191660019081179091555561005e565b60006020828403121561005757600080fd5b5051919050565b60cc8061006c6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063cf309012146037578063ec9b5b3a146057575b600080fd5b60005460439060ff1681565b604051901515815260200160405180910390f35b60666062366004607e565b6068565b005b8060015403607b576000805460ff191690555b50565b600060208284031215608f57600080fd5b503591905056fea26469706673582212204f625cd9d39a045d7559a7a90dfe87d78d8295490f520a18d8690141760fbd6b64736f6c634300080f0033a2646970667358221220bcb8b27ffb87737ec5702108440fae353a42c3dae8089bc878586a779c61abf064736f6c634300080f0033",
    "sourceMap": "143:805:19:-:0;;;1572:26:0;;;-1:-1:-1;;170:28:1;;;;;143:805:19;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ba414fa61161005b578063ba414fa6146100cc578063f8ccbf47146100e4578063fa7626d4146100f7578063fbfa77cf1461010457600080fd5b80630a9254e4146100825780633a7684631461008c5780636f2db99c146100c4575b600080fd5b61008a610117565b005b6100a7737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61008a61018e565b6100d461030d565b60405190151581526020016100bb565b6000546100d49062010000900460ff1681565b6000546100d49060ff1681565b6008546100a7906001600160a01b031681565b7ff5344ae61cf4101f013d1abd9a71a3f8bca32e82a7a6a3e4b7dc97ad6404d89d600981905560405161014990610672565b908152602001604051809103906000f08015801561016b573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b600854604051630667f9d760e41b81526001600160a01b03909116600482015260016024820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063667f9d70906044016020604051808303816000875af11580156101f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021a919061067f565b905061022881600954610438565b60085460405163764dad9d60e11b8152600481018390526001600160a01b039091169063ec9b5b3a90602401600060405180830381600087803b15801561026e57600080fd5b505af1158015610282573d6000803e3d6000fd5b50505050600860009054906101000a90046001600160a01b03166001600160a01b031663cf3090126040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fd9190610698565b1561030a5761030a6106c1565b50565b60008054610100900460ff161561032d5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104335760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916103bb917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610712565b60408051601f19818403018152908290526103d591610736565b6000604051808303816000865af19150503d8060008114610412576040519150601f19603f3d011682016040523d82523d6000602084013e610417565b606091505b509150508080602001905181019061042f9190610698565b9150505b919050565b808214610562577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104ac9060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b627974604082015264657333325d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f999181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f999181900360800190a1610562610566565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106615760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526106009291602001610712565b60408051601f198184030181529082905261061a91610736565b6000604051808303816000865af19150503d8060008114610657576040519150601f19603f3d011682016040523d82523d6000602084013e61065c565b606091505b505050505b6000805461ff001916610100179055565b6101388061074383390190565b60006020828403121561069157600080fd5b5051919050565b6000602082840312156106aa57600080fd5b815180151581146106ba57600080fd5b9392505050565b634e487b7160e01b600052600160045260246000fd5b6000815160005b818110156106f857602081850181015186830152016106de565b81811115610707576000828601525b509290920192915050565b6001600160e01b031983168152600061072e60048301846106d7565b949350505050565b60006106ba82846106d756fe608060405234801561001057600080fd5b5060405161013838038061013883398101604081905261002f91610045565b6000805460ff191660019081179091555561005e565b60006020828403121561005757600080fd5b5051919050565b60cc8061006c6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063cf309012146037578063ec9b5b3a146057575b600080fd5b60005460439060ff1681565b604051901515815260200160405180910390f35b60666062366004607e565b6068565b005b8060015403607b576000805460ff191690555b50565b600060208284031215608f57600080fd5b503591905056fea26469706673582212204f625cd9d39a045d7559a7a90dfe87d78d8295490f520a18d8690141760fbd6b64736f6c634300080f0033a2646970667358221220bcb8b27ffb87737ec5702108440fae353a42c3dae8089bc878586a779c61abf064736f6c634300080f0033",
    "sourceMap": "143:805:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;303:111;;;:::i;:::-;;321:38:1;;250:64;321:38;;;;;-1:-1:-1;;;;;189:32:20;;;171:51;;159:2;144:18;321:38:1;;;;;;;;420:526:19;;;:::i;1819:584:0:-;;;:::i;:::-;;;398:14:20;;391:22;373:41;;361:2;346:18;1819:584:0;233:187:20;170:28:1;;;;;;;;;;;;1572:26:0;;;;;;;;;214:18:19;;;;;-1:-1:-1;;;;;214:18:19;;;303:111;348:22;337:8;:33;;;388:19;;;;;:::i;:::-;794:25:20;;;782:2;767:18;388:19:19;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;380:5:19;:27;;-1:-1:-1;;;;;;380:27:19;-1:-1:-1;;;;;380:27:19;;;;;;;;;;303:111::o;420:526::-;780:5;;764:44;;-1:-1:-1;;;764:44:19;;-1:-1:-1;;;;;780:5:19;;;764:44;;;1004:51:20;780:5:19;1071:18:20;;;1064:34;744:17:19;;250:64:1;;764:7:19;;977:18:20;;764:44:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;744:64;;819:29;828:9;839:8;;819;:29::i;:::-;859:5;;:23;;-1:-1:-1;;;859:23:19;;;;;794:25:20;;;-1:-1:-1;;;;;859:5:19;;;;:12;;767:18:20;;859:23:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;924:5;;;;;;;;;-1:-1:-1;;;;;924:5:19;-1:-1:-1;;;;;924:12:19;;:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;923:15;916:23;;;;:::i;:::-;449:497;420:526::o;1819:584:0:-;1853:4;1873:7;;;;;;;1869:528;;;-1:-1:-1;1903:7:0;;;;;;;;1819:584::o;1869:528::-;1941:17;2990:42;2978:55;3059:16;1980:374;;2196:43;;;1671:64;2196:43;;;1004:51:20;;;-1:-1:-1;;;1071:18:20;;;1064:34;2196:43:0;;;;;;;;;977:18:20;;;2196:43:0;;;-1:-1:-1;;1671:64:0;;2086:175;;2135:34;;2086:175;;;:::i;:::-;;;;-1:-1:-1;;2086:175:0;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;2002:352;1980:374;2374:12;1819:584;-1:-1:-1;1819:584:0:o;4088:277::-;4156:1;4151;:6;4147:212;;4178:44;;;;;2732:2:20;2714:21;;;2771:2;2751:18;;;2744:30;2810:34;2805:2;2790:18;;2783:62;-1:-1:-1;;;2876:2:20;2861:18;;2854:35;2921:3;2906:19;;2530:401;4178:44:0;;;;;;;;4241:34;;;3148:21:20;;;3205:2;3185:18;;;3178:30;-1:-1:-1;;;3239:2:20;3224:18;;3217:40;3324:4;3309:20;;3302:36;;;4241:34:0;;;;;;;3289:3:20;4241:34:0;;;4294;;;3561:21:20;;;3618:2;3598:18;;;3591:30;-1:-1:-1;;;3652:2:20;3637:18;;3630:40;3737:4;3722:20;;3715:36;;;4294:34:0;;;;;;;3702:3:20;4294:34:0;;;4342:6;:4;:6::i;:::-;4088:277;;:::o;2410:424::-;2990:42;2978:55;3059:16;2445:359;;2645:67;;;1671:64;2645:67;;;3964:51:20;;;-1:-1:-1;;;4031:18:20;;;4024:34;;;;2705:4:0;4074:18:20;;;4067:34;2482:11:0;;1671:64;2579:43;;3937:18:20;;2645:67:0;;;-1:-1:-1;;2645:67:0;;;;;;;;;;2534:196;;;2645:67;2534:196;;:::i;:::-;;;;-1:-1:-1;;2534:196:0;;;;;;;;;;2499:245;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2445:359:0;2813:7;:14;;-1:-1:-1;;2813:14:0;;;;;2410:424::o;-1:-1:-1:-;;;;;;;;:::o;1109:184:20:-;1179:6;1232:2;1220:9;1211:7;1207:23;1203:32;1200:52;;;1248:1;1245;1238:12;1200:52;-1:-1:-1;1271:16:20;;1109:184;-1:-1:-1;1109:184:20:o;1298:277::-;1365:6;1418:2;1406:9;1397:7;1393:23;1389:32;1386:52;;;1434:1;1431;1424:12;1386:52;1466:9;1460:16;1519:5;1512:13;1505:21;1498:5;1495:32;1485:60;;1541:1;1538;1531:12;1485:60;1564:5;1298:277;-1:-1:-1;;;1298:277:20:o;1580:127::-;1641:10;1636:3;1632:20;1629:1;1622:31;1672:4;1669:1;1662:15;1696:4;1693:1;1686:15;1712:336;1753:3;1791:5;1785:12;1815:1;1825:128;1839:6;1836:1;1833:13;1825:128;;;1936:4;1921:13;;;1917:24;;1911:31;1898:11;;;1891:52;1854:12;1825:128;;;1971:6;1968:1;1965:13;1962:48;;;2006:1;1997:6;1992:3;1988:16;1981:27;1962:48;-1:-1:-1;2026:16:20;;;;;1712:336;-1:-1:-1;;1712:336:20:o;2053:278::-;-1:-1:-1;;;;;;2238:33:20;;2226:46;;2208:3;2288:37;2322:1;2313:11;;2305:6;2288:37;:::i;:::-;2281:44;2053:278;-1:-1:-1;;;;2053:278:20:o;2336:189::-;2465:3;2490:29;2515:3;2507:6;2490:29;:::i",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "IS_SCRIPT()": "f8ccbf47",
    "IS_TEST()": "fa7626d4",
    "failed()": "ba414fa6",
    "setUp()": "0a9254e4",
    "testAttack()": "6f2db99c",
    "vault()": "fbfa77cf",
    "vm()": "3a768463"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/ethernaut/Vault.t.sol\":\"VaultTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solmate/=lib/solmate/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/forge-std/lib/ds-test/src/test.sol\":{\"keccak256\":\"0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5\",\"dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0x9d09c1e55cd508d3376cff9961625d51d73f8ce075ec1e9deed41408a4556e00\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8880c5551daf337ab91665a9ce593df67a9eb11b0bee820f631d324d2fdd3a8b\",\"dweb:/ipfs/QmNpvSBGnS9Jr6Swd6XKsijG59a4yjYemWCFwprjKFkpNC\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x1297a1cc393bc8163ccf143e5335536e78cb25ac24a4f6dfdb25f5746dd4827e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://945ccffad9fc09d2aa0ac200a80dcfa2f491dba8680fc9c3d3d450d891284b87\",\"dweb:/ipfs/QmYSfFb1L6LN1ZB9KWzZqxt2iAbpuFDskBcU1Bz4RiyuQ5\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x6c9cbd51234372b66bf7c146870edf0855770c46e960a8fae8f354ddf382876b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fd0ff1f449294dd1447b9d483c52d78e137d8cac518646e76df9fdd4d185d6c2\",\"dweb:/ipfs/QmS3JP4vKgvAWo8Tc7zVrGxbdR7t37ayk1mTHN3seD6UAZ\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x1a5767028a0c3985e991456fc9650055e28b01b787c56b11f66ac30498a153ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f86887212eacca450a15a8a5bf9fe83fd91a2ba623df8e9c32c75a31824c8ea2\",\"dweb:/ipfs/QmTUHBNdZwntgjbFZne7fY9ZJLNGYWaq3uWfGk6FyqdAkB\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0xbeb823fcdb356244a83aaccdf828ad019ecc1ffaa3dff18e624fc6d5714ea671\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4cbe9400340e5f9ec55e2aff3bad1c15fa3afbbe37e80800e6f3fed2ad26854f\",\"dweb:/ipfs/QmdJBABsuXkvWxVzEyGXsTE3vyfBPXDdw5xvvtUz3JeoYW\"]},\"src/ethernaut/level_8/Vault.sol\":{\"keccak256\":\"0xa9dc29eec754730aa7083f52b45d76f6df613eb6d5bdb15b67d408ef2f3a8527\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0675c9cbade01d0ea4d023fc3fe83eedad8af92a2b138ac36a4629f179d94b3b\",\"dweb:/ipfs/QmbeBCYvLiqRgg9NLJBgYFfT768HVMbNLWBFe8Z2KrFQ1h\"]},\"test/ethernaut/Vault.t.sol\":{\"keccak256\":\"0x4a1cb0131066d284d6276314bbd21cc38ee3414b66b93fa31e761f8cb72f9953\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://5516f5b8861d862878bd1b4ee3b2c0beca99d255e3dea9bdec84fa685f18ca6a\",\"dweb:/ipfs/QmTwahV7eebZYnoHTqbfcnAAdWubFFK3f4vmCuat4qRUwx\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256",
              "name": "",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "val",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "val",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes32",
              "name": "val",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "val",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "logs",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "IS_SCRIPT",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "IS_TEST",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "failed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setUp"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testAttack"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "vault",
          "outputs": [
            {
              "internalType": "contract Vault",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "vm",
          "outputs": [
            {
              "internalType": "contract Vm",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@solmate/=lib/solmate/src/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        ":solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "test/ethernaut/Vault.t.sol": "VaultTest"
      },
      "libraries": {}
    },
    "sources": {
      "lib/forge-std/lib/ds-test/src/test.sol": {
        "keccak256": "0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54",
        "urls": [
          "bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5",
          "dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/forge-std/src/Script.sol": {
        "keccak256": "0x9d09c1e55cd508d3376cff9961625d51d73f8ce075ec1e9deed41408a4556e00",
        "urls": [
          "bzz-raw://8880c5551daf337ab91665a9ce593df67a9eb11b0bee820f631d324d2fdd3a8b",
          "dweb:/ipfs/QmNpvSBGnS9Jr6Swd6XKsijG59a4yjYemWCFwprjKFkpNC"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdJson.sol": {
        "keccak256": "0x1297a1cc393bc8163ccf143e5335536e78cb25ac24a4f6dfdb25f5746dd4827e",
        "urls": [
          "bzz-raw://945ccffad9fc09d2aa0ac200a80dcfa2f491dba8680fc9c3d3d450d891284b87",
          "dweb:/ipfs/QmYSfFb1L6LN1ZB9KWzZqxt2iAbpuFDskBcU1Bz4RiyuQ5"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/Test.sol": {
        "keccak256": "0x6c9cbd51234372b66bf7c146870edf0855770c46e960a8fae8f354ddf382876b",
        "urls": [
          "bzz-raw://fd0ff1f449294dd1447b9d483c52d78e137d8cac518646e76df9fdd4d185d6c2",
          "dweb:/ipfs/QmS3JP4vKgvAWo8Tc7zVrGxbdR7t37ayk1mTHN3seD6UAZ"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/Vm.sol": {
        "keccak256": "0x1a5767028a0c3985e991456fc9650055e28b01b787c56b11f66ac30498a153ab",
        "urls": [
          "bzz-raw://f86887212eacca450a15a8a5bf9fe83fd91a2ba623df8e9c32c75a31824c8ea2",
          "dweb:/ipfs/QmTUHBNdZwntgjbFZne7fY9ZJLNGYWaq3uWfGk6FyqdAkB"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/console.sol": {
        "keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
        "urls": [
          "bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
          "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/console2.sol": {
        "keccak256": "0xbeb823fcdb356244a83aaccdf828ad019ecc1ffaa3dff18e624fc6d5714ea671",
        "urls": [
          "bzz-raw://4cbe9400340e5f9ec55e2aff3bad1c15fa3afbbe37e80800e6f3fed2ad26854f",
          "dweb:/ipfs/QmdJBABsuXkvWxVzEyGXsTE3vyfBPXDdw5xvvtUz3JeoYW"
        ],
        "license": "MIT"
      },
      "src/ethernaut/level_8/Vault.sol": {
        "keccak256": "0xa9dc29eec754730aa7083f52b45d76f6df613eb6d5bdb15b67d408ef2f3a8527",
        "urls": [
          "bzz-raw://0675c9cbade01d0ea4d023fc3fe83eedad8af92a2b138ac36a4629f179d94b3b",
          "dweb:/ipfs/QmbeBCYvLiqRgg9NLJBgYFfT768HVMbNLWBFe8Z2KrFQ1h"
        ],
        "license": "MIT"
      },
      "test/ethernaut/Vault.t.sol": {
        "keccak256": "0x4a1cb0131066d284d6276314bbd21cc38ee3414b66b93fa31e761f8cb72f9953",
        "urls": [
          "bzz-raw://5516f5b8861d862878bd1b4ee3b2c0beca99d255e3dea9bdec84fa685f18ca6a",
          "dweb:/ipfs/QmTwahV7eebZYnoHTqbfcnAAdWubFFK3f4vmCuat4qRUwx"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "irOptimized": "/// @use-src 0:\"lib/forge-std/lib/ds-test/src/test.sol\", 1:\"lib/forge-std/src/Script.sol\", 3:\"lib/forge-std/src/Test.sol\", 19:\"test/ethernaut/Vault.t.sol\"\nobject \"VaultTest_24400\" {\n    code {\n        {\n            /// @src 19:143:948  \"contract VaultTest is Test {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            sstore(/** @src 0:1594:1598  \"true\" */ 0x00, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ or(and(sload(/** @src 0:1594:1598  \"true\" */ 0x00), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ not(16711935)), 65537))\n            let _2 := datasize(\"VaultTest_24400_deployed\")\n            codecopy(_1, dataoffset(\"VaultTest_24400_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"lib/forge-std/lib/ds-test/src/test.sol\", 1:\"lib/forge-std/src/Script.sol\", 19:\"test/ethernaut/Vault.t.sol\"\n    object \"VaultTest_24400_deployed\" {\n        code {\n            {\n                /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x0a9254e4 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        /// @src 19:348:370  \"keccak256(\\\"StdCheats\\\")\"\n                        let _5 := 0xf5344ae61cf4101f013d1abd9a71a3f8bca32e82a7a6a3e4b7dc97ad6404d89d\n                        /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                        sstore(/** @src 19:337:370  \"password = keccak256(\\\"StdCheats\\\")\" */ 0x09, /** @src 19:348:370  \"keccak256(\\\"StdCheats\\\")\" */ _5)\n                        /// @src 19:388:407  \"new Vault(password)\"\n                        let _6 := datasize(\"Vault_24050\")\n                        let _7 := add(_1, _6)\n                        if or(gt(_7, 0xffffffffffffffff), lt(_7, _1))\n                        {\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ _3, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x41)\n                            revert(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x24)\n                        }\n                        /// @src 19:388:407  \"new Vault(password)\"\n                        datacopy(_1, dataoffset(\"Vault_24050\"), _6)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(_7, /** @src 19:348:370  \"keccak256(\\\"StdCheats\\\")\" */ _5)\n                        /// @src 19:388:407  \"new Vault(password)\"\n                        let expr_address := create(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ _4, /** @src 19:388:407  \"new Vault(password)\" */ _1, add(sub(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ _7, /** @src 19:388:407  \"new Vault(password)\" */ _1), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ 32))\n                        /// @src 19:388:407  \"new Vault(password)\"\n                        if iszero(expr_address)\n                        {\n                            /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                            let pos := mload(_2)\n                            returndatacopy(pos, _4, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        sstore(/** @src 19:380:407  \"vault = new Vault(password)\" */ 0x08, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ or(and(sload(/** @src 19:380:407  \"vault = new Vault(password)\" */ 0x08), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ shl(160, 0xffffffffffffffffffffffff)), and(expr_address, sub(shl(160, /** @src 19:388:407  \"new Vault(password)\" */ 1), 1))))\n                        /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                        return(mload(_2), _4)\n                    }\n                    case 0x3a768463 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let memPos := mload(_2)\n                        mstore(memPos, 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d)\n                        return(memPos, 32)\n                    }\n                    case 0x6f2db99c {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _8 := sub(shl(160, /** @src 19:388:407  \"new Vault(password)\" */ 1), 1)\n                        /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                        let value := and(sload(/** @src 19:780:785  \"vault\" */ 0x08), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _8)\n                        /// @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\"\n                        let _9 := /** @src 19:143:948  \"contract VaultTest is Test {...\" */ mload(_2)\n                        /// @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\"\n                        mstore(_9, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ shl(228, 0x0667f9d7))\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(/** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ add(_9, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _3), value)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        let _10 := 36\n                        mstore(add(/** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ _9, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ _10), /** @src 19:804:805  \"1\" */ 0x01)\n                        /// @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\"\n                        let _11 := 32\n                        /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                        let _12 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\"\n                        let _13 := call(gas(), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _12, _4, /** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ _9, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 68, /** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ _9, _11)\n                        if iszero(_13)\n                        {\n                            /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                            let pos_1 := mload(_2)\n                            returndatacopy(pos_1, _4, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\"\n                        let expr := /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _4\n                        /// @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\"\n                        if _13\n                        {\n                            let _14 := _11\n                            if gt(_11, returndatasize()) { _14 := returndatasize() }\n                            finalize_allocation(_9, _14)\n                            /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                            if slt(sub(/** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ add(_9, _14), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _9), /** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ _11)\n                            /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                            { revert(_4, _4) }\n                            /// @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\"\n                            expr := /** @src 19:143:948  \"contract VaultTest is Test {...\" */ mload(_9)\n                        }\n                        let _15 := sload(/** @src 19:839:847  \"password\" */ 0x09)\n                        /// @src 0:4147:4359  \"if (a != b) {...\"\n                        if /** @src 0:4151:4157  \"a != b\" */ iszero(eq(expr, _15))\n                        /// @src 0:4147:4359  \"if (a != b) {...\"\n                        {\n                            /// @src 0:4178:4222  \"log(\\\"Error: a == b not satisfied [bytes32]\\\")\"\n                            let _16 := /** @src 19:143:948  \"contract VaultTest is Test {...\" */ mload(_2)\n                            mstore(_16, /** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ _11)\n                            /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                            mstore(add(_16, /** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ _11), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ 37)\n                            mstore(add(_16, _2), \"Error: a == b not satisfied [byt\")\n                            mstore(add(_16, 96), \"es32]\")\n                            /// @src 0:4178:4222  \"log(\\\"Error: a == b not satisfied [bytes32]\\\")\"\n                            log1(_16, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ 128, /** @src 0:4178:4222  \"log(\\\"Error: a == b not satisfied [bytes32]\\\")\" */ 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50)\n                            /// @src 0:4241:4275  \"log_named_bytes32(\\\"  Expected\\\", b)\"\n                            let _17 := /** @src 19:143:948  \"contract VaultTest is Test {...\" */ mload(_2)\n                            mstore(_17, _2)\n                            mstore(add(_17, _2), 10)\n                            mstore(add(_17, 96), \"  Expected\")\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ add(_17, /** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ _11), /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ _15)\n                            /// @src 0:4241:4275  \"log_named_bytes32(\\\"  Expected\\\", b)\"\n                            let _18 := 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99\n                            log1(_17, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ 128, /** @src 0:4241:4275  \"log_named_bytes32(\\\"  Expected\\\", b)\" */ _18)\n                            /// @src 0:4294:4328  \"log_named_bytes32(\\\"    Actual\\\", a)\"\n                            let _19 := /** @src 19:143:948  \"contract VaultTest is Test {...\" */ mload(_2)\n                            mstore(_19, _2)\n                            mstore(add(_19, _2), 10)\n                            mstore(add(_19, 96), \"    Actual\")\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            mstore(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ add(_19, /** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ _11), /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ expr)\n                            /// @src 0:4294:4328  \"log_named_bytes32(\\\"    Actual\\\", a)\"\n                            log1(_19, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ 128, /** @src 0:4241:4275  \"log_named_bytes32(\\\"  Expected\\\", b)\" */ _18)\n                            /// @src 0:2445:2804  \"if (hasHEVMContext()) {...\"\n                            if /** @src 0:3059:3075  \"hevmCodeSize > 0\" */ iszero(iszero(/** @src 0:2939:3043  \"assembly {...\" */ extcodesize(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ _12)))\n                            /// @src 0:2445:2804  \"if (hasHEVMContext()) {...\"\n                            {\n                                /// @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\"\n                                let expr_mpos := /** @src 19:143:948  \"contract VaultTest is Test {...\" */ mload(_2)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                mstore(/** @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\" */ add(expr_mpos, /** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ _11), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _12)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                mstore(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ add(/** @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\" */ expr_mpos, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _2), /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(210, 0x19985a5b1959))\n                                mstore(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ add(/** @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\" */ expr_mpos, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ 96), /** @src 19:804:805  \"1\" */ 0x01)\n                                /// @src 0:2645:2712  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\"\n                                mstore(expr_mpos, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ 96)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                let newFreePtr := add(expr_mpos, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ 128)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, expr_mpos))\n                                {\n                                    mstore(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                                    mstore(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ _3, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x41)\n                                    revert(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ _10)\n                                }\n                                mstore(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ _2, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ newFreePtr)\n                                /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                                let _20 := add(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ expr_mpos, /** @src 0:2534:2730  \"abi.encodePacked(...\" */ 160)\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                mstore(_20, shl(224, 0x70ca10bb))\n                                let length := mload(expr_mpos)\n                                let i := /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _4\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                for { }\n                                lt(i, length)\n                                {\n                                    i := add(i, /** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ _11)\n                                }\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                {\n                                    let _21 := add(expr_mpos, i)\n                                    mstore(add(_21, 164), mload(add(_21, /** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ _11)))\n                                }\n                                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                                if gt(i, length)\n                                {\n                                    mstore(add(add(expr_mpos, length), 164), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _4)\n                                }\n                                /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                                let _22 := sub(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ add(expr_mpos, length), expr_mpos)\n                                /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                                mstore(newFreePtr, add(_22, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _3))\n                                /// @src 0:2534:2730  \"abi.encodePacked(...\"\n                                finalize_allocation(newFreePtr, add(_22, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ _10))\n                                /// @src 0:2499:2744  \"HEVM_ADDRESS.call(...\"\n                                pop(call(gas(), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _12, _4, /** @src 0:2499:2744  \"HEVM_ADDRESS.call(...\" */ _20, mload(newFreePtr), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _4, _4))\n                                /// @src 0:2499:2744  \"HEVM_ADDRESS.call(...\"\n                                pop(extract_returndata())\n                            }\n                            /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                            sstore(_4, or(and(sload(_4), not(65280)), 256))\n                        }\n                        let value_1 := and(sload(/** @src 19:780:785  \"vault\" */ 0x08), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _8)\n                        /// @src 19:859:882  \"vault.unlock(_password)\"\n                        if iszero(extcodesize(value_1))\n                        {\n                            /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 19:859:882  \"vault.unlock(_password)\"\n                        let _23 := /** @src 19:143:948  \"contract VaultTest is Test {...\" */ mload(_2)\n                        /// @src 19:859:882  \"vault.unlock(_password)\"\n                        mstore(_23, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ shl(225, 0x764dad9d))\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(/** @src 19:859:882  \"vault.unlock(_password)\" */ add(_23, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _3), /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ expr)\n                        /// @src 19:859:882  \"vault.unlock(_password)\"\n                        let _24 := call(gas(), value_1, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _4, /** @src 19:859:882  \"vault.unlock(_password)\" */ _23, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ _10, /** @src 19:859:882  \"vault.unlock(_password)\" */ _23, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _4)\n                        /// @src 19:859:882  \"vault.unlock(_password)\"\n                        if iszero(_24)\n                        {\n                            /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                            let pos_2 := mload(_2)\n                            returndatacopy(pos_2, _4, returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        /// @src 19:859:882  \"vault.unlock(_password)\"\n                        if _24\n                        {\n                            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                            if gt(_23, 0xffffffffffffffff)\n                            {\n                                mstore(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                                mstore(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ _3, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x41)\n                                revert(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ _4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ _10)\n                            }\n                            mstore(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ _2, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ _23)\n                            /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                            _4 := _4\n                        }\n                        let value_2 := and(sload(/** @src 19:780:785  \"vault\" */ 0x08), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _8)\n                        /// @src 19:924:938  \"vault.locked()\"\n                        let _25 := /** @src 19:143:948  \"contract VaultTest is Test {...\" */ mload(_2)\n                        /// @src 19:924:938  \"vault.locked()\"\n                        mstore(_25, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ shl(225, 0x67984809))\n                        /// @src 19:924:938  \"vault.locked()\"\n                        let _26 := staticcall(gas(), value_2, _25, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ _3, /** @src 19:924:938  \"vault.locked()\" */ _25, /** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ _11)\n                        /// @src 19:924:938  \"vault.locked()\"\n                        if iszero(_26)\n                        {\n                            /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                            let pos_3 := mload(_2)\n                            returndatacopy(pos_3, _4, returndatasize())\n                            revert(pos_3, returndatasize())\n                        }\n                        /// @src 19:924:938  \"vault.locked()\"\n                        let expr_1 := _4\n                        if _26\n                        {\n                            let _27 := /** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ _11\n                            /// @src 19:924:938  \"vault.locked()\"\n                            if gt(/** @src 19:764:808  \"vm.load(address(vault), bytes32(uint256(1)))\" */ _11, /** @src 19:924:938  \"vault.locked()\" */ returndatasize()) { _27 := returndatasize() }\n                            finalize_allocation(_25, _27)\n                            expr_1 := abi_decode_bool_fromMemory(_25, add(_25, _27))\n                        }\n                        /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                        if iszero(/** @src 19:923:938  \"!vault.locked()\" */ iszero(expr_1))\n                        /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                        {\n                            mstore(_4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                            /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                            mstore(_3, /** @src 19:804:805  \"1\" */ 0x01)\n                            /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                            revert(_4, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ _10)\n                        }\n                        /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                        return(mload(_2), _4)\n                    }\n                    case 0xba414fa6 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let ret := fun_failed()\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, iszero(iszero(ret)))\n                        return(memPos_1, 32)\n                    }\n                    case 0xf8ccbf47 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_3 := and(shr(16, sload(_4)), 0xff)\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, iszero(iszero(value_3)))\n                        return(memPos_2, 32)\n                    }\n                    case 0xfa7626d4 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_4 := and(sload(_4), 0xff)\n                        let memPos_3 := mload(_2)\n                        mstore(memPos_3, iszero(iszero(value_4)))\n                        return(memPos_3, 32)\n                    }\n                    case 0xfbfa77cf {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_5 := and(sload(/** @src 19:214:232  \"Vault public vault\" */ 8), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ sub(shl(160, /** @src 19:388:407  \"new Vault(password)\" */ 1), 1))\n                        /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                        let memPos_4 := mload(_2)\n                        mstore(memPos_4, value_5)\n                        return(memPos_4, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _1 := returndatasize()\n                    if gt(_1, 0xffffffffffffffff)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x24)\n                    }\n                    let memPtr := /** @src 19:143:948  \"contract VaultTest is Test {...\" */ mload(64)\n                    /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                    finalize_allocation(memPtr, add(and(add(_1, 31), not(31)), 0x20))\n                    mstore(memPtr, _1)\n                    data := memPtr\n                    returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ returndatasize())\n                }\n            }\n            function abi_decode_bool_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    /// @src 19:143:948  \"contract VaultTest is Test {...\"\n                    revert(0, 0)\n                }\n                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                let value := mload(headStart)\n                if iszero(eq(value, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ iszero(iszero(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ value))))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                value0 := value\n            }\n            /// @ast-id 172 @src 0:1819:2403  \"function failed() public returns (bool) {...\"\n            function fun_failed() -> var\n            {\n                /// @src 0:1873:1880  \"_failed\"\n                let _1 := 0x00\n                /// @src 0:1869:2397  \"if (_failed) {...\"\n                switch /** @src 19:143:948  \"contract VaultTest is Test {...\" */ and(shr(8, sload(/** @src 0:1873:1880  \"_failed\" */ _1)), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ 0xff)\n                case /** @src 0:1869:2397  \"if (_failed) {...\" */ 0 {\n                    /// @src 0:1941:1966  \"bool globalFailed = false\"\n                    let var_globalFailed := /** @src 0:1873:1880  \"_failed\" */ _1\n                    /// @src 0:2939:3043  \"assembly {...\"\n                    let _2 := 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D\n                    /// @src 0:1980:2354  \"if (hasHEVMContext()) {...\"\n                    if /** @src 0:3059:3075  \"hevmCodeSize > 0\" */ iszero(iszero(/** @src 0:2939:3043  \"assembly {...\" */ extcodesize(_2)))\n                    /// @src 0:1980:2354  \"if (hasHEVMContext()) {...\"\n                    {\n                        /// @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\"\n                        let expr_mpos := /** @src 19:143:948  \"contract VaultTest is Test {...\" */ mload(64)\n                        /// @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\"\n                        let _3 := 0x20\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(/** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ add(expr_mpos, _3), /** @src 0:2939:3043  \"assembly {...\" */ _2)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(add(/** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ expr_mpos, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ 64), /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(210, 0x19985a5b1959))\n                        /// @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\"\n                        mstore(expr_mpos, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ 64)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        let newFreePtr := add(expr_mpos, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ 96)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, expr_mpos))\n                        {\n                            mstore(/** @src 0:1873:1880  \"_failed\" */ _1, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(/** @src 0:1873:1880  \"_failed\" */ _1, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ 0x24)\n                        }\n                        mstore(/** @src 19:143:948  \"contract VaultTest is Test {...\" */ 64, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ newFreePtr)\n                        /// @src 0:2086:2261  \"abi.encodePacked(...\"\n                        let _4 := add(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ expr_mpos, /** @src 0:2086:2261  \"abi.encodePacked(...\" */ 128)\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        mstore(_4, /** @src 19:143:948  \"contract VaultTest is Test {...\" */ shl(228, 0x0667f9d7))\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        let length := mload(expr_mpos)\n                        let i := /** @src 0:1873:1880  \"_failed\" */ _1\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        for { }\n                        lt(i, length)\n                        {\n                            i := add(i, /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3)\n                        }\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        {\n                            let _5 := add(expr_mpos, i)\n                            mstore(add(_5, 132), mload(add(_5, /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3)))\n                        }\n                        /// @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\"\n                        if gt(i, length)\n                        {\n                            mstore(add(add(expr_mpos, length), 132), /** @src 0:1873:1880  \"_failed\" */ _1)\n                        }\n                        /// @src 0:2086:2261  \"abi.encodePacked(...\"\n                        let _6 := sub(/** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ add(expr_mpos, length), expr_mpos)\n                        /// @src 0:2086:2261  \"abi.encodePacked(...\"\n                        mstore(newFreePtr, add(_6, 4))\n                        finalize_allocation(newFreePtr, add(_6, 36))\n                        /// @src 0:2047:2279  \"HEVM_ADDRESS.call(...\"\n                        pop(call(gas(), /** @src 0:2939:3043  \"assembly {...\" */ _2, /** @src 0:1873:1880  \"_failed\" */ _1, /** @src 0:2047:2279  \"HEVM_ADDRESS.call(...\" */ _4, mload(newFreePtr), /** @src 0:1873:1880  \"_failed\" */ _1, _1))\n                        /// @src 0:2047:2279  \"HEVM_ADDRESS.call(...\"\n                        let expr_component_mpos := extract_returndata()\n                        /// @src 0:2297:2339  \"globalFailed = abi.decode(retdata, (bool))\"\n                        var_globalFailed := /** @src 0:2312:2339  \"abi.decode(retdata, (bool))\" */ abi_decode_bool_fromMemory(add(expr_component_mpos, /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3), /** @src 0:2312:2339  \"abi.decode(retdata, (bool))\" */ add(add(expr_component_mpos, /** @src 0:1671:1735  \"address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))\" */ mload(/** @src 0:2312:2339  \"abi.decode(retdata, (bool))\" */ expr_component_mpos)), /** @src 0:2196:2239  \"abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\" */ _3))\n                    }\n                    /// @src 0:2367:2386  \"return globalFailed\"\n                    var := var_globalFailed\n                    leave\n                }\n                default /// @src 0:1869:2397  \"if (_failed) {...\"\n                {\n                    /// @src 0:1896:1910  \"return _failed\"\n                    var := /** @src 19:143:948  \"contract VaultTest is Test {...\" */ and(shr(8, sload(/** @src 0:1873:1880  \"_failed\" */ _1)), /** @src 19:143:948  \"contract VaultTest is Test {...\" */ 0xff)\n                    /// @src 0:1896:1910  \"return _failed\"\n                    leave\n                }\n            }\n        }\n        /// @use-src 15:\"src/ethernaut/level_8/Vault.sol\"\n        object \"Vault_24050\" {\n            code {\n                {\n                    /// @src 15:57:356  \"contract Vault {...\"\n                    let _1 := memoryguard(0x80)\n                    if callvalue() { revert(0, 0) }\n                    let programSize := datasize(\"Vault_24050\")\n                    let argSize := sub(codesize(), programSize)\n                    let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n                    if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 15:57:356  \"contract Vault {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 15:57:356  \"contract Vault {...\" */ 0x24)\n                    }\n                    mstore(64, newFreePtr)\n                    codecopy(_1, programSize, argSize)\n                    if slt(sub(add(_1, argSize), _1), 32)\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                    /// @src 15:57:356  \"contract Vault {...\"\n                    let value := mload(_1)\n                    sstore(/** @src -1:-1:-1 */ 0, /** @src 15:57:356  \"contract Vault {...\" */ or(and(sload(/** @src -1:-1:-1 */ 0), /** @src 15:57:356  \"contract Vault {...\" */ not(255)), 1))\n                    sstore(1, value)\n                    let _2 := mload(64)\n                    let _3 := datasize(\"Vault_24050_deployed\")\n                    codecopy(_2, dataoffset(\"Vault_24050_deployed\"), _3)\n                    return(_2, _3)\n                }\n            }\n            /// @use-src 15:\"src/ethernaut/level_8/Vault.sol\"\n            object \"Vault_24050_deployed\" {\n                code {\n                    {\n                        /// @src 15:57:356  \"contract Vault {...\"\n                        let _1 := memoryguard(0x80)\n                        mstore(64, _1)\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let _2 := 0\n                            switch shr(224, calldataload(_2))\n                            case 0xcf309012 {\n                                if callvalue() { revert(_2, _2) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                mstore(_1, iszero(iszero(and(sload(_2), 0xff))))\n                                return(_1, 32)\n                            }\n                            case 0xec9b5b3a {\n                                if callvalue() { revert(_2, _2) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                                /// @src 15:282:348  \"if (password == _password) {...\"\n                                if /** @src 15:286:307  \"password == _password\" */ eq(/** @src 15:57:356  \"contract Vault {...\" */ sload(1), calldataload(4))\n                                /// @src 15:282:348  \"if (password == _password) {...\"\n                                {\n                                    /// @src 15:57:356  \"contract Vault {...\"\n                                    sstore(_2, and(sload(_2), not(255)))\n                                }\n                                return(mload(64), _2)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                }\n                data \".metadata\" hex\"a2646970667358221220a04d5ff1f93c09f56c3a7beaf61187d975db4ca800d758edee9a62aab8a8330364736f6c634300080f0033\"\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220723f0d5b2c131e71f236d33fddece5d7ce0be4dedc588bcf9d417a5135070e1c64736f6c634300080f0033\"\n    }\n}\n",
  "ast": {
    "absolutePath": "test/ethernaut/Vault.t.sol",
    "id": 24401,
    "exportedSymbols": {
      "DSTest": [
        1786
      ],
      "Script": [
        2049
      ],
      "StdStorage": [
        5077
      ],
      "Test": [
        4979
      ],
      "Vault": [
        24050
      ],
      "VaultTest": [
        24400
      ],
      "Vm": [
        7098
      ],
      "console": [
        15162
      ],
      "console2": [
        23226
      ],
      "stdError": [
        5049
      ],
      "stdJson": [
        2409
      ],
      "stdMath": [
        6318
      ],
      "stdStorage": [
        6179
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:910:19",
    "nodes": [
      {
        "id": 24329,
        "nodeType": "PragmaDirective",
        "src": "39:24:19",
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".13"
        ]
      },
      {
        "id": 24330,
        "nodeType": "ImportDirective",
        "src": "65:28:19",
        "absolutePath": "lib/forge-std/src/Test.sol",
        "file": "forge-std/Test.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24401,
        "sourceUnit": 6319,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 24331,
        "nodeType": "ImportDirective",
        "src": "94:47:19",
        "absolutePath": "src/ethernaut/level_8/Vault.sol",
        "file": "../../src/ethernaut/level_8/Vault.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24401,
        "sourceUnit": 24051,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 24400,
        "nodeType": "ContractDefinition",
        "src": "143:805:19",
        "nodes": [
          {
            "id": 24337,
            "nodeType": "UsingForDirective",
            "src": "176:32:19",
            "global": false,
            "libraryName": {
              "id": 24334,
              "name": "stdStorage",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6179,
              "src": "182:10:19"
            },
            "typeName": {
              "id": 24336,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 24335,
                "name": "StdStorage",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 5077,
                "src": "197:10:19"
              },
              "referencedDeclaration": 5077,
              "src": "197:10:19",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_StdStorage_$5077_storage_ptr",
                "typeString": "struct StdStorage"
              }
            }
          },
          {
            "id": 24340,
            "nodeType": "VariableDeclaration",
            "src": "214:18:19",
            "constant": false,
            "functionSelector": "fbfa77cf",
            "mutability": "mutable",
            "name": "vault",
            "nameLocation": "227:5:19",
            "scope": 24400,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Vault_$24050",
              "typeString": "contract Vault"
            },
            "typeName": {
              "id": 24339,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 24338,
                "name": "Vault",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 24050,
                "src": "214:5:19"
              },
              "referencedDeclaration": 24050,
              "src": "214:5:19",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Vault_$24050",
                "typeString": "contract Vault"
              }
            },
            "visibility": "public"
          },
          {
            "id": 24342,
            "nodeType": "VariableDeclaration",
            "src": "238:16:19",
            "constant": false,
            "mutability": "mutable",
            "name": "password",
            "nameLocation": "246:8:19",
            "scope": 24400,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 24341,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "238:7:19",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 24360,
            "nodeType": "FunctionDefinition",
            "src": "303:111:19",
            "body": {
              "id": 24359,
              "nodeType": "Block",
              "src": "327:87:19",
              "statements": [
                {
                  "expression": {
                    "id": 24349,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24345,
                      "name": "password",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24342,
                      "src": "337:8:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "537464436865617473",
                          "id": 24347,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "358:11:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_f5344ae61cf4101f013d1abd9a71a3f8bca32e82a7a6a3e4b7dc97ad6404d89d",
                            "typeString": "literal_string \"StdCheats\""
                          },
                          "value": "StdCheats"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_f5344ae61cf4101f013d1abd9a71a3f8bca32e82a7a6a3e4b7dc97ad6404d89d",
                            "typeString": "literal_string \"StdCheats\""
                          }
                        ],
                        "id": 24346,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -8,
                        "src": "348:9:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 24348,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "348:22:19",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "337:33:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 24350,
                  "nodeType": "ExpressionStatement",
                  "src": "337:33:19"
                },
                {
                  "expression": {
                    "id": 24357,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24351,
                      "name": "vault",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24340,
                      "src": "380:5:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Vault_$24050",
                        "typeString": "contract Vault"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 24355,
                          "name": "password",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24342,
                          "src": "398:8:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "id": 24354,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "388:9:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$_t_bytes32_$returns$_t_contract$_Vault_$24050_$",
                          "typeString": "function (bytes32) returns (contract Vault)"
                        },
                        "typeName": {
                          "id": 24353,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 24352,
                            "name": "Vault",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 24050,
                            "src": "392:5:19"
                          },
                          "referencedDeclaration": 24050,
                          "src": "392:5:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Vault_$24050",
                            "typeString": "contract Vault"
                          }
                        }
                      },
                      "id": 24356,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "388:19:19",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Vault_$24050",
                        "typeString": "contract Vault"
                      }
                    },
                    "src": "380:27:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Vault_$24050",
                      "typeString": "contract Vault"
                    }
                  },
                  "id": 24358,
                  "nodeType": "ExpressionStatement",
                  "src": "380:27:19"
                }
              ]
            },
            "functionSelector": "0a9254e4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setUp",
            "nameLocation": "312:5:19",
            "parameters": {
              "id": 24343,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "317:2:19"
            },
            "returnParameters": {
              "id": 24344,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "327:0:19"
            },
            "scope": 24400,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 24399,
            "nodeType": "FunctionDefinition",
            "src": "420:526:19",
            "body": {
              "id": 24398,
              "nodeType": "Block",
              "src": "449:497:19",
              "statements": [
                {
                  "assignments": [
                    24364
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 24364,
                      "mutability": "mutable",
                      "name": "_password",
                      "nameLocation": "752:9:19",
                      "nodeType": "VariableDeclaration",
                      "scope": 24398,
                      "src": "744:17:19",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 24363,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "744:7:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 24379,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 24369,
                            "name": "vault",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24340,
                            "src": "780:5:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Vault_$24050",
                              "typeString": "contract Vault"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_Vault_$24050",
                              "typeString": "contract Vault"
                            }
                          ],
                          "id": 24368,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "772:7:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 24367,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "772:7:19",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 24370,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "772:14:19",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "hexValue": "31",
                                "id": 24375,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "804:1:19",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                }
                              ],
                              "id": 24374,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "796:7:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 24373,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "796:7:19",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 24376,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "796:10:19",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 24372,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "788:7:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes32_$",
                            "typeString": "type(bytes32)"
                          },
                          "typeName": {
                            "id": 24371,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "788:7:19",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 24377,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "788:19:19",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 24365,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1817,
                        "src": "764:2:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$7098",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 24366,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "load",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6361,
                      "src": "764:7:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (address,bytes32) external returns (bytes32)"
                      }
                    },
                    "id": 24378,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "764:44:19",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "744:64:19"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24381,
                        "name": "_password",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24364,
                        "src": "828:9:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 24382,
                        "name": "password",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24342,
                        "src": "839:8:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 24380,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3167,
                        3192,
                        3205,
                        3221,
                        3263,
                        3305,
                        3347,
                        3384,
                        3421,
                        3458,
                        320,
                        345,
                        375,
                        400,
                        459,
                        484,
                        514,
                        539,
                        1639,
                        1674
                      ],
                      "referencedDeclaration": 375,
                      "src": "819:8:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$",
                        "typeString": "function (bytes32,bytes32)"
                      }
                    },
                    "id": 24383,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "819:29:19",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24384,
                  "nodeType": "ExpressionStatement",
                  "src": "819:29:19"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24388,
                        "name": "_password",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24364,
                        "src": "872:9:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 24385,
                        "name": "vault",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24340,
                        "src": "859:5:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vault_$24050",
                          "typeString": "contract Vault"
                        }
                      },
                      "id": 24387,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "unlock",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 24049,
                      "src": "859:12:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_bytes32_$returns$__$",
                        "typeString": "function (bytes32) external"
                      }
                    },
                    "id": 24389,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "859:23:19",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24390,
                  "nodeType": "ExpressionStatement",
                  "src": "859:23:19"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24395,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "923:15:19",
                        "subExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 24392,
                              "name": "vault",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 24340,
                              "src": "924:5:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Vault_$24050",
                                "typeString": "contract Vault"
                              }
                            },
                            "id": 24393,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "locked",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 24018,
                            "src": "924:12:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$__$returns$_t_bool_$",
                              "typeString": "function () view external returns (bool)"
                            }
                          },
                          "id": 24394,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "924:14:19",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 24391,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "916:6:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 24396,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "916:23:19",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24397,
                  "nodeType": "ExpressionStatement",
                  "src": "916:23:19"
                }
              ]
            },
            "functionSelector": "6f2db99c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testAttack",
            "nameLocation": "429:10:19",
            "parameters": {
              "id": 24361,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "439:2:19"
            },
            "returnParameters": {
              "id": 24362,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "449:0:19"
            },
            "scope": 24400,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 24332,
              "name": "Test",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 4979,
              "src": "165:4:19"
            },
            "id": 24333,
            "nodeType": "InheritanceSpecifier",
            "src": "165:4:19"
          }
        ],
        "canonicalName": "VaultTest",
        "contractDependencies": [
          24050
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          24400,
          4979,
          2049,
          1786
        ],
        "name": "VaultTest",
        "nameLocation": "152:9:19",
        "scope": 24401,
        "usedErrors": []
      }
    ],
    "license": "UNLICENSED"
  },
  "id": 19
}